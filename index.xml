<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>水阙</title><link>https://guyueshui.github.io/</link><description>Recent content on 水阙</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 14 Jun 2023 19:56:54 +0800</lastBuildDate><atom:link href="https://guyueshui.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>护眼显示器选购指南</title><link>https://guyueshui.github.io/post/eye-comfortable-displayer/</link><pubDate>Wed, 14 Jun 2023 19:56:54 +0800</pubDate><guid>https://guyueshui.github.io/post/eye-comfortable-displayer/</guid><description>&lt;p>常年对着破旧笔记本的粗糙小屏幕，实在是对不起自己的眼睛。这不，趁着今年 618 打算买个显示器。预算 1500，分辨率 2K 起，要求具备莱茵低蓝光认证。&lt;/p></description></item><item><title>从零开始构建家庭共享存储</title><link>https://guyueshui.github.io/post/share-storage-with-family/</link><pubDate>Tue, 14 Mar 2023 09:24:57 +0800</pubDate><guid>https://guyueshui.github.io/post/share-storage-with-family/</guid><description>&lt;p>一切都要从前几天给手机刷新 ROM，导致数据丢失说起。&lt;/p>
&lt;p>前些日子，我的 RedmiK40S MIUI13 突然给我自动更新至 MIUI14，这违背了我的意愿。但这还不至于让我动刷机的年头，毕竟年事已高，不再那么想折腾手机。可这次更新，不单单是 MIUI 版本的提升，更是 Android 12 到 13 的版本升级。这直接导致了我的钛备份闪退了，并且使用钛备份还原在 a12 上备份的应用，如果勾选还原应用数据，则必然导致对应应用闪退。应用备份出了问题我是无法接受的。于是，开始上 XDA 找 ROM，随便下了几个，准备动手。&lt;/p></description></item><item><title>Swap 扩容</title><link>https://guyueshui.github.io/post/extend-swap/</link><pubDate>Fri, 24 Feb 2023 21:07:16 +0800</pubDate><guid>https://guyueshui.github.io/post/extend-swap/</guid><description>&lt;!--
由于涉及到磁盘分区，一般来说 swap 分区在安装系统的时候就要确定。一般建议为总内存大小的一半。
可以通过如下步骤设置一个 swap 分区：
```bash
mkswap /dev/swap_partition
swapon /dev/swap_partition
```
-->
&lt;p>先前安装系统的时候，swap 分区给小了（机器内存的一半）。我的笔记本内存 8G，swap 给了 4G，当系统已用内存超过 4G，会导致无法&lt;a href="https://guyueshui.github.io/post/linux-hibernate#%E7%A1%AE%E4%BF%9Dswap%E5%88%86%E5%8C%BA%E8%B6%B3%E5%A4%9F%E5%A4%A7">休眠&lt;/a>。如果 swap 给的和本机内存一样大，那么就不会存在 swap 放不下当前工作镜像的问题。但重新分区追加 swap 显然不现实，所以只能让两块 swap 拼凑一下，达到总体有 8G 可用 swap 的效果。&lt;/p></description></item><item><title>喜女</title><link>https://guyueshui.github.io/post/birth-of-shang/</link><pubDate>Sun, 06 Nov 2022 19:00:00 +0800</pubDate><guid>https://guyueshui.github.io/post/birth-of-shang/</guid><description>壬寅年九月，喜得一女，因作此篇。 九月孕明珠， 玲珑宛天成。 愿织锦绣梦， 携手度余生。</description></item><item><title>C++ 中的默认参数简介</title><link>https://guyueshui.github.io/post/cpp-default-argument/</link><pubDate>Wed, 14 Sep 2022 13:23:39 +0800</pubDate><guid>https://guyueshui.github.io/post/cpp-default-argument/</guid><description>Minimal example 1 2 3 4 5 6 7 int foo(int x, int y=1) { return x + y; } int main() { cout &amp;lt;&amp;lt; foo(5); // call foo(5, 1) return 0; } 分离编译带来的隐患 如果函数声明和定义分离，此时就有一个 pitfall。由于</description></item><item><title>红米 K40S 初体验</title><link>https://guyueshui.github.io/post/fresh-experience-on-munch/</link><pubDate>Tue, 13 Sep 2022 21:42:54 +0800</pubDate><guid>https://guyueshui.github.io/post/fresh-experience-on-munch/</guid><description>&lt;p>8 月 8 日入手了一台红米 K40S（设备代号 munch）。蹲了很久了，终于等到 88 购物节一波降价，在某东 1999 拿下顶配版 K40S.&lt;/p></description></item><item><title>C++ 中的 static 关键字</title><link>https://guyueshui.github.io/post/static-in-cpp/</link><pubDate>Thu, 21 Apr 2022 23:52:04 +0800</pubDate><guid>https://guyueshui.github.io/post/static-in-cpp/</guid><description>&lt;h2 id="static-members">Static members&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// non-static member (i.e., `data` is not visible in `fun1`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">fun1&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fun2&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fun1&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// valid, equivalent to the following
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">fun1&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>静态成员不能访问非静态成员（因为静态成员独立与类的实例（即对象）而存在，为了在没有对象被创建的情况下，静态成员还是可以使用，所以不能访问非静态成员。）&lt;/li>
&lt;li>同理，类的任何对象不包含静态数据成员&lt;/li>
&lt;li>静态成员不与对象，不与&lt;code>this&lt;/code>指针发生交互，作为结果，静态成员函数不能声明为&lt;code>const&lt;/code>&lt;/li>
&lt;li>可以通过类的对象调用静态成员函数，但此调用跟对象的状态并无关系，也就是说换个对象来调用是等价的，都等价于使用类名加域作用符来调用&lt;/li>
&lt;li>静态成员一般定义在类的外部，因为每个对象都共享静态成员，避免多次定义&lt;/li>
&lt;li>View static member as a normal function that has nothing to do with the class, except you must use &lt;code>::&lt;/code> to access static members&lt;/li>
&lt;/ol></description></item><item><title>Linux 开机无声音</title><link>https://guyueshui.github.io/post/linux%E5%BC%80%E6%9C%BA%E6%97%A0%E5%A3%B0%E9%9F%B3/</link><pubDate>Sat, 26 Mar 2022 18:45:16 +0800</pubDate><guid>https://guyueshui.github.io/post/linux%E5%BC%80%E6%9C%BA%E6%97%A0%E5%A3%B0%E9%9F%B3/</guid><description>问题描述：个人笔记本电脑长久以来都有一个问题，开机之后扬声器没声音，从应用层看毫无问题，所有音乐视频照常播放，能调音量，就是没声音。必须插一</description></item><item><title>Linux 笔记本触摸板水平滚动问题</title><link>https://guyueshui.github.io/post/touchpad-horiz-scroll/</link><pubDate>Fri, 25 Mar 2022 23:03:59 +0800</pubDate><guid>https://guyueshui.github.io/post/touchpad-horiz-scroll/</guid><description>自打使用 linux 系统以来，触摸板这块的体验一只是个痛点：只支持基本的点击，双指垂直滚动。很久以来我就一直想要触摸板水平滚动的功能。今天终于实现了！</description></item><item><title>使用 Yield 实现 Python 协程</title><link>https://guyueshui.github.io/post/python-coroutine-with-yield/</link><pubDate>Sun, 20 Mar 2022 20:44:58 +0800</pubDate><guid>https://guyueshui.github.io/post/python-coroutine-with-yield/</guid><description>考虑如下代码： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def async_call(it, ret_list=None): try: value = ret_list[0] if ret_list and len(ret_list) == 1 else ret_list</description></item><item><title>A point of python metaclass</title><link>https://guyueshui.github.io/post/python-metaclass/</link><pubDate>Sun, 12 Dec 2021 12:55:45 +0800</pubDate><guid>https://guyueshui.github.io/post/python-metaclass/</guid><description>Create class dynamically Python doc says: By default, classes are constructed using type(). The class body is executed in a new namespace and the class name is bound locally to the result of type(name, bases, namespace). That&amp;rsquo;s means, a class statement is equivalent to the call of type method with three arguments: name: name of the class bases: tuple of the parent class (for inheritance, can be empty) attrs: dictionary</description></item><item><title>V3Ray 的配置笔记</title><link>https://guyueshui.github.io/post/build-your-ladder/</link><pubDate>Tue, 07 Dec 2021 22:05:42 +0800</pubDate><guid>https://guyueshui.github.io/post/build-your-ladder/</guid><description>学生时代曾为整个课题组的师生搭建过一个梯子，稳定运行两年多，最近突然爬不上去了。 寻思是哪里出了问题，经过一番定位，原来是之前的免费域名到期了</description></item><item><title>Python Iterables</title><link>https://guyueshui.github.io/post/python-iterables/</link><pubDate>Sun, 21 Feb 2021 22:26:30 +0800</pubDate><guid>https://guyueshui.github.io/post/python-iterables/</guid><description>Python 的迭代器（iterator）、生成器（generator）、可迭代对象（iterable），虽是老生常谈，但我毕竟要记录一下自己的见解，因</description></item><item><title>Linux 的休眠</title><link>https://guyueshui.github.io/post/linux-hibernate/</link><pubDate>Mon, 13 Jul 2020 22:44:33 +0800</pubDate><guid>https://guyueshui.github.io/post/linux-hibernate/</guid><description>&lt;p>先区分一下两个名词：睡眠（sleep）和休眠（hibernate）。&lt;/p>
&lt;ul>
&lt;li>睡眠：将工作镜像写入内存（RAM），以便快速恢复。内存读写很快，所以睡眠的特点就是“睡得快”和“醒得快”。对于笔记本来说，合上盖子就睡了，打开盖子你的工作区间即刻就能恢复，很是方便。但是睡眠有一个缺点，就是要给内存供电，一旦断电，你的镜像数据就会丢失，工作区间将不复存在。当然这来自于内存的固有特点，建议百度 RAM。&lt;/li>
&lt;li>休眠：将工作镜像写入硬盘（disk，ROM），这样你也可以恢复工作区间。只是睡下去和醒过来的时间比内存慢不少。但是，它有一个好处就是断电了也不会丢失数据。当你再次开机，系统就会从硬盘里面读取镜像，恢复你的工作区间。&lt;/li>
&lt;/ul></description></item><item><title>一个 really simple 的 LaTeX 宏包</title><link>https://guyueshui.github.io/post/tex-sty-basic/</link><pubDate>Sun, 26 Apr 2020 09:25:09 +0800</pubDate><guid>https://guyueshui.github.io/post/tex-sty-basic/</guid><description>众所周知，LaTeX 是一个高效易用的排版软件，基本上只要找到合适的模板，剩下的就只剩码字了。比起 MS Word，简直不知道高到哪里去。就拿最近写</description></item><item><title>Latexmk 基础用法</title><link>https://guyueshui.github.io/post/latexmk-basic/</link><pubDate>Mon, 13 Apr 2020 23:50:55 +0800</pubDate><guid>https://guyueshui.github.io/post/latexmk-basic/</guid><description>怎么想到用 latexmk 的呢？写论文呗！ 本来呢，我一直习惯于使用命令行手敲 1 pdflatex someting.tex 千万别小看这种重复劳动，它不仅帮你加深记忆，还有最完整的输出，让你一窥 Tex</description></item><item><title>Gnome 应用启动缓慢</title><link>https://guyueshui.github.io/post/gnome-app-slow-start/</link><pubDate>Wed, 01 Apr 2020 23:01:36 +0800</pubDate><guid>https://guyueshui.github.io/post/gnome-app-slow-start/</guid><description>先看环境： $ neofetch -` yychi@MiBook-Air .o+` ---------------- `ooo/ OS: Arch Linux x86_64 `+oooo: Host: TM1604 XMAKB3M0P0202 `+oooooo: Kernel: 5.5.13-arch2-1 -+oooooo+: Uptime: 5 mins `/:-:++oooo+: Packages: 1153 (pacman) `/++++/+++++++: Shell: zsh 5.8 `/++++++++++++++: Resolution: 1920x1080 `/+++ooooooooooooo/` WM: i3 ./ooosssso++osssssso+` Theme: Adwaita [GTK2] .oossssso-````/ossssss+` Icons: Adwaita [GTK2] -osssssso. :ssssssso. Terminal: urxvt :osssssss/ osssso+++. Terminal Font: DejaVu Sans Mono for Powerline /ossssssss/ +ssssooo/- CPU: Intel i5-7200U (4) @ 3.100GHz</description></item><item><title>Metapost 学习笔记</title><link>https://guyueshui.github.io/post/metapost/</link><pubDate>Tue, 31 Mar 2020 09:20:44 +0800</pubDate><guid>https://guyueshui.github.io/post/metapost/</guid><description>想必你也有过这样的疑问，中学数学书上的那些精美的作图是如何画出来的？一直以来，我都想学习一门绘图语言，只是久久未能行动 orz&amp;hellip; 闲话少叙，开始学习！</description></item><item><title>声音的消亡</title><link>https://guyueshui.github.io/post/%E5%A3%B0%E9%9F%B3%E7%9A%84%E6%B6%88%E4%BA%A1/</link><pubDate>Wed, 25 Mar 2020 14:07:52 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%A3%B0%E9%9F%B3%E7%9A%84%E6%B6%88%E4%BA%A1/</guid><description>近日整理以前的文章，发现一个事实：我越来越不会说话，越来越不会表达，越来越没有自己的思想。 以前的我每隔几天都会发表空间说说，即使大部分属于“</description></item><item><title>Bbb</title><link>https://guyueshui.github.io/slide/bbb/</link><pubDate>Mon, 23 Mar 2020 15:56:44 +0800</pubDate><guid>https://guyueshui.github.io/slide/bbb/</guid><description>The Title Sub Title
Yychi | SIST
Slide 2 here comes $e=mc^2$.
$$ \mathbb{T} \mapsto A $$</description></item><item><title>CCC</title><link>https://guyueshui.github.io/slide/ccc/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/slide/ccc/</guid><description>Hello world! This is my first slide.
Hello Mars! This is my second slide.
Vertical slide 1 This is verticle slide.
Vertical slide 2</description></item><item><title>Demo Slides</title><link>https://guyueshui.github.io/slide/aaa/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/slide/aaa/</guid><description>Hello world! This is my first slide.
$e=mc^2$
1 2 3 4 int main() { return 0; } 1 2 3 4 5 package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(&amp;#34;Hello world!&amp;#34;) } Hello Mars! This is my second slide.
Vertical slide 1 This is verticle slide.
Vertical slide 2</description></item><item><title>转义字符到底是什么</title><link>https://guyueshui.github.io/post/what-is-escape-character/</link><pubDate>Wed, 18 Mar 2020 22:41:06 +0800</pubDate><guid>https://guyueshui.github.io/post/what-is-escape-character/</guid><description>转义字符到底是啥？ 实不相瞒我就是因为不知道才写下这篇文章，不，准确的说是这篇笔记 orz，既然是笔记，无所谓抄不抄了。每次说到转义字符，多少有</description></item><item><title>小内存机器的自我救赎</title><link>https://guyueshui.github.io/post/nice-softwares/</link><pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/nice-softwares/</guid><description>在此记录一下我自己用过的非常棒的小软件。 下载 aria2c: 命令行下载工具，支持下载种子、磁力等。有 RPC 模式，配合 WebUI 使用更佳。参考简介。 多媒体 mpv: 命令行多媒体</description></item><item><title>Brief Introduction to Shell Script</title><link>https://guyueshui.github.io/post/shell-intro/</link><pubDate>Fri, 22 Nov 2019 16:59:46 +0800</pubDate><guid>https://guyueshui.github.io/post/shell-intro/</guid><description>This article is mainly refered to &amp;ldquo;The Linux Command Line&amp;rdquo;1. I just take some most important things out of the book.
Expansion Each time you type a command line and press the Enter key, bash performs several processes upon the text before it carries out your command. Just look an example:
1 2 [me@linuxbox ~]$ echo * Desktop Documents ls-output.txt Music Pictures Public Templates Videos Why not display an asterisk? That&amp;rsquo;s expansion!</description></item><item><title>Nueral Network Learning Notes</title><link>https://guyueshui.github.io/post/nn-notes/</link><pubDate>Tue, 29 Oct 2019 10:45:03 +0800</pubDate><guid>https://guyueshui.github.io/post/nn-notes/</guid><description>Hello here.
CNN Conv Layer Conv Layer is usually decreasing the input size, i.e., the output size may less or equal than input.
take a volume as input: height x weight x depth, e.g., 32x32x3. Typically think an image having three channels: R, G, B. a filter has the same depth as the input volume, e.g., 5x5x3 (since the filter always has a same depth as input vloume, the depth of the filter is sometimes omitted).</description></item><item><title>服务端开发预备知识</title><link>https://guyueshui.github.io/post/server-develop-preliminaries/</link><pubDate>Fri, 06 Sep 2019 19:37:55 +0800</pubDate><guid>https://guyueshui.github.io/post/server-develop-preliminaries/</guid><description>操作系统 摘自《程序员面试白皮书》 进程 vs.线程 进程（process）与线程（thread）最大的区别是进程拥有自己的地址空间，某进程内的线程</description></item><item><title>设计模式学习笔记</title><link>https://guyueshui.github.io/post/design-pattern-notes/</link><pubDate>Mon, 02 Sep 2019 11:05:10 +0800</pubDate><guid>https://guyueshui.github.io/post/design-pattern-notes/</guid><description>如无特殊声明：本文所有 UML 图均出自《图说设计模式》。在此特别鸣谢！ Singleton 单例模式解决了全局变量的问题，全局只能创建一个实例，保证任何请求该实例的调</description></item><item><title>多线程学习笔记</title><link>https://guyueshui.github.io/post/concurrent-programming/</link><pubDate>Thu, 29 Aug 2019 21:40:23 +0800</pubDate><guid>https://guyueshui.github.io/post/concurrent-programming/</guid><description>开一篇多线程学习笔记，记录下在实习过程中遇到的一些简单问题。 注意：这是一篇以学习笔记，难免有误，主要写给自己参考。请酌情判别，如有错误，也欢</description></item><item><title>C++ 学习笔记</title><link>https://guyueshui.github.io/post/cpp-learn/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/cpp-learn/</guid><description>&lt;p>诚如是，Life is too short to learn c++. 此篇记录一些我在学习 cpp 过程中遇到的一些知识点，仅作记录并梳理之效。里面可能会有大量参考其他网络博客，如有侵权，请联系我删除之。&lt;/p>
&lt;h2 id="reactor-vs-proactor">Reactor v.s. Proactor&lt;/h2>
&lt;ul>
&lt;li>epll/wait: reactor 模式，不停轮询，发现有事做，就做！&lt;/li>
&lt;li>asio: proactor 模式，先注册好事件，如果事情发生了，通过回调函数处理。&lt;/li>
&lt;/ul>
&lt;h2 id="几个常用的宏">几个常用的宏&lt;/h2>
&lt;ul>
&lt;li>&lt;code>__func__&lt;/code>: name of an function, exists in C99/C++11 (&lt;code>__FUNCTION__&lt;/code> is non standard)&lt;/li>
&lt;li>&lt;code>__LINE__&lt;/code>: line number of the code&lt;/li>
&lt;li>&lt;code>__FILE__&lt;/code>: filename of the file&lt;/li>
&lt;li>&lt;code>__DATE__&lt;/code> and &lt;code>__TIME__&lt;/code>: as you wish&lt;/li>
&lt;/ul>
&lt;h2 id="不要在-ctor-里调用虚函数">不要在 ctor 里调用虚函数&lt;/h2>
&lt;p>总结来说：基类部分在派生类部分之前被构造，当基类构造函数执行时派生类中的数据成员还没被初始化。如果基类构造函数中的虚函数调用被解析成调用派生类的虚函数，而派生类的虚函数中又访问到未初始化的派生类数据，将导致程序出现一些未定义行为和 bug。&lt;/p>
&lt;p>ctor 应该设计的尽量简单，确保对象可以被正确构造。在 ctor 中调用本类的非静态成员都是不安全的，因为他们还没被构造，而有些成员是依赖对象的，而此时对象还没有被成功构造。&lt;/p>
&lt;h2 id="ctor-不能是虚函数">ctor 不能是虚函数&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>从存储空间角度：虚函数对应一个 vtable（虚函数表），这大家都知道，可是这个 vtable 其实是存储在对象的内存空间的。问题出来了，如果构造函数是虚的，就需要通过 vtable 来调用，可是对象还没有实例化，也就是内存空间还没有，无法找到 vtable，所以构造函数不能是虚函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从使用角度：虚函数主要用于在信息不全的情况下，能使重载的函数得到对应的调用。构造函数本身就是要初始化实例，那使用虚函数也没有实际意义呀。所以构造函数没有必要是虚函数。
虚函数的作用在于通过父类的指针或者引用来调用它的时候能够变成调用子类的那个成员函数。而构造函数是在创建对象时自动调用的，不可能通过父类的指针或者引用去调用，因此也就规定构造函数不能是虚函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>构造函数不需要是虚函数，也不允许是虚函数，因为创建一个对象时我们总是要明确指定对象的类型，尽管我们可能通过实验室的基类的指针或引用去访问它。但析构却不一定，我们往往通过基类的指针来销毁对象。这时候如果析构函数不是虚函数，就不能正确识别对象类型从而不能正确调用析构函数。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>——————————————————
版权声明：本文为 CSDN 博主「cainiao000001」的原创文章，遵循 CC 4.0 by-sa 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/cainiao000001/article/details/81603782&lt;/p>
&lt;h2 id="虚函数的工作原理">虚函数的工作原理&lt;/h2>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/60543586">https://zhuanlan.zhihu.com/p/60543586&lt;/a>&lt;/p>
&lt;p>C++ 规定了虚函数的行为，但将实现方法留给了编译器的作者。不需要知道实现方法也可以很好的使用虚函数，但了解虚函数的工作原理有助于更好地理解概念。&lt;/p>
&lt;p>通常，编译器处理虚函数的方法是：给每个对象添加一个隐藏成员。隐藏成员中保存了一个指向函数地址数组的指针。&lt;/p>
&lt;p>这种数组称为虚函数表（Virtual Function Table, vtbl）。&lt;/p>
&lt;p>虚函数表是一个数组，数组的元素是指针，指针指的是虚函数的地址。&lt;/p>
&lt;p>具有虚函数的类的实例，都会在头部存一个指向虚函数表的指针。&lt;/p>
&lt;h2 id="常见类型所占空间大小">常见类型所占空间大小&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>TYPE&lt;/th>
&lt;th style="text-align:right">Bytes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>(unsigned) int&lt;/td>
&lt;td style="text-align:right">4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(unsigned) short&lt;/td>
&lt;td style="text-align:right">2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(unsigned) long&lt;/td>
&lt;td style="text-align:right">8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>float&lt;/td>
&lt;td style="text-align:right">4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>double&lt;/td>
&lt;td style="text-align:right">8&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>long double&lt;/td>
&lt;td style="text-align:right">16&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>(unsigned) char&lt;/td>
&lt;td style="text-align:right">1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bool&lt;/td>
&lt;td style="text-align:right">1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>指针占几个字节 指针即为地址，指针几个字节跟语言无关，而是跟系统的寻址能力有关，譬如以前是 16 为地址，指针即为 2 个字节，现在一般是 32 位系统，所以是 4 个字节，以后 64 位，则就为 8 个字节。&lt;/p>
&lt;blockquote>
&lt;p>NOTE: 类成员函数指针一般为普通指针的两倍大小。&lt;/p>
&lt;/blockquote>
&lt;p>literal &lt;code>5.0&lt;/code>类型为&lt;code>double&lt;/code>，&lt;code>5.0f&lt;/code>类型为&lt;code>float&lt;/code>。不加&lt;code>f&lt;/code>后缀默认&lt;code>double&lt;/code>.&lt;/p>
&lt;h2 id="静态成员的初始化">静态成员的初始化&lt;/h2>
&lt;p>当一个类包含静态成员时，最好的做法是在类中声明，在类外初始化。由于静态成员是所有对象共享的，如果在类内初始化，则每个对象构造时，都要执行一遍静态成员的初始化，这无疑是一种浪费。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">A&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">233&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">B&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">fun&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">str_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">done_&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">B&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">str_&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;hello, i am static&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="析构函数的调用时机">析构函数的调用时机&lt;/h2>
&lt;p>The destructor is called whenever an object&amp;rsquo;s lifetime ends, which includes&lt;/p>
&lt;ul>
&lt;li>program termination, for objects with static storage duration&lt;/li>
&lt;li>thread exit, for objects with thread-local storage duration&lt;/li>
&lt;li>end of scope, for objects with automatic storage duration and for temporaries whose life was extended by binding to reference&lt;/li>
&lt;li>delete-expressin, for objects with dynamic storage duration&lt;/li>
&lt;li>end of the full expression, for nameless temporaries&lt;/li>
&lt;li>stack unwinding (栈回溯), for objects with automatic storage duration when an exception escapes their block, uncaught.&lt;/li>
&lt;/ul>
&lt;p>cf. &lt;a href="https://en.cppreference.com/w/cpp/language/destructor">https://en.cppreference.com/w/cpp/language/destructor&lt;/a>&lt;/p>
&lt;h2 id="常量">常量&lt;/h2>
&lt;h3 id="literal-constants">Literal constants&lt;/h3>
&lt;p>字面值常量
Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/literals/">https://www.learncpp.com/cpp-tutorial/literals/&lt;/a>&lt;/p>
&lt;h3 id="symbolic-constants">Symbolic constants&lt;/h3>
&lt;p>符号常量
Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/const-constexpr-and-symbolic-constants/">https://www.learncpp.com/cpp-tutorial/const-constexpr-and-symbolic-constants/&lt;/a>&lt;/p>
&lt;ol>
&lt;li>Const variables must be initialized&lt;/li>
&lt;li>Function parameters for arguments passed by value should not be made const.&lt;/li>
&lt;li>Don’t use const with return by value.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Runtime vs compile-time constants&lt;/strong>&lt;/p>
&lt;p>Runtime constants are constants whose initialization values can only be resolved at runtime (when your program is running). The following are examples of runtime constants:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">printInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// x is a runtime constant because the value isn&amp;#39;t known until the program is run
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Enter your age: &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cin&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">usersAge&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">age&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// usersAge is a runtime constant because the value isn&amp;#39;t known until the program is run
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Your age is: &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printInt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">age&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Compile-time constants are constants whose initialization values can be determined at compile-time (when your program is compiling). The following are examples of compile-time constants:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">double&lt;/span> &lt;span class="n">gravity&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mf">9.8&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// the compiler knows at compile-time that gravity will have value 9.8
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">something&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// the compiler can resolve this at compiler time
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Compile-time constants enable the compiler to perform optimizations that aren’t available with runtime constants. For example, whenever gravity is used, the compiler can simply substitute the identifier gravity with the literal double 9.8.&lt;/p>
&lt;p>To help provide more specificity, C++11 introduced the keyword &lt;code>constexpr&lt;/code>, which ensures that a constant must be a compile-time constant.&lt;/p>
&lt;blockquote>
&lt;p>Any variable that should not be modifiable after initialization and whose initializer is known at compile-time should be declared as &lt;code>constexpr&lt;/code>.&lt;/p>
&lt;p>Any variable that should not be modifiable after initialization and whose initializer is not known at compile-time should be declared as &lt;code>const&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>Note that literals are also implicitly constexpr, as the value of a literal is known at compile-time.&lt;/p>
&lt;p>A &lt;strong>constant expression&lt;/strong> is an expression that can be evaluated at compile-time. For example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 3 + 4 evaluated at compile-time
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In the above program, because the literal values 3 and 4 are known at compile-time, the compiler can evaluate the expression 3 + 4 at compile-time and substitute in the resulting value 7. That makes the code faster because 3 + 4 no longer has to be calculated at runtime.&lt;/p>
&lt;p>Constexpr variables can also be used in constant expressions:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">4&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// x + y evaluated at compile-time
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In the above example, because x and y are constexpr, the expression x + y is a constant expression that can be evaluated at compile-time. Similar to the literal case, the compiler can substitute in the value 7.&lt;/p>
&lt;h3 id="object-like-preprocessor-macros-vs-symbolic-constants">Object-like preprocessor macros v.s. symbolic constants&lt;/h3>
&lt;p>Object-like macro has the form:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define identifier substitution_text
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Whenever the preprocessor encounters this directive, any further occurrence of &lt;em>identifier&lt;/em> is replaced by &lt;em>substitution_text&lt;/em>. The identifier is traditionally typed in all capital letters, using underscores to represent spaces.&lt;/p>
&lt;blockquote>
&lt;p>Avoid using #define to create symbolic constants macros. Use const or constexpr variables instead.&lt;/p>
&lt;/blockquote>
&lt;p>Macros can have naming conflicts with normal code. For example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;someheader.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">beta&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">5&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">beta&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>If someheader.h happened to #define a macro named beta, this simple program would break, as the preprocessor would replace the int variable beta’s name with whatever the macro’s value was. This is normally avoided by using all caps for macro names, but it can still happen.&lt;/p>
&lt;h3 id="using-symbolic-constants-throughout-a-multi-file-program">Using symbolic constants throughout a multi-file program&lt;/h3>
&lt;p>Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/sharing-global-constants-across-multiple-files-using-inline-variables/">https://www.learncpp.com/cpp-tutorial/sharing-global-constants-across-multiple-files-using-inline-variables/&lt;/a>&lt;/p>
&lt;h2 id="内存布局">内存布局&lt;/h2>
&lt;h3 id="结构体">结构体&lt;/h3>
&lt;p>C++ 规范在“结构”上使用了和 C 相同的，简单的内存布局原则：成员变量按其被声明的顺序排列，按具体实现所规定的对齐原则在内存地址上对齐。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">S&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// memory location #1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">b&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// memory location #2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nl">c&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// memory location #2 (continued)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nl">d&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// memory location #3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="nl">ee&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// memory location #4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// The object &amp;#39;obj&amp;#39; consists of 4 separate memory locations
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>类的静态成员不占用类的空间，静态成员在程序数据段中。&lt;/li>
&lt;/ul>
&lt;h3 id="对齐">对齐&lt;/h3>
&lt;p>Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/object-sizes-and-the-sizeof-operator/#comment-563585">https://www.learncpp.com/cpp-tutorial/object-sizes-and-the-sizeof-operator/#comment-563585&lt;/a>&lt;/p>
&lt;p>Cf. &lt;a href="http://www.catb.org/esr/structure-packing/">http://www.catb.org/esr/structure-packing/&lt;/a>&lt;/p>
&lt;h2 id="模板">模板&lt;/h2>
&lt;h3 id="重载与特化">重载与特化&lt;/h3>
&lt;p>从编译到函数模板的调用，编译器必须在非模板重载、模板重载和模板重载的特化间决定。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// #1：模板重载
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// #2：模板重载
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// #3：非模板重载
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// #4： #1 的特化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用 #1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 调用 #2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">1.0&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用 #3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 调用 #4
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>注意只有非模板和初等模板重载参与重载决议。特化不是重载，且不受考虑。只有在重载决议选择最佳匹配初等函数模板后，才检验其特化以查看何为最佳匹配。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// #1：所有类型的重载
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// #2：为指向 int 的指针特化 #1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">template&lt;/span>&lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">T&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// #3：所有指针类型的重载
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// 调用 #3，即使通过 #1 的特化会是完美匹配
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>即重载的优先级要高于特化。&lt;/p>
&lt;p>关于模板函数重载的更多内容，参考 &lt;a href="https://en.cppreference.com/w/cpp/language/function_template">function_template&lt;/a>。&lt;/p>
&lt;h2 id="预编译">预编译&lt;/h2>
&lt;p>Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/introduction-to-the-preprocessor/">https://www.learncpp.com/cpp-tutorial/introduction-to-the-preprocessor/&lt;/a>&lt;/p>
&lt;h3 id="include">&lt;code>#include&lt;/code>&lt;/h3>
&lt;p>When you #include a file, the preprocessor replaces the #include directive with the contents of the included file. The included contents are then preprocessed (along with the rest of the file), and then compiled.&lt;/p>
&lt;h3 id="macro-defines">Macro defines&lt;/h3>
&lt;p>The #define directive can be used to create a macro. In C++, a macro is a rule that defines how input text is converted into replacement output text.&lt;/p>
&lt;p>There are two basic types of macros: &lt;em>object-like macros&lt;/em>, and &lt;em>function-like macros&lt;/em>.
Object-like macros can be defined in one of two ways:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define identifier
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define identifier substitution_text
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="object-like-macros-dont-affect-other-preprocessor-directives">Object-like macros don’t affect other preprocessor directives&lt;/h3>
&lt;p>结论：宏展开在预编译指令 (Preprocessor directives) 无效。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define PRINT_JOE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef PRINT_JOE &lt;/span>&lt;span class="c1">// 此处会否将&amp;#39;PRINT_JOE&amp;#39;替换为空呢？
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Macros only cause text substitution for normal code. Other preprocessor commands are ignored. Consequently, the PRINT_JOE in #ifdef PRINT_JOE is left alone.&lt;/p>
&lt;p>For example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define FOO 9 &lt;/span>&lt;span class="c1">// Here&amp;#39;s a macro substitution
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef FOO &lt;/span>&lt;span class="c1">// This FOO does not get replaced because it’s part of another preprocessor directive
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">FOO&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// This FOO gets replaced with 9 because it&amp;#39;s part of the normal code
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>In actuality, the output of the preprocessor contains no directives at all &amp;ndash; they are all resolved/stripped out before compilation, because the compiler wouldn’t know what to do with them.&lt;/p>
&lt;h3 id="the-scope-of-defines">The scope of defines&lt;/h3>
&lt;p>Once the preprocessor has finished, all defined identifiers from that file are discarded. &lt;strong>This means that directives are only valid from the point of definition to the end of the file in which they are defined&lt;/strong>. Directives defined in one code file do not have impact on other code files in the same project.&lt;/p>
&lt;p>宏定义仅在本文件有效，一旦预编译阶段结束，所有宏都将失效。因为，预编译就是将所有的预编译指令都处理掉，该替换的替换（宏展开），该选择的选择，该丢弃的丢弃（条件编译），然后交给编译器去编译，谨记：编译器是读不懂预编译指令的！&lt;/p>
&lt;p>Consider the following example:&lt;/p>
&lt;p>function.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef PRINT
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Printing!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifndef PRINT
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Not printing!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>main.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// forward declaration for function doSomething()
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define PRINT
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">doSomething&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>The above program will print:&lt;/p>
&lt;pre tabindex="0">&lt;code>Not printing!
&lt;/code>&lt;/pre>&lt;p>Even though PRINT was defined in main.cpp, that doesn’t have any impact on any of the code in function.cpp (PRINT is only #defined from the point of definition to the end of main.cpp). This will be of consequence when we discuss header guards in a future lesson.&lt;/p>
&lt;h2 id="header-files">Header files&lt;/h2>
&lt;p>Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/header-files/">https://www.learncpp.com/cpp-tutorial/header-files/&lt;/a>&lt;/p>
&lt;p>对于多文件项目，文件是单独编译的。要想调用一个自定义函数，linker 必须能找到这个函数在哪里定义。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// forward declaration
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// add(3, 5);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>上述文件是可以编译通过的，因为没有发生对&lt;code>add&lt;/code>的调用，所以 linker 不会去找&lt;code>add&lt;/code>的定义（当然如果要找也找不到）。&lt;/p>
&lt;p>但是如果某处发起了对&lt;code>add&lt;/code>的调用（例如去掉注释），那么上述程序在 link 阶段会报错：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">yychi@~&amp;gt; clang test_linker.cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/ld: /tmp/test_linker-e1bb8b.o: in &lt;span class="k">function&lt;/span> &lt;span class="sb">`&lt;/span>main&lt;span class="s1">&amp;#39;:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">test_linker.cpp:(.text+0x1a): undefined reference to `add(int, int)&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clang-13: error: linker &lt;span class="nb">command&lt;/span> failed with &lt;span class="nb">exit&lt;/span> code &lt;span class="m">1&lt;/span> &lt;span class="o">(&lt;/span>use -v to see invocation&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在多文件编程时，往往需要 forawrd declaration，这些前置声明必须在其他某个地方被定义且只被定义一次。这样，linker 才能正确的完成链接。任何重复定义或未定义都会在 link 阶段报错。&lt;/p>
&lt;p>考虑如下例子：&lt;/p>
&lt;p>add.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>main.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;z=%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>在编译 main.cpp 的时候，因为有&lt;code>add&lt;/code>的前置声明，所以可以通过。但为了 link 的时候能够找到&lt;code>add&lt;/code>的定义，add.cpp 必须也被编译，所以正确的编译方式应该是：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ clang main.cpp add.cpp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="use-of-header-files">Use of header files&lt;/h3>
&lt;p>从上面的论述我们隐约可见，在多文件编程中，我们可能会大量的使用前置声明（forward declaration），一旦文件多起来，这将非常枯燥。所以头文件的出现就是为了解决这个问题：把所有的声明放在一起。&lt;/p>
&lt;p>Let’s write a header file to relieve us of this burden. Writing a header file is surprisingly easy, as header files only consist of two parts:&lt;/p>
&lt;ol>
&lt;li>A header guard.&lt;/li>
&lt;li>The actual content of the header file, which should be the forward declarations for all of the identifiers we want other files to be able to see.&lt;/li>
&lt;/ol>
&lt;p>add.h:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1) We really should have a header guard here, but will omit it for simplicity (we&amp;#39;ll cover header guards in the next lesson)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2) This is the content of the .h file, which is where the declarations go
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// function prototype for add.h -- don&amp;#39;t forget the semicolon!
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>main.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;add.h&amp;#34; // Insert contents of add.h at this point. Note use of double quotes here.&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;The sum of 3 and 4 is &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>add.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;add.h&amp;#34; // Insert contents of add.h at this point. Note use of double quotes here.&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When the preprocessor processes the &lt;code>#include &amp;quot;add.h&amp;quot;&lt;/code> line, it copies the contents of &lt;em>add.h&lt;/em> into the current file at that point. Because our &lt;em>add.h&lt;/em> contains a forward declaration for function &lt;em>add&lt;/em>, that forward declaration will be copied into &lt;em>main.cpp&lt;/em>. The end result is a program that is functionally the same as the one where we manually added the forward declaration at the top of &lt;em>main.cpp&lt;/em>.&lt;/p>
&lt;p>Consequently, our program will compile and link correctly.
&lt;img src="https://www.learncpp.com/images/CppTutorial/Section1/IncludeHeader.png?ezimgfmt=rs:647x377/rscb2/ng:webp/ngcb2" alt="">&lt;/p>
&lt;h3 id="two-wrong-cases">Two wrong cases&lt;/h3>
&lt;p>&lt;img src="wrong_header.png" alt="header has function definition">&lt;/p>
&lt;p>如上图所示，会产生一个重复定义的错误。由于 add.h 中包含了函数定义，而非前置声明。编译 main.cpp 的时候，add.h 中的代码插入到 main.cpp 中，产生一次&lt;code>add&lt;/code>函数的定义。同理，编译 add.cpp 的时候也定义了一次&lt;code>add&lt;/code>函数。link 阶段会发生歧义，以致报错。&lt;/p>
&lt;p>此时如果不编译 add.cpp 其实是可行的：
&lt;img src="header2.png" alt="compile main.cpp only">&lt;/p>
&lt;p>但谁又能保证只有一个文件&lt;code>#include &amp;quot;add.h&amp;quot;&lt;/code>呢？所以头文件中应该只包含声明，而不应该包含实现。&lt;/p>
&lt;blockquote>
&lt;p>The primary purpose of a header file is to propagate declarations to code files.&lt;/p>
&lt;/blockquote>
&lt;p>Key insight: Header files allow us to put declarations in one location and then import them wherever we need them. This can save a lot of typing in multi-file programs.&lt;/p>
&lt;p>Header files should generally not contain function and variable definitions, so as not to violate the one definition rule. An exception is made for symbolic constants (which we cover in lesson &lt;a href="https://www.learncpp.com/cpp-tutorial/const-constexpr-and-symbolic-constants/">4.15 &amp;ndash; Symbolic constants: const and constexpr variables&lt;/a>).&lt;/p>
&lt;p>&lt;strong>标准库自动链接&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>注意：clang 不会自动链接，需要手动链接
&lt;code>clang main.cpp -lstdc++&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>When it comes to functions and variables, it’s worth keeping in mind that header files typically only contain function and variable declarations, not function and variable definitions (otherwise a violation of the one definition rule could result). std::cout is forward declared in the iostream header, but defined as part of the C++ standard library, which is automatically linked into your program during the linker phase.&lt;/p>
&lt;p>&lt;img src="cout.png" alt="cout">&lt;/p>
&lt;p>&lt;strong>The #include order of header files&lt;/strong>&lt;/p>
&lt;p>Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/header-files/">https://www.learncpp.com/cpp-tutorial/header-files/&lt;/a> for &amp;ldquo;the #inclue order of header files&amp;rdquo;.&lt;/p>
&lt;h2 id="a-view-of-memory-and-fundamental-data-types-in-cpp">A view of memory and fundamental data types in cpp&lt;/h2>
&lt;p>Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/introduction-to-fundamental-data-types/">https://www.learncpp.com/cpp-tutorial/introduction-to-fundamental-data-types/&lt;/a>&lt;/p>
&lt;p>The smallest unit of memory is a binary digit (also called a bit), which can hold a value of 0 or 1. You can think of a bit as being like a traditional light switch &amp;ndash; either the light is off (0), or it is on (1). There is no in-between. If you were to look at a random segment of memory, all you would see is …011010100101010… or some combination thereof.&lt;/p>
&lt;p>Memory is organized into sequential units called memory addresses (or addresses for short). Similar to how a street address can be used to find a given house on a street, the memory address allows us to find and access the contents of memory at a particular location.&lt;/p>
&lt;p>Perhaps surprisingly, in modern computer architectures, each bit does not get its own unique memory address. This is because the number of memory addresses are limited, and the need to access data bit-by-bit is rare. Instead, each memory address holds 1 byte of data. A byte is a group of bits that are operated on as a unit. The modern standard is that a byte is comprised of 8 sequential bits.&lt;/p>
&lt;p>&lt;strong>Data types&lt;/strong>&lt;/p>
&lt;p>Because all data on a computer is just a sequence of bits, we use a data type (often called a “type” for short) to tell the compiler how to interpret the contents of memory in some meaningful way. You have already seen one example of a data type: the integer. When we declare a variable as an integer, we are telling the compiler “the piece of memory that this variable uses is going to be interpreted as an integer value”.&lt;/p>
&lt;p>When you give an object a value, the compiler and CPU take care of encoding your value into the appropriate sequence of bits for that data type, which are then stored in memory (&lt;strong>remember: memory can only store bits&lt;/strong>). For example, if you assign an integer object the value 65, that value is converted to the sequence of bits 0100 0001 and stored in the memory assigned to the object.&lt;/p>
&lt;p>Conversely, when the object is evaluated to produce a value, that sequence of bits is reconstituted back into the original value. Meaning that 0100 0001 is converted back into the value 65.&lt;/p>
&lt;p>Fortunately, the compiler and CPU do all the hard work here, so you generally don’t need to worry about how values get converted into bit sequences and back.&lt;/p>
&lt;p>All you need to do is pick a data type for your object that best matches your desired use.&lt;/p>
&lt;p>谨记：内存只能存 bit，只能寻址寻到 byte 这一层，如果数据按内存边界对齐，寻址会更快（一次读）。&lt;/p>
&lt;p>由于内存地址空间有限，且按 bit 寻址的场景很少，所以寻址单位一般是 byte。A byte is a group of bits that are operated on as a unit. The modern standard is that a byte is comprised of 8 sequential bits.&lt;/p>
&lt;h3 id="移位">移位&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstdint&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">n_shift&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;a=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;; b=&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;left shift &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n_shift&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; bit(s) of a is: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n_shift&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;left shift &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n_shift&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; bit(s) of b is: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n_shift&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;right shift &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n_shift&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; bit(s) of a is: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">n_shift&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;right shift &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">n_shift&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; bit(s) of b is: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">n_shift&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xffffffff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xffffffff&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;------------&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xbfffffff&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Output on my machine:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">a=-1; b=4294967295
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">left shift 1 bit(s) of a is: -2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">left shift 1 bit(s) of b is: 4294967294
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">right shift 1 bit(s) of a is: -1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">right shift 1 bit(s) of b is: 2147483647
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">a=-1073741825; b=4294967295
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">left shift 1 bit(s) of a is: 2147483646
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">left shift 1 bit(s) of b is: 4294967294
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">right shift 1 bit(s) of a is: -536870913
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">right shift 1 bit(s) of b is: 2147483647
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>从内存连续 bit 来看，a 和 b 都是存了 4 byte 的 1，区别仅仅是 data type 不一样，导致了截然不同的结果。&lt;/p>
&lt;p>&lt;strong>移位操作&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>右移
&lt;ol>
&lt;li>无符号右移，低位丢失高位补 0&lt;/li>
&lt;li>有符号右移，低位丢失，高位补符号位（正为 0，负为 1）&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>左移：高位丢失，低位补 0&lt;/li>
&lt;/ol>
&lt;p>a 和 b 左移一位都得到：&lt;/p>
&lt;pre tabindex="0">&lt;code>0xfffffffe: 如果是 int 解释为-2, unsigned int 解释为 4294967294=2^32 - 2
&lt;/code>&lt;/pre>&lt;p>a 右移一位得到&lt;/p>
&lt;pre tabindex="0">&lt;code>0xffffffff: 注意负数右移，高位补 1，int 解释为-1
&lt;/code>&lt;/pre>&lt;p>b 右移一位得到&lt;/p>
&lt;pre tabindex="0">&lt;code>0x7fffffff: 高位补 0, unsigned int 解释为 2147483647=2^31-1
&lt;/code>&lt;/pre>&lt;p>注意，负的可能左移成正的，因此，有符号的移位是不安全的。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">signed&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">u&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// -1 is implicitly converted to 4294967295, and 4294967295 &amp;lt; 1 is false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;-1 is less than 1&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;1 is less than -1&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// this statement executes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>NOTE:&lt;/p>
&lt;ol>
&lt;li>注意无符号数相减得负数会导致溢出&lt;/li>
&lt;li>usigned 和&lt;code>--&lt;/code>运算符，可能减至负数溢出&lt;/li>
&lt;li>除非确定变量值非负，否则尽量避免使用 unsigned&lt;/li>
&lt;li>切忌不要在数学计算中混用 unsigned 和 signed，此时 signed 会隐式转换为 unsigned&lt;/li>
&lt;li>unsigned numbers are preferred when dealing with bit manipulation&lt;/li>
&lt;li>&lt;code>std::int8_t&lt;/code>和&lt;code>std::uint8_t&lt;/code>可能知识&lt;code>char&lt;/code>和&lt;code>unsigned char&lt;/code>的别名，可能有坑（参考：https://www.learncpp.com/cpp-tutorial/introduction-to-type-conversion-and-static_cast/）&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Best practice&lt;/strong>&lt;/p>
&lt;p>Favor signed numbers over unsigned numbers for holding quantities (even quantities that should be non-negative) and mathematical operations. Avoid mixing signed and unsigned numbers.&lt;/p>
&lt;h3 id="字节序">字节序&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * This file test the endian of your machine:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * big-endian or little-endian, by visiting
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * the memory sequentially byte by byte of
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * a intendly constructed integer.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstdint&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// convert to char* so we can visit the memory byte by byte
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// print the value of each byte in ptr
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_ptr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0x01020304&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * if it prints 4321, indicates 低位在前，对应 little-endian
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * it it prints 1234, indicates 高位在前，对应 big-endian
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Output on my machine
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">4321
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>字节序就是计算机存储数据的时候将低位数据存在低位地址还是高位地址。举个例子，数值 0x2211 使用两个字节储存：高位字节是 0x22，低位字节是 0x11。&lt;/p>
&lt;ul>
&lt;li>大端字节序：高位字节在前，低位字节在后，这是人类读写数值的方法。&lt;/li>
&lt;li>小端字节序：低位字节在前，高位字节在后，即以 0x1122 形式储存。&lt;/li>
&lt;/ul>
&lt;p>如果太多记不住，至少要记住：&lt;/p>
&lt;ol>
&lt;li>字节序的概念：读一段内存从低位向高位读（从左往右），先读到高位字节还是低位字节&lt;/li>
&lt;li>符合人类读写数值的方法是大端序（big-endian）&lt;/li>
&lt;/ol>
&lt;p>既然如此，我们要判断一台机器是 big-endian 还是 little-endian，只需要构造一端内存，按字节从低位地址向高位地址访问，看看低位地址存的是高位字节，还是低位字节即可。&lt;/p>
&lt;p>且看上述代码，构造了一个整数 0x01020304，然后通过将首地址转成&lt;code>char*&lt;/code>的方式去按字节读取内存中的值（这样做的目的是，&lt;code>char*&lt;/code>可以逐字节的读取内存；而&lt;code>int*&lt;/code>一次指针移动会移动&lt;code>sizeof(int)&lt;/code>个字节）。读出来如果是符合书写习惯的 1234，则表明机器是 big-endian，反之 little-endian.&lt;/p>
&lt;p>这也是一段内存的两种不同的解释方式，recall that &lt;strong>Because all data on a computer is just a sequence of bits, we use a data type (often called a “type” for short) to tell the compiler how to interpret the contents of memory in some meaningful way&lt;/strong>.&lt;/p>
&lt;h2 id="链接linkage">链接（Linkage）&lt;/h2>
&lt;p>Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/internal-linkage/">https://www.learncpp.com/cpp-tutorial/internal-linkage/&lt;/a>&lt;/p>
&lt;p>Identifiers have another property named &lt;code>linkage&lt;/code>. An identifier’s &lt;strong>linkage&lt;/strong> determines whether other declarations of that name refer to the same object or not.&lt;/p>
&lt;p>Local variables have &lt;code>no linkage&lt;/code>, which means that each declaration refers to a unique object.&lt;/p>
&lt;p>Global variable and functions identifiers can have either &lt;code>internal linkage&lt;/code> or &lt;code>external linkage&lt;/code>.&lt;/p>
&lt;p>An identifier with &lt;strong>internal linkage&lt;/strong> can be seen and used within a single file, but it is not accessible from other files (that is, it is not exposed to the linker). This means that if two files have identically named identifiers with internal linkage, those identifiers will be treated as independent.&lt;/p>
&lt;p>To make a non-constant global variable internal, we use the static keyword.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// non-constant globals have external linkage by default, but can be given internal linkage via the static keyword
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// const globals have internal linkage by default
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_z&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// constexpr globals have internal linkage by default
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>To see it, we take&lt;/p>
&lt;p>a.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">g_x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">22&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">33&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">44&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>main.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">g_x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">222&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">333&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">444&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;glabal variable (g_x, g_y, g_z) is (%d, %d, %d)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_z&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>if we compile only main.cpp, it works fine and outputs:&lt;/p>
&lt;pre tabindex="0">&lt;code>glabal variable (g_x, g_y, g_z) is (222, 333, 444)
&lt;/code>&lt;/pre>&lt;p>But if we compile both, it gets&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ clang main.cpp a.cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/usr/bin/ld: /tmp/a-ea4f54.o:&lt;span class="o">(&lt;/span>.data+0x0&lt;span class="o">)&lt;/span>: multiple definition of &lt;span class="sb">`&lt;/span>g_x&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span> /tmp/main-c44eb4.o:&lt;span class="o">(&lt;/span>.data+0x0&lt;span class="o">)&lt;/span>: first defined here
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">clang-13: error: linker &lt;span class="nb">command&lt;/span> failed with &lt;span class="nb">exit&lt;/span> code &lt;span class="m">1&lt;/span> &lt;span class="o">(&lt;/span>use -v to see invocation&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>As we sligtly modify main.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_x&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">333&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">444&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;glabal variable (g_x, g_y, g_z) is (%d, %d, %d)&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">g_z&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>it&amp;rsquo;s compiled and linked properly with the output:&lt;/p>
&lt;pre tabindex="0">&lt;code>glabal variable (g_x, g_y, g_z) is (22, 333, 444)
&lt;/code>&lt;/pre>&lt;p>noting that the &lt;code>g_x&lt;/code> has the value 22 which is defined in a.cpp, we find out the global non-const variable has external linkage. And the properly compilation and linking show that global const has internal linkage.&lt;/p>
&lt;h3 id="external-linkage">External linkage&lt;/h3>
&lt;p>Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/external-linkage/">https://www.learncpp.com/cpp-tutorial/external-linkage/&lt;/a>&lt;/p>
&lt;p>An identifier with &lt;strong>external linkage&lt;/strong> can be seen and used both from the file in which it is defined, and from other code files (via a forward declaration). In this sense, identifiers with external linkage are truly “global” in that they can be used anywhere in your program!&lt;/p>
&lt;p>&lt;strong>Functions have external linkage by default&lt;/strong>&lt;/p>
&lt;p>In order to call a function defined in another file, you must place a &lt;code>forward declaration&lt;/code> for the function in any other files wishing to use the function. &lt;u>The forward declaration tells the compiler about the existence of the function, and the linker connects the function calls to the actual function definition.&lt;/u>&lt;/p>
&lt;p>&lt;strong>Global variables with external linkage&lt;/strong>&lt;/p>
&lt;p>Global variables with external linkage are sometimes called &lt;strong>external variables&lt;/strong>. To make a global variable external (and thus accessible by other files), we can use the &lt;code>extern&lt;/code> keyword to do so:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">g_x&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// non-constant globals are external by default
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// const globals can be defined as extern, making them external
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="k">constexpr&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_z&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// constexpr globals can be defined as extern, making them external (but this is useless, see the note in the next section)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Non-const global variables are external by default (if used, the &lt;code>extern&lt;/code> keyword will be ignored).&lt;/p>
&lt;p>To actually use an external global variable that has been defined in another file, you also must place a &lt;code>forward declaration&lt;/code> for the global variable in any other files wishing to use the variable. For variables, creating a forward declaration is also done via the &lt;code>extern&lt;/code> keyword (with no initialization value).&lt;/p>
&lt;p>Here is an example of using a variable forward declaration:&lt;/p>
&lt;p>a.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// global variable definitions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">g_x&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// non-constant globals have external linkage by default
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_y&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// this extern gives g_y external linkage
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>main.cpp:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// this extern is a forward declaration of a variable named g_x that is defined somewhere else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">g_y&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// this extern is a forward declaration of a const variable named g_y that is defined somewhere else
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">g_x&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// prints 2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Note that the &lt;code>extern&lt;/code> keyword has different meanings in different contexts. In some contexts, &lt;code>extern&lt;/code> means “give this variable external linkage”. In other contexts, &lt;code>extern&lt;/code> means “this is a forward declaration for an external variable that is defined somewhere else”.&lt;/p>
&lt;p>&lt;strong>Summary&lt;/strong>&lt;/p>
&lt;p>&lt;em>Scope&lt;/em> determines where a variable is accessible. &lt;em>Duration&lt;/em> determines where a variable is created and destroyed. &lt;em>Linkage&lt;/em> determines whether the variable can be exported to another file or not.&lt;/p>
&lt;h2 id="inline-function">Inline function&lt;/h2>
&lt;p>考虑如下场景，有一段代码很独立，适合抽成一个函数，但你又担心函数调用开销，此时 inline function 就是你的最佳选择。关于合适使用 inline function，下面这段话给了一定的意见：&lt;/p>
&lt;blockquote>
&lt;p>For functions that are large and/or perform complex tasks, the overhead of the function call is typically insignificant compared to the amount of time the function takes to run. However, for small functions, the overhead costs can be larger than the time needed to actually execute the function’s code! In cases where a small function is called often, using a function can result in a significant performance penalty over writing the same code in-place.&lt;/p>
&lt;/blockquote>
&lt;p>Inline function 的好处包括：&lt;/p>
&lt;ol>
&lt;li>没有函数调用的开销&lt;/li>
&lt;li>编译器对展开后的代码有更大的优化空间（如常量替换）&lt;/li>
&lt;/ol>
&lt;p>However, inline expansion has its own potential cost: if the body of the function being expanded takes more instructions than the function call being replaced, then each inline expansion will cause the executable to grow larger. Larger executables tend to be slower (due to not fitting as well in caches).&lt;/p>
&lt;blockquote>
&lt;p>注意：inline 只是对编译器的一个建议，是否会真的展开取决于编译器的优化策略。&lt;/p>
&lt;/blockquote>
&lt;p>However, in modern C++, the &lt;code>inline&lt;/code> keyword is no longer used to request that a function be expanded inline. There are quite a few reasons for this:&lt;/p>
&lt;ul>
&lt;li>Using &lt;code>inline&lt;/code> to request inline expansion is a form of premature optimization, and misuse could actually harm performance.&lt;/li>
&lt;li>The &lt;code>inline&lt;/code> keyword is just a hint &amp;ndash; the compiler is completely free to ignore a request to inline a function. This is likely to be the result if you try to inline a lengthy function! &lt;strong>The compiler is also free to perform inline expansion of functions that do not use the &lt;code>inline&lt;/code> keyword&lt;/strong> as part of its normal set of optimizations.&lt;/li>
&lt;li>The &lt;code>inline&lt;/code> keyword is defined at the wrong level of granularity. We use the &lt;code>inline&lt;/code> keyword on a function declaration, but inline expansion is actually determined per function call. It may be beneficial to expand some function calls and detrimental to expand others, and there is no syntax to affect this.&lt;/li>
&lt;/ul>
&lt;p>注意：在 modern cpp 中，用 inline 修饰的不违反 ODR（one definition rule），因此可用于&lt;/p>
&lt;ul>
&lt;li>头文件中修饰常量作为 global const 的最佳方案 &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;li>头文件中修饰 constexpr 函数 &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> 使所有 include 该文件的源文件都能使用该函数，注意 constexpr 函数是默认 inline 的&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>Allowing functions with a constexpr return type to be evaluated at either compile-time or runtime was allowed so that a single function can serve both cases. Otherwise, you’d need to have separate functions (a constexpr version and a non-constexpr version) &amp;ndash; and since return type isn’t considered in function overload resolution, you’d have to name the functions different things!&lt;/p>
&lt;p>A constexpr function that is eligible to be evaluated at compile-time will only be evaluated at compile-time if the return value is used where a constant expression is required. Otherwise, compile-time evaluation is not guaranteed.&lt;/p>
&lt;p>Thus, a constexpr function is better thought of as “can be used in a constant expression”, not “will be evaluated at compile-time”.&lt;/p>
&lt;/blockquote>
&lt;h2 id="unnamed-namespace">Unnamed namespace&lt;/h2>
&lt;p>An &lt;strong>unnamed namespace&lt;/strong> (also called an &lt;strong>anonymous namespace&lt;/strong>) is a namespace that is defined without a name, like so:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="c1">// unnamed namespace
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doSomething&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// can only be accessed in this file
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;v1&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">doSomething&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// we can call doSomething() without a namespace prefix
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>特点：&lt;/p>
&lt;ol>
&lt;li>All content declared in an unnamed namespace is treated as if it is part of the parent namespace.&lt;/li>
&lt;li>All identifiers inside an unnamed namespace are treated as if they had &lt;strong>internal linkage&lt;/strong>.&lt;/li>
&lt;/ol>
&lt;p>解决的问题：Unnamed namespaces will also keep user-defined types (something we’ll discuss in a later lesson) local to the file, something for which there is no alternative equivalent mechanism to do.&lt;/p>
&lt;p>&lt;strong>About &lt;code>switch&lt;/code> clause&lt;/strong>&lt;/p>
&lt;p>&lt;em>Put another way, defining a variable without an initializer is just telling the compiler that the variable is now in scope from that point on. This happens at compile time, and doesn’t require the definition to actually be executed at runtime.&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">calculate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">op&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">op&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;+&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;-&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;*&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;/&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;%&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">invalid_arguments&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;invalid operator&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="pointer-to-functions">Pointer to functions&lt;/h2>
&lt;p>The syntax for creating a non-const function pointer is one of the ugliest things you will ever see in C++:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// fcnPtr is a pointer to a function that takes no arguments and returns an integer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">fcnPtr&lt;/span>&lt;span class="p">)();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above snippet, fcnPtr is a pointer to a function that has no parameters and returns an integer. fcnPtr can point to any function that matches this type.&lt;/p>
&lt;p>To make a const function pointer, the const goes after the asterisk:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">fcnPtr&lt;/span>&lt;span class="p">)();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you put the const before the int, then that would indicate the function being pointed to would return a const int.&lt;/p></description></item><item><title>博客迁移记录</title><link>https://guyueshui.github.io/post/blog-trans/</link><pubDate>Sun, 25 Aug 2019 16:00:50 +0800</pubDate><guid>https://guyueshui.github.io/post/blog-trans/</guid><description>终于还是干了！很早以前就有了这个想法，起初使用 Hexo 搭的博客，折腾了一段时间，选了一个不错的主题 Melody。一切都进行的很好，直到有一天又发现</description></item><item><title>GDB 基本用法</title><link>https://guyueshui.github.io/post/basic-gdb-usages/</link><pubDate>Sun, 18 Aug 2019 16:14:24 +0000</pubDate><guid>https://guyueshui.github.io/post/basic-gdb-usages/</guid><description>&lt;p>废话以后有时间再加。&lt;/p>
&lt;p>首先编译时开启调试选项：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">g++ main.cpp -g -O0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;code>-O0&lt;/code>指定编译器的优化级别为 0，即不优化。&lt;/p></description></item><item><title>位域结构体简介</title><link>https://guyueshui.github.io/post/bit-field-struct/</link><pubDate>Tue, 06 Aug 2019 20:43:02 +0000</pubDate><guid>https://guyueshui.github.io/post/bit-field-struct/</guid><description>最近实习接触到一个新的知识点，C/C++ 的位域结构体。 以下开始摘抄自：here 位段 (bit-field) 是以位为单位来定义结构体 (或联合体) 中的成员变量所占的空</description></item><item><title>面试经历及笔记</title><link>https://guyueshui.github.io/post/interview-notes/</link><pubDate>Mon, 08 Jul 2019 20:14:17 +0000</pubDate><guid>https://guyueshui.github.io/post/interview-notes/</guid><description>总结一下这几个月的面试经历中被问到的问题，虽说问得都很浅，但是，问深了我也不会呀！ C++ 相关 Q: std::vector push_back 的复杂度是多少？ A: O(1), amortized constant. Q: vector 从 1 到 n push n 个元素</description></item><item><title>Tf Quick Start</title><link>https://guyueshui.github.io/slide/tf-quick-start/</link><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/slide/tf-quick-start/</guid><description>Introduction to TensorFlow A Quick Start
Yychi Fyu @SIST, ShanghaiTech
Outline TF Primitives tensor graphs session variable placeholder An Example High-level overview Computation Graph: The structure of TF.
operators as nodes tensors as links 1 2 3 4 5 6 7 import tensorflow as tf W = tf.constant([[1, 2]]) x = tf.constant([[3], [4]]) b = tf.constant(5) y = tf.matmul(W, x) + b print(y) Tensor(&amp;#34;add_5:0&amp;#34;, shape=(1, 1), dtype=int32) The above codes &amp;ldquo;describe&amp;rdquo; a computation graph: How can we actually see a tensor?</description></item><item><title>The Beauty of Recursion</title><link>https://guyueshui.github.io/post/the-beauty-of-recursion/</link><pubDate>Tue, 23 Apr 2019 09:08:28 +0000</pubDate><guid>https://guyueshui.github.io/post/the-beauty-of-recursion/</guid><description>Declaration: this article is in long time editing&amp;hellip;
Here comes some beautiful recursive solutions to some problems.
Examples Some of the problems have a very nice recursive structure, we can deal with them just using one step recursion.
Fibonacci Numbers The first comes very famous Fibonacci Numbers, which is a sequence of 0, 1, 1, 2, 3, 5, 8, 13 &amp;hellip; The structure is easily captured, if we use $\text{fib}(n)$ to denote the $n^{\text{th}}$ Fibonacci Number (n is assumed to start from 0).</description></item><item><title>神奇的位运算</title><link>https://guyueshui.github.io/post/%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</link><pubDate>Mon, 08 Apr 2019 10:35:16 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</guid><description>In editing&amp;hellip; 必备知识 首先要对原码、反码、补码有一定理解，推荐阅读此文：https://www.cnblogs.com/zhangziqiu/arch</description></item><item><title>A collection of some coding problems</title><link>https://guyueshui.github.io/post/coding-problems/</link><pubDate>Sun, 07 Apr 2019 19:31:59 +0000</pubDate><guid>https://guyueshui.github.io/post/coding-problems/</guid><description>场景题 题一：最高得分 一个长度为$N$的序列，玩家每次只能从头部或尾部拿数字，不能从中间拿。拿走的数字依次从左到右排列在自己面前。拿完$N$个</description></item><item><title>瞎说 KMP 算法</title><link>https://guyueshui.github.io/post/%E7%9E%8E%E8%AF%B4kmp%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 04 Apr 2019 00:05:41 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%9E%8E%E8%AF%B4kmp%E7%AE%97%E6%B3%95/</guid><description>前天做百度笔试，没想到居然出往年的题！哼！更惨的是出了我也不会！我以为只是一个简简单单的字符串匹配，没想到要动用这么难懂的算法。说起来算法导</description></item><item><title>初尝 C++ 类设计</title><link>https://guyueshui.github.io/post/%E5%88%9D%E5%B0%9D-c-%E7%B1%BB%E8%AE%BE%E8%AE%A1/</link><pubDate>Tue, 02 Apr 2019 21:31:40 +0000</pubDate><guid>https://guyueshui.github.io/post/%E5%88%9D%E5%B0%9D-c-%E7%B1%BB%E8%AE%BE%E8%AE%A1/</guid><description>最近在准备笔试，于是在各种网站上刷题嘛。期间做了百度某年的一道 编程题。 小 B 最近对电子表格产生了浓厚的兴趣，她觉得电子表格很神奇，功能远比她想</description></item><item><title>LeetCode: Sum of Two Integers</title><link>https://guyueshui.github.io/post/leetcode-sum-of-two-integers/</link><pubDate>Tue, 26 Mar 2019 14:53:51 +0000</pubDate><guid>https://guyueshui.github.io/post/leetcode-sum-of-two-integers/</guid><description>记录一下 LeetCode 做的一道题。要求实现两个整数的加法，但不能使用内置的+或-. 原题地址：https://leetcode.com/problems/</description></item><item><title>浅谈 Logistic 回归</title><link>https://guyueshui.github.io/post/%E6%B5%85%E8%B0%88-logistic-%E5%9B%9E%E5%BD%92/</link><pubDate>Fri, 15 Mar 2019 22:59:39 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%B5%85%E8%B0%88-logistic-%E5%9B%9E%E5%BD%92/</guid><description>In editing&amp;hellip; Logistic 回归属于分类模型！！！ 从最小二乘说起 线性回归 概率解释 Sigmoid 函数的引入 如果把我比作一张白纸，在我的知识储备中，现在只有线性回归。但是要处理分</description></item><item><title>快速自定义 LaTeX 排版字体</title><link>https://guyueshui.github.io/post/%E8%B0%88%E8%B0%88-latex-%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</link><pubDate>Fri, 08 Mar 2019 15:41:10 +0000</pubDate><guid>https://guyueshui.github.io/post/%E8%B0%88%E8%B0%88-latex-%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</guid><description>字体设置 在导言区引入fontspec包：\usepackage{fontspec} 使用如下命令自定义字体： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17</description></item><item><title>Linux 使用指北</title><link>https://guyueshui.github.io/post/linux-%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E9%80%9F%E6%9F%A5/</link><pubDate>Thu, 07 Mar 2019 19:22:02 +0000</pubDate><guid>https://guyueshui.github.io/post/linux-%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E9%80%9F%E6%9F%A5/</guid><description>&lt;p>本文主要引用 &lt;a href="https://liam.page/2016/11/06/Linux-Info-Cheatsheet/">Liam Huang&lt;/a> 的博客。&lt;/p>
&lt;h2 id="系统相关">系统相关&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">lsb_release -a &lt;span class="c1"># 查看操作系统版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">head -n &lt;span class="m">1&lt;/span> /etc/issue &lt;span class="c1"># 查看操作系统版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat /proc/version &lt;span class="c1"># 查看操作系统内核信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uname -a &lt;span class="c1"># 查看操作系统内核信息、CPU 信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat /proc/cpuinfo &lt;span class="c1"># 查看 CPU 信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hostname &lt;span class="c1"># 查看计算机名字&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">env &lt;span class="c1"># 列出环境变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">lsmod &lt;span class="c1"># 列出加载的内核模块&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">uptime &lt;span class="c1"># 查看系统运行时间、负载、用户数量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat /proc/loadavg &lt;span class="c1"># 查看系统负载&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>《报任安书》</title><link>https://guyueshui.github.io/post/%E8%B0%88%E8%B0%88%E6%8A%A5%E4%BB%BB%E5%AE%89%E4%B9%A6/</link><pubDate>Thu, 07 Mar 2019 18:27:18 +0000</pubDate><guid>https://guyueshui.github.io/post/%E8%B0%88%E8%B0%88%E6%8A%A5%E4%BB%BB%E5%AE%89%E4%B9%A6/</guid><description>太史公牛马走司马迁，再拜言。 少卿足下：曩者辱赐书，教以慎于接物，推贤进士为务，意气勤勤恳恳。若望仆不相师，而用流俗人之言，仆非敢如此也。仆虽</description></item><item><title>SICP Learning Notes</title><link>https://guyueshui.github.io/post/sicp-learning-notes/</link><pubDate>Thu, 21 Feb 2019 14:50:23 +0000</pubDate><guid>https://guyueshui.github.io/post/sicp-learning-notes/</guid><description>当我们考察一门语言时，主要看三点 primitives：元操作是什么 means of combinations：如何组合 means of abstraction：如何抽象</description></item><item><title>Useful Tricks</title><link>https://guyueshui.github.io/tricks/</link><pubDate>Thu, 17 Jan 2019 22:19:05 +0000</pubDate><guid>https://guyueshui.github.io/tricks/</guid><description>__ __ __ __ ____ ___ /\ \ /\ \ /\ \ __ /\ \ /\ _`\ /\_ \ \ `\`\\/&amp;#39;/__ __ ___\ \ \___ /\_\\ \/ ____ \ \ \L\ \//\ \ ___ __ `\ `\ /&amp;#39;/\ \/\ \ /&amp;#39;___\ \ _ `\/\ \\/ /&amp;#39;,__\ \ \ _ &amp;lt;&amp;#39;\ \ \ / __`\ /&amp;#39;_ `\ `\ \ \\ \ \_\ \/\ \__/\ \ \ \ \ \ \ /\__,</description></item><item><title>Polybar 的配置笔记</title><link>https://guyueshui.github.io/post/polybar-%E7%9A%84%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 16 Jan 2019 21:33:17 +0000</pubDate><guid>https://guyueshui.github.io/post/polybar-%E7%9A%84%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</guid><description>前略。 今年早些时候，从 Gnome 换到 i3，原因是因为原来的 gnome 被我弄崩溃了。一时难以解决，又想到之前好几次隐约感觉到 gnome 的不稳定，一气之下决定换一个轻量</description></item><item><title>Matrix Factorization</title><link>https://guyueshui.github.io/post/matrix-factorization/</link><pubDate>Thu, 03 Jan 2019 21:07:38 +0000</pubDate><guid>https://guyueshui.github.io/post/matrix-factorization/</guid><description>Preliminaries Def: A matrix $A \in M_n$ is normal if $AA^∗ = A^∗A$, that is, if $A$ commutes with its conjugate transpose.
Def: A complex matrix $A$ is unitary if $AA^∗ = I$ or $A^∗A = I$, and a real matrix $B$ is orthogonal if $BB^T = I$ or $B^TB = I$.
There is no so-called &amp;ldquo;orthonormal&amp;rdquo; matrix. There is just an orthogonal matrix whose rows or columns are orthonormal vectors.</description></item><item><title>在 Beamer 中使用参考文献</title><link>https://guyueshui.github.io/post/use-reference-in-beamer/</link><pubDate>Thu, 03 Jan 2019 16:05:47 +0000</pubDate><guid>https://guyueshui.github.io/post/use-reference-in-beamer/</guid><description>&lt;p>&lt;font color="red">Needs polish!&lt;/font>&lt;/p>
&lt;p>前略。&lt;/p>
&lt;p>Beamer 引用参考文献与文章类似，只是一开始听说 beamer 不支持 &lt;code>\cite&lt;/code>，搞得我走了不少弯路（其实是可以的）。&lt;/p></description></item><item><title>Exponential Distribution</title><link>https://guyueshui.github.io/post/exponetial-distribution/</link><pubDate>Tue, 25 Dec 2018 22:21:49 +0000</pubDate><guid>https://guyueshui.github.io/post/exponetial-distribution/</guid><description>Story The Exponential distribution is the continuous counterpart to the Geometric distribution. The story of the Exponential distribution is analogous, but we are now waiting for a success in continuous time, where successes arrive at a rate of $\lambda$ successes per unit of time. The average number of successes in a time interval of length $t$ is $\lambda t$, though the actual number of successes varies randomly. An Exponential random variable represents the waiting time until the first arrival of a success.</description></item><item><title>常用结论的证明记录</title><link>https://guyueshui.github.io/post/%E4%B8%80%E4%BA%9B%E6%8E%A8%E5%AF%BC/</link><pubDate>Thu, 20 Dec 2018 19:18:29 +0000</pubDate><guid>https://guyueshui.github.io/post/%E4%B8%80%E4%BA%9B%E6%8E%A8%E5%AF%BC/</guid><description>高斯分布的微分熵 $X \sim \mathcal{N}(\mu, \sigma^2)~$，$\displaystyle f(x)=\frac{1}{\sqrt{2\pi\sigma^2}</description></item><item><title>Vim Quick Reference</title><link>https://guyueshui.github.io/post/vim%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</link><pubDate>Thu, 20 Dec 2018 19:17:54 +0000</pubDate><guid>https://guyueshui.github.io/post/vim%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</guid><description>This article needs polish, do not truely trust it! Vim is so-called the god of editors, but not so friendly to new users. Today we will cover some techniques and trick of vim, for further reference. General Pattern A vim operation consists of three parts, namely [OPERATOR][NUMBER][MOTION] where OPERATOR - what you want to do? This mainly covers copy, cut, paste, etc. NUMBER - how many times do you want?</description></item><item><title>Melody 主题的一些个人更改</title><link>https://guyueshui.github.io/post/melody-theme-customization/</link><pubDate>Wed, 19 Dec 2018 14:31:24 +0000</pubDate><guid>https://guyueshui.github.io/post/melody-theme-customization/</guid><description>更改字体 Melody 主题字体配置文件在 $BLOG/themes/melody/source/css/var.styl，其中 $BLOG 为 Hexo 博客根目录。截取一段如</description></item><item><title>Links</title><link>https://guyueshui.github.io/links/</link><pubDate>Tue, 18 Dec 2018 10:25:24 +0000</pubDate><guid>https://guyueshui.github.io/links/</guid><description>Site Extra Categories Tags Personal Manual My Advisor Youlong Wu：研究生阶段的导师，像学长一样亲切，在生活和学习上给了我很多的帮助。 Meaningful Blogs Yihui Xie：有个性，有思想的博客（单方面友链）。</description></item><item><title>HTML 美化 Markdown 排版</title><link>https://guyueshui.github.io/post/html-%E7%BE%8E%E5%8C%96-markdown-%E6%8E%92%E7%89%88/</link><pubDate>Sun, 16 Dec 2018 00:04:38 +0000</pubDate><guid>https://guyueshui.github.io/post/html-%E7%BE%8E%E5%8C%96-markdown-%E6%8E%92%E7%89%88/</guid><description>&lt;p>&lt;a href="https://daringfireball.net/projects/markdown/syntax">Markdown&lt;/a> 是一门轻量标记型语言，因其简单易用而受众甚广。但是正因其简单，故而也有一部分局限性（虽然说它保留的即是最常用、最基本的排版功能）。本文就来说说在使用 Markdown 排版的时候，如何引入一点 HTML 的技巧来帮助我们排版的更加好看。&lt;/p></description></item><item><title>札记</title><link>https://guyueshui.github.io/sketch/</link><pubDate>Fri, 14 Dec 2018 13:59:49 +0000</pubDate><guid>https://guyueshui.github.io/sketch/</guid><description>2022 年 10 月 大喜：喜得一女。 2022 年 9 月 愈发觉得个人博客，还是要多些原创内容。抄的学习笔记，发布出来自己都不会看的。只有自己动手写的，费心整理的，日</description></item><item><title>About</title><link>https://guyueshui.github.io/about/</link><pubDate>Wed, 12 Dec 2018 22:06:18 +0000</pubDate><guid>https://guyueshui.github.io/about/</guid><description>Site Welcome! This blog is mainly written for self-reference, which covers math, tech, and maybe some other notes (learning or working). Nevertheless, it&amp;rsquo;s really my pleasure if some of my articles is useful for you. :) Timeline of this site Time Event 2018-12-24 First published by Hexo, theme Melody 2019-08-25 Move to Hugo, theme Even 2019-08-25 Add comment system powered by gitment 2020-03-25 Add many old articles 2020-11-14 Auto deploy</description></item><item><title>使用 Git 管理配置文件</title><link>https://guyueshui.github.io/post/manage-dotfiles-by-git/</link><pubDate>Fri, 16 Nov 2018 10:32:19 +0000</pubDate><guid>https://guyueshui.github.io/post/manage-dotfiles-by-git/</guid><description>对于 Linux 用户，在 $HOME 文件夹下，一般都有大量的隐藏文件，形如.conf,.xxxrc等，这些都是程序的配置文件。很多人也许花了一个下午，一天，甚至</description></item><item><title>Android 刷机的一般步骤</title><link>https://guyueshui.github.io/post/android%E5%88%B7%E6%9C%BA%E7%9A%84%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/</link><pubDate>Tue, 18 Sep 2018 23:00:05 +0000</pubDate><guid>https://guyueshui.github.io/post/android%E5%88%B7%E6%9C%BA%E7%9A%84%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/</guid><description>1. 事前准备 先想好为什么要刷机？想清楚了吗？真的想清楚了吗！好的，接下来我们要做的事应该是打开一堆网页，一堆对应自己机型的刷机教程帖，还要做好</description></item><item><title>记一次重装 Linux</title><link>https://guyueshui.github.io/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%87%8D%E8%A3%85linux/</link><pubDate>Mon, 13 Aug 2018 10:07:05 +0000</pubDate><guid>https://guyueshui.github.io/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%87%8D%E8%A3%85linux/</guid><description>&lt;p>放假回家，因故将笔记本电池弄到枯竭。结果再次开启，发现 &lt;code>startx&lt;/code> 启动 gnome-session 失败。几经解决未果，只好重装！&lt;/p></description></item><item><title>最大熵对应的概率分布</title><link>https://guyueshui.github.io/post/%E6%9C%80%E5%A4%A7%E7%86%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</link><pubDate>Wed, 01 Aug 2018 18:02:36 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%9C%80%E5%A4%A7%E7%86%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</guid><description>最大熵定理 设 $X \sim p(x)$ 是一个连续型随机变量，其微分熵定义为 $$ h(X) = - \int p(x)\log p(x) dx $$ 其中，$\log$ 一般取自然对数 $\ln$, 单位为 奈特（nats）。 考虑如下优</description></item><item><title>二十四</title><link>https://guyueshui.github.io/post/%E4%BA%8C%E5%8D%81%E5%9B%9B/</link><pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E4%BA%8C%E5%8D%81%E5%9B%9B/</guid><description>写于二十四岁之际，匆匆人间已经走过两纪，观之苦辣酸甜，皆归于平淡。 去日寥寥终不谏， 阴晴变换亦难圆。 无尤无怨无执念， 来纪来年来易之。 丁酉腊月廿</description></item><item><title>戏小调</title><link>https://guyueshui.github.io/post/%E6%88%8F%E5%B0%8F%E8%B0%83/</link><pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%88%8F%E5%B0%8F%E8%B0%83/</guid><description>晚风射枝断，宴罢歌舞歇。 归卧孤衾倦揽，寒阁暗对，幽恨新结。 不识莲心苦，尽日尝相忘。 设入骤雪梦中，清白天地，独立苍茫。</description></item><item><title>某不正经的个人总结</title><link>https://guyueshui.github.io/post/%E6%9F%90%E4%B8%8D%E6%AD%A3%E7%BB%8F%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 23 Jun 2017 14:41:27 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%9F%90%E4%B8%8D%E6%AD%A3%E7%BB%8F%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid><description>&lt;p>不知何时开始，整理情绪，对我来说成了一件十分困难的事。每次想发点什么，总怕被说矫情，想想还是不发了吧。想必很多灵感都是这样被扼杀了吧。但是人总是要改变的，无论随着时间，还是随着空间。​四年还是变了不少的，比如变胖了什么的（这是主要的，饭量大我也没办法，括弧笑）。性情什么的也有变化，主要是理工男气质（猥琐？），当然也有正经的变化。改变是福是祸无从判断，但每个改变都是自己的选择，所以也应该释然。&lt;/p></description></item><item><title>假想敌</title><link>https://guyueshui.github.io/post/%E5%81%87%E6%83%B3%E6%95%8C/</link><pubDate>Wed, 26 Apr 2017 14:49:15 +0000</pubDate><guid>https://guyueshui.github.io/post/%E5%81%87%E6%83%B3%E6%95%8C/</guid><description>有时候我们需要一个假想敌，来抵制一天的堕落。 ：今天也是满负罪恶感的一天呢？ &amp;ndash;嗯，其实我还蛮会自我减压的。 ：这已经称得上是放纵了呢</description></item><item><title>雪之野</title><link>https://guyueshui.github.io/post/%E9%9B%AA%E4%B9%8B%E9%87%8E/</link><pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E9%9B%AA%E4%B9%8B%E9%87%8E/</guid><description>看过《言叶之庭》，特别喜欢雪野百香里。 一直以来 找不到合适的词语 不知道用什么情感 ——描述你 久而久之 连一切的起因也忘了 好像你的存在 就是这世界全部</description></item><item><title>Newifi Mini 安装 PandoraBox</title><link>https://guyueshui.github.io/post/newifi-mini%E5%AE%89%E8%A3%85pandorabox/</link><pubDate>Tue, 21 Feb 2017 16:01:55 +0000</pubDate><guid>https://guyueshui.github.io/post/newifi-mini%E5%AE%89%E8%A3%85pandorabox/</guid><description>首先 Newifi mini 是一款很小巧美观的路由器，颜值即是正义嘛。再加上性价比高，易于刷写第三方系统，所以嘛，值得一买。 规格参数 WAN(10/100Mbps) LAN(10/100Mbps)*2 双频：2.4GHz:30</description></item><item><title>祝考研顺利</title><link>https://guyueshui.github.io/post/%E7%A5%9D%E8%80%83%E7%A0%94%E9%A1%BA%E5%88%A9/</link><pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%A5%9D%E8%80%83%E7%A0%94%E9%A1%BA%E5%88%A9/</guid><description>室友明日考研，祝他顺利吧。 拂影寻花径， 拨云探青天。 平生何来意， 潦潦一纸间。</description></item><item><title>赠有情人</title><link>https://guyueshui.github.io/post/%E8%B5%A0%E6%9C%89%E6%83%85%E4%BA%BA/</link><pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E8%B5%A0%E6%9C%89%E6%83%85%E4%BA%BA/</guid><description>今序：那个时候我还单身，在图书馆自习，一对情侣坐在我前边，甚烦，扰人学习，作此相赠。 原序：某不动，见来人，胶粘状，遂寄言。 劳燕相与飞。 日月相</description></item><item><title>使用 Tar 备份 Archlinux</title><link>https://guyueshui.github.io/post/%E4%BD%BF%E7%94%A8tar%E5%A4%87%E4%BB%BDarchlinux/</link><pubDate>Sat, 10 Sep 2016 19:00:57 +0000</pubDate><guid>https://guyueshui.github.io/post/%E4%BD%BF%E7%94%A8tar%E5%A4%87%E4%BB%BDarchlinux/</guid><description>Linux 需要备份吗？本身 Linux 系统的稳定性就是一流，文件系统也不易产生碎片，只要不是硬盘突然崩掉了，你可以有 100 种方法来修复系统的各种问题而不用重装系统</description></item><item><title>生查子·廿七纪事</title><link>https://guyueshui.github.io/post/%E7%94%9F%E6%9F%A5%E5%AD%90/</link><pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%94%9F%E6%9F%A5%E5%AD%90/</guid><description>昨日武昌水，纵横磨山北。燕雀噙新枝，怨号惊山鬼。 幽恨度频传，闻言声亦老。谁折陌上花，一报江南好？</description></item><item><title>古别</title><link>https://guyueshui.github.io/post/%E5%8F%A4%E5%88%AB/</link><pubDate>Sun, 28 Feb 2016 14:51:23 +0000</pubDate><guid>https://guyueshui.github.io/post/%E5%8F%A4%E5%88%AB/</guid><description>几日度离魂，午后闲萧索。 起身斜照间，指染门前土。 道是无情人，偏作有情甫。 原是离别多，何必离别苦。</description></item><item><title>遣怀・并序</title><link>https://guyueshui.github.io/post/%E9%81%A3%E6%80%80/</link><pubDate>Thu, 21 Jan 2016 14:53:03 +0000</pubDate><guid>https://guyueshui.github.io/post/%E9%81%A3%E6%80%80/</guid><description>今冬返数日，串村之后，与老者话聊，竟不见其中人许。细问之下，原是身逝黄土。时天气晴寒，鸡蜷狗缩，又东北风呼啸，坐家中远观旧物，因忆旧人：十余</description></item><item><title>雪压轩集</title><link>https://guyueshui.github.io/post/%E9%9B%AA%E5%8E%8B%E8%BD%A9%E9%9B%86/</link><pubDate>Sun, 27 Dec 2015 14:39:33 +0000</pubDate><guid>https://guyueshui.github.io/post/%E9%9B%AA%E5%8E%8B%E8%BD%A9%E9%9B%86/</guid><description>1.【浣溪沙】 暖雨无晴漏几丝，牧童斜插嫩花枝。小田新麦上场时。 汲水种瓜偏怒早，忍烟炊黍又嗔迟。日长酸透软腰肢。 据传，这首词是用粉写在一张芍药</description></item><item><title>望日观月</title><link>https://guyueshui.github.io/post/%E6%9C%9B%E6%97%A5%E8%A7%82%E6%9C%88/</link><pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%9C%9B%E6%97%A5%E8%A7%82%E6%9C%88/</guid><description>风逐残红海逐潮， 北斗呈钩贪狼皎。 百年明月一时盈， 自此清辉夜夜销。</description></item><item><title>旅客</title><link>https://guyueshui.github.io/post/%E6%97%85%E5%AE%A2/</link><pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%97%85%E5%AE%A2/</guid><description>当年上学，父亲骑着电瓶车送我到车站，我站在车上往后看…… 车开了 你看我 我回头 看见你没能看见我 的双眼 说来旅客 本身就是一种伤害 大概</description></item><item><title>文本</title><link>https://guyueshui.github.io/post/%E6%96%87%E6%9C%AC/</link><pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%96%87%E6%9C%AC/</guid><description>在这半亩方塘 横七竖八的站立 倾颓，蹒跚，踟蹰 而你是作家，是诗人 是勤于耕作的农夫 夕阳映照的汗水 生命绘成的霓虹 曾路过繁华之境 也见过荒凉雪景 看过滚烫</description></item><item><title>天空</title><link>https://guyueshui.github.io/post/%E5%A4%A9%E7%A9%BA/</link><pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E5%A4%A9%E7%A9%BA/</guid><description>俯视着关于你的一切 像死水一样寂静 而你是云，是风 你是向晚高飞的蝙蝠 未曾与他们苟同 你没有追寻光明 在寂静的向晚 在清新的早晨 在蝉鸣的午后 毫不动摇的揣</description></item><item><title>湖</title><link>https://guyueshui.github.io/post/%E6%B9%96/</link><pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%B9%96/</guid><description>静静躺在城市中央 待云朵与岁月同流 而你是花，是草 是交错的公路 期待你的驻足 如逆流之虹 但旅人未驻足 列车未曾停止 少年未曾回头 所以你未曾到过波心，不谙</description></item><item><title>闻奇录·画工</title><link>https://guyueshui.github.io/post/%E7%94%BB%E5%B7%A5/</link><pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%94%BB%E5%B7%A5/</guid><description>唐进士赵颜，于画工处得一软障，图一妇人甚丽。颜谓画工曰：“世无其人也，如可令生，余愿纳为妻。”画工曰：“余神画也，此亦有名，曰真真。呼其名百</description></item><item><title>踏莎行·元日</title><link>https://guyueshui.github.io/post/%E8%B8%8F%E8%8E%8E%E8%A1%8C/</link><pubDate>Thu, 01 Jan 2015 09:21:12 +0800</pubDate><guid>https://guyueshui.github.io/post/%E8%B8%8F%E8%8E%8E%E8%A1%8C/</guid><description>苹芜青青，波光栩栩，东君重临鸳鸯浦。葬花院落弄新晴，断魂台上兼风雨。 蟾宫戚戚，江畔独步，摊破月华平分取。何如前路楚山孤，海角天涯同逆旅。</description></item><item><title>道破元日</title><link>https://guyueshui.github.io/post/%E9%81%93%E7%A0%B4%E5%85%83%E6%97%A5/</link><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E9%81%93%E7%A0%B4%E5%85%83%E6%97%A5/</guid><description>繁华事散月空明， 春风无意草自青。 天道有常人难测， 朗朗乾坤一语平。</description></item><item><title>独不见</title><link>https://guyueshui.github.io/post/%E7%8B%AC%E4%B8%8D%E8%A7%81/</link><pubDate>Sat, 29 Nov 2014 10:22:18 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%8B%AC%E4%B8%8D%E8%A7%81/</guid><description>莫以危楼栏杆凭，天南地北相思寻。 涂山一望成千古，石尤翻阻远客行。 朽木堪比彭祖老，情丝可争日月新。 悲肠寥寥独不见，空将纷繁枕边吟。</description></item><item><title>露降</title><link>https://guyueshui.github.io/post/%E9%9C%B2%E9%99%8D/</link><pubDate>Sat, 25 Oct 2014 08:42:55 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%9C%B2%E9%99%8D/</guid><description>秋容频惊鬓凋残， 秋风误把相思传。 人未眠，夜阑珊， 天涯何处是团栾。</description></item><item><title>结萝</title><link>https://guyueshui.github.io/post/%E7%BB%93%E8%90%9D/</link><pubDate>Tue, 07 Oct 2014 09:37:50 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%BB%93%E8%90%9D/</guid><description>结萝（后名毒影）是《仙剑奇侠传五前传》游戏中的人物，苗疆女子，邂逅厉岩（后名血手），一直苦苦追随，研究情蛊，希望以此得到厉岩的关心，其实厉岩</description></item><item><title>忆王孙·重阳</title><link>https://guyueshui.github.io/post/%E5%BF%86%E7%8E%8B%E5%AD%99/</link><pubDate>Mon, 06 Oct 2014 00:42:06 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%BF%86%E7%8E%8B%E5%AD%99/</guid><description>绿窗新见暮色沉，围炉夜话俏平生。 又拈旧醅对故人，入更深，月华淌过小柴门。</description></item><item><title>月夕调</title><link>https://guyueshui.github.io/post/%E6%9C%88%E5%A4%95%E8%B0%83/</link><pubDate>Wed, 10 Sep 2014 19:58:50 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%9C%88%E5%A4%95%E8%B0%83/</guid><description>念亟蟾宫殁，思尽天一涯。 长躯何了了，戚戚何惨怛。 泠泠秋风中，霭霭月华下。</description></item><item><title>真·碎碎念</title><link>https://guyueshui.github.io/post/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</link><pubDate>Thu, 21 Aug 2014 23:24:47 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</guid><description>一连几天阴雨天气让身体倍感不适。这两天终于出了太阳。日中则偏。有角度的阳光是温柔的。当烈日变成斜阳，人也就多了些欣赏的眼光。斜阳成绮大约就是</description></item><item><title>踏莎行·为五前作</title><link>https://guyueshui.github.io/post/%E8%B8%8F%E8%8E%8E%E8%A1%8C%E4%B8%BA%E4%BA%94%E5%89%8D%E4%BD%9C/</link><pubDate>Thu, 31 Jul 2014 22:26:23 +0800</pubDate><guid>https://guyueshui.github.io/post/%E8%B8%8F%E8%8E%8E%E8%A1%8C%E4%B8%BA%E4%BA%94%E5%89%8D%E4%BD%9C/</guid><description>放假在家过了一遍《仙剑奇侠传五前传》，不得不说仙剑的结局还是一贯的神，一贯的悲。有时候会将看故事的人拉入其中无法自拔，真个黯然神伤，佩服佩服</description></item><item><title>鹧鸪天·夜游</title><link>https://guyueshui.github.io/post/%E9%B9%A7%E9%B8%AA%E5%A4%A9%E5%A4%9C%E6%B8%B8/</link><pubDate>Wed, 16 Jul 2014 23:51:02 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%B9%A7%E9%B8%AA%E5%A4%A9%E5%A4%9C%E6%B8%B8/</guid><description>放假在家，夜深不能眠，因闭目养神，神游屋外。 夏清碎雨三更天，倦卧竹席待月眠。墨云戏水声婉转，流萤映波步蹁跹。 山连绵，水绵延，细筛夜色几分恬？</description></item><item><title>临江仙·造境</title><link>https://guyueshui.github.io/post/%E4%B8%B4%E6%B1%9F%E4%BB%99%E9%80%A0%E5%A2%83/</link><pubDate>Sun, 29 Jun 2014 14:09:24 +0800</pubDate><guid>https://guyueshui.github.io/post/%E4%B8%B4%E6%B1%9F%E4%BB%99%E9%80%A0%E5%A2%83/</guid><description>硬生生的矫揉造作，满脑子乱想出来的境界。 寂寂远洋村落，皑皑天水漫行。岸下游鱼翻藻荇。波心二两月，湖面十分明。 矮草促织乱入，寒鸦林外时鸣。无食</description></item><item><title>关于饭局那些事儿</title><link>https://guyueshui.github.io/post/%E5%85%B3%E4%BA%8E%E9%A5%AD%E5%B1%80%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</link><pubDate>Fri, 20 Jun 2014 21:09:41 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%85%B3%E4%BA%8E%E9%A5%AD%E5%B1%80%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</guid><description>看到班级聚会上有人被灌吐了，实在看不下去！ 其一，为我好我很感激，说以后在社会上总有应酬不得不喝酒，所以即使不能喝还是得喝。我始终信奉我爸的一</description></item><item><title>忆萝月·端阳</title><link>https://guyueshui.github.io/post/%E5%BF%86%E8%90%9D%E6%9C%88%E7%AB%AF%E9%98%B3/</link><pubDate>Thu, 05 Jun 2014 13:07:26 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%BF%86%E8%90%9D%E6%9C%88%E7%AB%AF%E9%98%B3/</guid><description>禁闱清寂，独卧无好意。拟把乡关枕边诉，花妙榆浓荫细。 昨夜又见月明，教人何不伤情。他日湖畔信步，徒增云淡风清。</description></item><item><title>幽浦吟</title><link>https://guyueshui.github.io/post/%E5%B9%BD%E6%B5%A6%E5%90%9F/</link><pubDate>Mon, 26 May 2014 13:19:46 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%B9%BD%E6%B5%A6%E5%90%9F/</guid><description>寂寂幽林密，凄凄夜色清。 流深散月影，玉泽沁我心。 长梦忽到此，愿遣青牛住。</description></item><item><title>题五一心事</title><link>https://guyueshui.github.io/post/%E9%A2%98%E4%BA%94%E4%B8%80%E5%BF%83%E4%BA%8B/</link><pubDate>Sat, 03 May 2014 09:58:21 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%A2%98%E4%BA%94%E4%B8%80%E5%BF%83%E4%BA%8B/</guid><description>上大学的第一个五一，室友们纷纷出去玩乐，独留我在宿舍，身在异乡，聊感寂寞。 婉转星辰昨夜媚，参商不见动相离。 飞云不顾弦声切，野桥静待落花枝。 偏</description></item><item><title>年少的自大</title><link>https://guyueshui.github.io/post/%E5%B9%B4%E5%B0%91%E7%9A%84%E8%87%AA%E5%A4%A7/</link><pubDate>Sat, 03 May 2014 09:15:00 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%B9%B4%E5%B0%91%E7%9A%84%E8%87%AA%E5%A4%A7/</guid><description>前言：现在的我不认同当时的我，当时的我似乎以为世界以我为中心，真的是 too young too simple, sometimes naive. 好，这次我就说的明明白白：对于你们五一各种回家各种玩各种嗨各</description></item><item><title>《仙剑奇侠传》的爱与道</title><link>https://guyueshui.github.io/post/%E8%AF%84%E4%BB%99%E5%89%91/</link><pubDate>Sun, 16 Mar 2014 01:34:00 +0800</pubDate><guid>https://guyueshui.github.io/post/%E8%AF%84%E4%BB%99%E5%89%91/</guid><description>这么多年最爱的电视剧还是《仙剑奇侠传一》，当年因为一是兴趣，到仙剑贴吧发了这个帖子，被秒删了。我寻思我也没说啥呀，自此没玩过贴吧。 姜明得道时</description></item><item><title>行香子·寄贺双卿</title><link>https://guyueshui.github.io/post/%E8%A1%8C%E9%A6%99%E5%AD%90%E5%AF%84%E8%B4%BA%E5%8F%8C%E5%8D%BF/</link><pubDate>Fri, 14 Mar 2014 15:30:30 +0800</pubDate><guid>https://guyueshui.github.io/post/%E8%A1%8C%E9%A6%99%E5%AD%90%E5%AF%84%E8%B4%BA%E5%8F%8C%E5%8D%BF/</guid><description>见《雪压轩集》。 丝丝柳絮，点点残雨。正春初，愁云乱舞。水田夕下，秋碧楚楚。纵月儿长，日儿短，双卿苦。 豆蔻妙龄，玉带华年，偏风刀霜剑无诉。幽如</description></item><item><title>打春诗</title><link>https://guyueshui.github.io/post/%E6%89%93%E6%98%A5%E8%AF%97/</link><pubDate>Tue, 04 Feb 2014 08:56:36 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%89%93%E6%98%A5%E8%AF%97/</guid><description>红日殷勤照，绿草葳蕤发。 轻霜打薄叶，细雨湿脸颊。 燕衔去岁诗，牛踏来年花。 郁结二十载，难忘旧时家。 附：立春古词 春日春风动， 春江春水流。 春人饮春</description></item><item><title>杂思</title><link>https://guyueshui.github.io/post/%E6%9D%82%E6%80%9D/</link><pubDate>Sun, 19 Jan 2014 12:06:15 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%9D%82%E6%80%9D/</guid><description>回家的第一个早晨，想起去乡里走走。无奈各家都躲在深宫大院里，院门铁锁。问何以至此？曰：“昨儿个杨家电驴儿被盗啦，俺来则速的叫大儿子打了个院儿</description></item><item><title>理园小桂</title><link>https://guyueshui.github.io/post/%E7%90%86%E5%9B%AD%E5%B0%8F%E6%A1%82/</link><pubDate>Fri, 13 Dec 2013 17:14:14 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%90%86%E5%9B%AD%E5%B0%8F%E6%A1%82/</guid><description>武理时光，大多是屌丝理工男宿舍生活。校园里开遍了石楠花，你懂得。某个恰当的时节，恰当的地点，遇到理学院的桂花香，算得上是人间天堂了。 寂寞花开</description></item><item><title>相思曲</title><link>https://guyueshui.github.io/post/%E7%9B%B8%E6%80%9D%E6%9B%B2/</link><pubDate>Sat, 09 Nov 2013 13:45:37 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%9B%B8%E6%80%9D%E6%9B%B2/</guid><description>系为思念友人作。 两场相思雨，一处相思苦。 此相系何物，所思在何处？ 依稀门前柳，朦胧沙坪路。 曾经多少事，只被相思付。 相思付相知，相知不与语。 无语</description></item><item><title>临江仙·友</title><link>https://guyueshui.github.io/post/%E4%B8%B4%E6%B1%9F%E4%BB%99%E5%8F%8B/</link><pubDate>Tue, 29 Oct 2013 22:32:30 +0800</pubDate><guid>https://guyueshui.github.io/post/%E4%B8%B4%E6%B1%9F%E4%BB%99%E5%8F%8B/</guid><description>别后音书难寄，梦醒佳期曾寻？去年今日却来时，指点斜阳丽，谈笑细雨霏。 残风枯草落桂，玉影浮萍无依。闲病一来漫如丝。秋深明月照，夜寂懒人归。</description></item><item><title>题水阙</title><link>https://guyueshui.github.io/post/%E9%A2%98%E6%B0%B4%E9%98%99/</link><pubDate>Sun, 20 Oct 2013 10:20:46 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%A2%98%E6%B0%B4%E9%98%99/</guid><description>疾风枯叶两相搏，一叹秋光万念空。 瑟瑟孤霜兰亭瘦，层层幽岚花影重。 欲投鱼雁心难递，将拟音书愿不衷。 暂借明月作明镜，照见愁容当笑容。</description></item><item><title>卜算子·重阳</title><link>https://guyueshui.github.io/post/%E5%8D%9C%E7%AE%97%E5%AD%90%E9%87%8D%E9%98%B3/</link><pubDate>Sun, 13 Oct 2013 06:58:29 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%8D%9C%E7%AE%97%E5%AD%90%E9%87%8D%E9%98%B3/</guid><description>浩浩江汉天，寂寂雁行促。信拈梧桐一叶愁，泪起相思雨。 九九又相逢，患难身何处？却把双眉抵作山，淡看秋云暮。</description></item><item><title>阿莉埃蒂</title><link>https://guyueshui.github.io/post/%E9%98%BF%E8%8E%89%E5%9F%83%E8%92%82/</link><pubDate>Sun, 29 Sep 2013 17:01:39 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%98%BF%E8%8E%89%E5%9F%83%E8%92%82/</guid><description>看完《借东西的小人阿莉埃蒂》，对于结尾十分有感触。阿莉埃蒂一家人能否找到新的家呢？ 穿行在静谧的花丛 蚂蚱蹦跳，蛐蛐乱叫 活跃在空荡的房子 翻过碗橱</description></item><item><title>村东头</title><link>https://guyueshui.github.io/post/%E6%9D%91%E4%B8%9C%E5%A4%B4/</link><pubDate>Thu, 29 Aug 2013 12:34:10 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%9D%91%E4%B8%9C%E5%A4%B4/</guid><description>我们村东头，是个好地方。那里水天相接，那里绿草如茵，那里牛羊成群，那里风和日丽。 小时候，我和我的小伙伴们，骑着脚踏车，在稻场上奔驰，平坦而又</description></item><item><title>鬼话</title><link>https://guyueshui.github.io/post/%E9%AC%BC%E8%AF%9D/</link><pubDate>Tue, 06 Aug 2013 21:29:49 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%AC%BC%E8%AF%9D/</guid><description>看官，请随我来。 你说这大气好不奇妙。我们都知道大气对我们是有压力的，我们为什么感受不到，因为我们体内也有大气压着。哦，那么我们的肚皮不是要承</description></item><item><title>杂记</title><link>https://guyueshui.github.io/post/%E6%9D%82%E8%AE%B0/</link><pubDate>Mon, 17 Jun 2013 21:40:53 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%9D%82%E8%AE%B0/</guid><description>每当我提笔想写些什么，心里便虚荣起来。总想写出深奥，晦涩，精炼，优美的话语，让人们好加点评，其实都是故弄玄虚而已，真个应了“为赋新词强说愁”</description></item><item><title>BSearch</title><link>https://guyueshui.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/search/</guid><description/></item><item><title>Hello World</title><link>https://guyueshui.github.io/post/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/hello-world/</guid><description>Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.
Quick Start Create a new post 1 $ hexo new &amp;#34;My New Post&amp;#34; More info: Writing
Run server 1 $ hexo server More info: Server
Generate static files 1 $ hexo generate More info: Generating</description></item></channel></rss>