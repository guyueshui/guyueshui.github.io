<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>水阙</title><link>https://guyueshui.github.io/</link><description>Recent content on 水阙</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 03 Sep 2025 21:46:26 +0800</lastBuildDate><atom:link href="https://guyueshui.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>析构函数与 override</title><link>https://guyueshui.github.io/post/override-destructor/</link><pubDate>Wed, 03 Sep 2025 21:40:03 +0800</pubDate><guid>https://guyueshui.github.io/post/override-destructor/</guid><description>&lt;ul&gt;
&lt;li&gt;&lt;code&gt;virtual&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;override&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;final&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面三个关键字在继承体系中起着重要作用。&lt;code&gt;virtual&lt;/code&gt;不用多说，声明虚函数必备的关键字。&lt;code&gt;override&lt;/code&gt;和&lt;code&gt;final&lt;/code&gt;是 C++11 中引入的，二者的作用其实更多是提醒开发者自己，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我正在重写一个虚函数&lt;/li&gt;
&lt;li&gt;我正在重写一个虚函数，并且不希望再被派生类重写这个函数&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>遇见 ChiliChill</title><link>https://guyueshui.github.io/post/met-chilichill/</link><pubDate>Fri, 18 Apr 2025 21:27:03 +0800</pubDate><guid>https://guyueshui.github.io/post/met-chilichill/</guid><description>&lt;p&gt;“世界上有两种人，一种是喜欢 ChiliChill 的，一种是还没听过 ChiliChill 的。”&lt;/p&gt;
&lt;p&gt;&lt;img src="https://guyueshui.github.io/img/posted/chilichill.png" style="width: 60%;"&gt;&lt;/img&gt;
&lt;div class='align-center' style="font-size:smaller; font-family: serif; margin-top: -0.5em"&gt;
 logo
&lt;/div&gt;&lt;/p&gt;</description></item><item><title>痛的少一些！Windows</title><link>https://guyueshui.github.io/post/suckless-windows/</link><pubDate>Wed, 08 Jan 2025 20:36:52 +0800</pubDate><guid>https://guyueshui.github.io/post/suckless-windows/</guid><description>&lt;p&gt;Windows 痛点例举，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;祖传蓝屏（这一点在 XP 上尤为严重，Win7 以上已经少见许多）。&lt;/li&gt;
&lt;li&gt;静默更新。悄悄下载更新，强制更新，莫名其妙跳出来说要更新，关机时强迫更新。恶心的默认策略！&lt;/li&gt;
&lt;li&gt;万年难用的资源管理器，不带标签页，窗口开一堆。&lt;/li&gt;
&lt;li&gt;开发上来说，编译工具链体验比不上 linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然 Windows 很难用，但并不妨碍它桌面市场占用率第一的地位。在生活或者工作中，我还是无法避免地被动使用 windows. 因此，我希望通过一些简单定制，让我的使用体验能好一些。&lt;/p&gt;</description></item><item><title>Android 手机备份攻略</title><link>https://guyueshui.github.io/post/android-backup/</link><pubDate>Tue, 26 Mar 2024 22:33:43 +0800</pubDate><guid>https://guyueshui.github.io/post/android-backup/</guid><description>&lt;p&gt;说起 Android 手机的备份，最先闯入眼帘的可能是 XX 搬机助手，某某手机搬家等一键式迁移手机数据的 APP，这些 APP 可以迁移的数据包括，联系人、通话记录、短信、应用（不包括应用数据）、照片视频、文件夹等，此外还包括一些系统设置例如 WIFI 密码&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;</description></item><item><title>黑山小妖</title><link>https://guyueshui.github.io/post/%E9%BB%91%E5%B1%B1%E5%B0%8F%E5%A6%96/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E9%BB%91%E5%B1%B1%E5%B0%8F%E5%A6%96/</guid><description>&lt;p&gt;今天来说说女儿睡觉的事。女儿十三个多月了，自从五六个月的时候给她一个人睡摇篮，她就能从晚上八九点睡到第二天早上六七点。就这样过了几个月，我在外上班，平时她妈妈带她睡。忽然有段时间，妻子说不舍得她一个人睡，又开始把她抱到床上睡。就这样又过了一段时间。&lt;/p&gt;</description></item><item><title>护眼显示器选购指南</title><link>https://guyueshui.github.io/post/eye-comfortable-displayer/</link><pubDate>Wed, 14 Jun 2023 19:56:54 +0800</pubDate><guid>https://guyueshui.github.io/post/eye-comfortable-displayer/</guid><description>&lt;p&gt;常年对着破旧笔记本的粗糙小屏幕，实在是对不起自己的眼睛。这不，趁着今年 618 打算买个显示器。预算 1500，分辨率 2K 起，要求具备莱茵低蓝光认证。&lt;/p&gt;</description></item><item><title>从零开始构建家庭共享存储</title><link>https://guyueshui.github.io/post/share-storage-with-family/</link><pubDate>Tue, 14 Mar 2023 09:24:57 +0800</pubDate><guid>https://guyueshui.github.io/post/share-storage-with-family/</guid><description>&lt;p&gt;一切都要从前几天给手机刷新 ROM，导致数据丢失说起。&lt;/p&gt;
&lt;p&gt;前些日子，我的 RedmiK40S MIUI13 突然给我自动更新至 MIUI14，这违背了我的意愿。但这还不至于让我动刷机的年头，毕竟年事已高，不再那么想折腾手机。可这次更新，不单单是 MIUI 版本的提升，更是 Android 12 到 13 的版本升级。这直接导致了我的钛备份闪退了，并且使用钛备份还原在 a12 上备份的应用，如果勾选还原应用数据，则必然导致对应应用闪退。应用备份出了问题我是无法接受的。于是，开始上 XDA 找 ROM，随便下了几个，准备动手。&lt;/p&gt;</description></item><item><title>Swap 扩容</title><link>https://guyueshui.github.io/post/extend-swap/</link><pubDate>Fri, 24 Feb 2023 21:07:16 +0800</pubDate><guid>https://guyueshui.github.io/post/extend-swap/</guid><description>&lt;!--
由于涉及到磁盘分区，一般来说 swap 分区在安装系统的时候就要确定。一般建议为总内存大小的一半。

可以通过如下步骤设置一个 swap 分区：
```bash
mkswap /dev/swap_partition
swapon /dev/swap_partition
```
--&gt;
&lt;p&gt;先前安装系统的时候，swap 分区给小了（机器内存的一半）。我的笔记本内存 8G，swap 给了 4G，当系统已用内存超过 4G，会导致无法&lt;a href="https://guyueshui.github.io/post/linux-hibernate#%E7%A1%AE%E4%BF%9Dswap%E5%88%86%E5%8C%BA%E8%B6%B3%E5%A4%9F%E5%A4%A7"&gt;休眠&lt;/a&gt;。如果 swap 给的和本机内存一样大，那么就不会存在 swap 放不下当前工作镜像的问题。但重新分区追加 swap 显然不现实，所以只能让两块 swap 拼凑一下，达到总体有 8G 可用 swap 的效果。&lt;/p&gt;</description></item><item><title>喜女</title><link>https://guyueshui.github.io/post/birth-of-shang/</link><pubDate>Sun, 06 Nov 2022 19:00:00 +0800</pubDate><guid>https://guyueshui.github.io/post/birth-of-shang/</guid><description>&lt;p&gt;壬寅年九月，喜得一女，因作此篇。&lt;/p&gt;
&lt;p&gt;九月孕明珠，&lt;/p&gt;
&lt;p&gt;玲珑宛天成。&lt;/p&gt;
&lt;p&gt;愿织锦绣梦，&lt;/p&gt;
&lt;p&gt;携手度余生。&lt;/p&gt;</description></item><item><title>C++ 中的默认参数简介</title><link>https://guyueshui.github.io/post/cpp-default-argument/</link><pubDate>Wed, 14 Sep 2022 13:23:39 +0800</pubDate><guid>https://guyueshui.github.io/post/cpp-default-argument/</guid><description>&lt;h2 id="minimal-example"&gt;Minimal example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// call foo(5, 1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="分离编译带来的隐患"&gt;分离编译带来的隐患&lt;/h2&gt;
&lt;p&gt;如果函数声明和定义分离，此时就有一个 pitfall。由于默认参数可以定义在函数声明（declaration）中，也可以定义在函数定义（definition）中。&lt;/p&gt;</description></item><item><title>红米 K40S 初体验</title><link>https://guyueshui.github.io/post/fresh-experience-on-munch/</link><pubDate>Tue, 13 Sep 2022 21:42:54 +0800</pubDate><guid>https://guyueshui.github.io/post/fresh-experience-on-munch/</guid><description>&lt;p&gt;8 月 8 日入手了一台红米 K40S（设备代号 munch）。蹲了很久了，终于等到 88 购物节一波降价，在某东 1999 拿下顶配版 K40S.&lt;/p&gt;</description></item><item><title>C++ 中的 static 关键字</title><link>https://guyueshui.github.io/post/static-in-cpp/</link><pubDate>Thu, 21 Apr 2022 23:52:04 +0800</pubDate><guid>https://guyueshui.github.io/post/static-in-cpp/</guid><description>&lt;h2 id="static-members"&gt;Static members&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-c++" data-lang="c++"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// non-static member (i.e., `data` is not visible in `fun1`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;fun2&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sata&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// valid, equivalent to the following
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;fun1&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;静态成员不能访问非静态成员（因为静态成员独立与类的实例（即对象）而存在，为了在没有对象被创建的情况下，静态成员还是可以使用，所以不能访问非静态成员。）&lt;/li&gt;
&lt;li&gt;同理，类的任何对象不包含静态数据成员&lt;/li&gt;
&lt;li&gt;静态成员不与对象，不与&lt;code&gt;this&lt;/code&gt;指针发生交互，作为结果，静态成员函数不能声明为&lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可以通过类的对象调用静态成员函数，但此调用跟对象的状态并无关系，也就是说换个对象来调用是等价的，都等价于使用类名加域作用符来调用&lt;/li&gt;
&lt;li&gt;静态成员一般定义在类的外部，因为每个对象都共享静态成员，避免多次定义&lt;/li&gt;
&lt;li&gt;View static member as a normal function that has nothing to do with the class, except you must use &lt;code&gt;::&lt;/code&gt; to access static members&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Linux 开机无声音</title><link>https://guyueshui.github.io/post/linux%E5%BC%80%E6%9C%BA%E6%97%A0%E5%A3%B0%E9%9F%B3/</link><pubDate>Sat, 26 Mar 2022 18:45:16 +0800</pubDate><guid>https://guyueshui.github.io/post/linux%E5%BC%80%E6%9C%BA%E6%97%A0%E5%A3%B0%E9%9F%B3/</guid><description>&lt;h2 id="开机后扬声器无声音"&gt;开机后扬声器无声音&lt;/h2&gt;
&lt;p&gt;问题描述：个人笔记本电脑长久以来都有一个问题，开机之后扬声器没声音，从应用层看毫无问题，所有音乐视频照常播放，能调音量，就是没声音。必须插一下耳机，耳机里有声音。然后再拔出耳机，外部扬声器也有声音了。因此使用起来并无大碍，只需要准备一个耳机，开机之后插拔一下即可。&lt;/p&gt;</description></item><item><title>Linux 笔记本触摸板水平滚动问题</title><link>https://guyueshui.github.io/post/touchpad-horiz-scroll/</link><pubDate>Fri, 25 Mar 2022 23:03:59 +0800</pubDate><guid>https://guyueshui.github.io/post/touchpad-horiz-scroll/</guid><description>&lt;p&gt;自打使用 linux 系统以来，触摸板这块的体验一只是个痛点：只支持基本的点击，双指垂直滚动。很久以来我就一直想要触摸板水平滚动的功能。今天终于实现了！&lt;/p&gt;
&lt;h2 id="synaptics"&gt;Synaptics&lt;/h2&gt;
&lt;p&gt;其实很久以前就照抄过一份&lt;code&gt;xf86-input-synaptics&lt;/code&gt;驱动程序的触摸板配置：&lt;/p&gt;</description></item><item><title>使用 Yield 实现 Python 协程</title><link>https://guyueshui.github.io/post/python-coroutine-with-yield/</link><pubDate>Sun, 20 Mar 2022 20:44:58 +0800</pubDate><guid>https://guyueshui.github.io/post/python-coroutine-with-yield/</guid><description>&lt;p&gt;考虑如下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;span class="lnt"&gt;22
&lt;/span&gt;&lt;span class="hl"&gt;&lt;span class="lnt"&gt;23
&lt;/span&gt;&lt;/span&gt;&lt;span class="lnt"&gt;24
&lt;/span&gt;&lt;span class="lnt"&gt;25
&lt;/span&gt;&lt;span class="lnt"&gt;26
&lt;/span&gt;&lt;span class="lnt"&gt;27
&lt;/span&gt;&lt;span class="lnt"&gt;28
&lt;/span&gt;&lt;span class="lnt"&gt;29
&lt;/span&gt;&lt;span class="lnt"&gt;30
&lt;/span&gt;&lt;span class="lnt"&gt;31
&lt;/span&gt;&lt;span class="lnt"&gt;32
&lt;/span&gt;&lt;span class="lnt"&gt;33
&lt;/span&gt;&lt;span class="lnt"&gt;34
&lt;/span&gt;&lt;span class="lnt"&gt;35
&lt;/span&gt;&lt;span class="lnt"&gt;36
&lt;/span&gt;&lt;span class="lnt"&gt;37
&lt;/span&gt;&lt;span class="lnt"&gt;38
&lt;/span&gt;&lt;span class="lnt"&gt;39
&lt;/span&gt;&lt;span class="lnt"&gt;40
&lt;/span&gt;&lt;span class="lnt"&gt;41
&lt;/span&gt;&lt;span class="lnt"&gt;42
&lt;/span&gt;&lt;span class="lnt"&gt;43
&lt;/span&gt;&lt;span class="lnt"&gt;44
&lt;/span&gt;&lt;span class="lnt"&gt;45
&lt;/span&gt;&lt;span class="lnt"&gt;46
&lt;/span&gt;&lt;span class="lnt"&gt;47
&lt;/span&gt;&lt;span class="lnt"&gt;48
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;async_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ret_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ret_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;ret_list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;arg_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;imp_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;imp_func&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;arg_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cb_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;async_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cb_args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;imp_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_async&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_wrapper&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;async_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;_wrapper&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;fd(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line hl"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;# return &amp;#39;EOF&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fd:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;_idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@make_async&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;fb(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_idx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fb:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;fc(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fc:&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;_idx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nd"&gt;@make_async&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;fa(&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;)&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;th iteration: ret in fa is &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;fa&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;以上代码的运行结果为：&lt;/p&gt;</description></item><item><title>A point of python metaclass</title><link>https://guyueshui.github.io/post/python-metaclass/</link><pubDate>Sun, 12 Dec 2021 12:55:45 +0800</pubDate><guid>https://guyueshui.github.io/post/python-metaclass/</guid><description>&lt;h2 id="create-class-dynamically"&gt;Create &lt;code&gt;class&lt;/code&gt; dynamically&lt;/h2&gt;
&lt;p&gt;Python doc says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By default, classes are constructed using &lt;code&gt;type()&lt;/code&gt;. The class body is executed in a new namespace and the class name is bound locally to the result of &lt;code&gt;type(name, bases, namespace)&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s means, a &lt;code&gt;class&lt;/code&gt; statement is equivalent to the call of &lt;code&gt;type&lt;/code&gt; method with three arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name: name of the class&lt;/li&gt;
&lt;li&gt;bases: tuple of the parent class (for inheritance, can be empty)&lt;/li&gt;
&lt;li&gt;attrs: dictionary containing attributes names and values.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, the following classes are identical:&lt;/p&gt;</description></item><item><title>V3Ray 的配置笔记</title><link>https://guyueshui.github.io/post/build-your-ladder/</link><pubDate>Tue, 07 Dec 2021 22:05:42 +0800</pubDate><guid>https://guyueshui.github.io/post/build-your-ladder/</guid><description>&lt;p&gt;学生时代曾为整个课题组的师生搭建过一个梯子，稳定运行两年多，最近突然爬不上去了。
寻思是哪里出了问题，经过一番定位，原来是之前的免费域名到期了。遂于昨晚开启修补
之旅，无奈运气不太好，每一环节都出了问题，最终搞到凌晨 3 点才重新爬上了梯子。&lt;/p&gt;</description></item><item><title>Python Iterables</title><link>https://guyueshui.github.io/post/python-iterables/</link><pubDate>Sun, 21 Feb 2021 22:26:30 +0800</pubDate><guid>https://guyueshui.github.io/post/python-iterables/</guid><description>&lt;p&gt;Python 的迭代器（iterator）、生成器（generator）、可迭代对象（iterable），虽是老生常谈，但我毕竟要记录一下自己的见解，因有此篇。&lt;/p&gt;</description></item><item><title>Linux 的休眠</title><link>https://guyueshui.github.io/post/linux-hibernate/</link><pubDate>Mon, 13 Jul 2020 22:44:33 +0800</pubDate><guid>https://guyueshui.github.io/post/linux-hibernate/</guid><description>&lt;p&gt;先区分一下两个名词：睡眠（sleep）和休眠（hibernate）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;睡眠：将工作镜像写入内存（RAM），以便快速恢复。内存读写很快，所以睡眠的特点就是“睡得快”和“醒得快”。对于笔记本来说，合上盖子就睡了，打开盖子你的工作区间即刻就能恢复，很是方便。但是睡眠有一个缺点，就是要给内存供电，一旦断电，你的镜像数据就会丢失，工作区间将不复存在。当然这来自于内存的固有特点，建议百度 RAM。&lt;/li&gt;
&lt;li&gt;休眠：将工作镜像写入硬盘（disk，ROM），这样你也可以恢复工作区间。只是睡下去和醒过来的时间比内存慢不少。但是，它有一个好处就是断电了也不会丢失数据。当你再次开机，系统就会从硬盘里面读取镜像，恢复你的工作区间。&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>一个 really simple 的 LaTeX 宏包</title><link>https://guyueshui.github.io/post/tex-sty-basic/</link><pubDate>Sun, 26 Apr 2020 09:25:09 +0800</pubDate><guid>https://guyueshui.github.io/post/tex-sty-basic/</guid><description>&lt;p&gt;众所周知，LaTeX 是一个高效易用的排版软件，基本上只要找到合适的模板，剩下的就只剩码字了。比起 MS Word，简直不知道高到哪里去。就拿最近写论文的事来说，我先用 TeX 码好字，然后要投的那个刊需要用 Word 提交。转格式转了我一下午带一晚上，太痛苦了。深刻的体会到什么叫自以为是，MS Word 自作聪明地给你调格式。当你敲下回车之后，天知道它又会自动帮你做些什么？！&lt;/p&gt;</description></item><item><title>Latexmk 基础用法</title><link>https://guyueshui.github.io/post/latexmk-basic/</link><pubDate>Mon, 13 Apr 2020 23:50:55 +0800</pubDate><guid>https://guyueshui.github.io/post/latexmk-basic/</guid><description>&lt;p&gt;怎么想到用 latexmk 的呢？写论文呗！&lt;/p&gt;
&lt;p&gt;本来呢，我一直习惯于使用命令行手敲&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;pdflatex someting.tex
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;千万别小看这种重复劳动，它不仅帮你加深记忆，还有最完整的输出，让你一窥 Tex 排版系统的内裤（→_→，一本正经胡说八道中……）。还记得 Archlinux 的哲学名言吗？&amp;ndash;Keep it simple and stupid (KISS)&amp;ndash;说得太对了呀！&lt;/p&gt;</description></item><item><title>Gnome 应用启动缓慢</title><link>https://guyueshui.github.io/post/gnome-app-slow-start/</link><pubDate>Wed, 01 Apr 2020 23:01:36 +0800</pubDate><guid>https://guyueshui.github.io/post/gnome-app-slow-start/</guid><description>&lt;p&gt;先看环境：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;$ neofetch
 -` yychi@MiBook-Air 
 .o+` ---------------- 
 `ooo/ OS: Arch Linux x86_64 
 `+oooo: Host: TM1604 XMAKB3M0P0202 
 `+oooooo: Kernel: 5.5.13-arch2-1 
 -+oooooo+: Uptime: 5 mins 
 `/:-:++oooo+: Packages: 1153 (pacman) 
 `/++++/+++++++: Shell: zsh 5.8 
 `/++++++++++++++: Resolution: 1920x1080 
 `/+++ooooooooooooo/` WM: i3 
 ./ooosssso++osssssso+` Theme: Adwaita [GTK2] 
 .oossssso-````/ossssss+` Icons: Adwaita [GTK2] 
 -osssssso. :ssssssso. Terminal: urxvt 
 :osssssss/ osssso+++. Terminal Font: DejaVu Sans Mono for Powerline 
 /ossssssss/ +ssssooo/- CPU: Intel i5-7200U (4) @ 3.100GHz 
 `/ossssso+/:- -:/+osssso+- GPU: NVIDIA GeForce MX150 
 `+sso+:-` `.-/+oso: GPU: Intel HD Graphics 620 
 `++:. `-/+/ Memory: 1608MiB / 7881MiB 
 .` `/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再看问题：Gnome 系软件（gedit, baobab, nautilus 等）启动龟速，通常需要等待 10-30s.&lt;/p&gt;</description></item><item><title>Metapost 学习笔记</title><link>https://guyueshui.github.io/post/metapost/</link><pubDate>Tue, 31 Mar 2020 09:20:44 +0800</pubDate><guid>https://guyueshui.github.io/post/metapost/</guid><description>&lt;p&gt;想必你也有过这样的疑问，中学数学书上的那些精美的作图是如何画出来的？一直以来，我都想学习一门绘图语言，只是久久未能行动 orz&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3812944475,2492602811&amp;amp;fm=26&amp;amp;gp=0.jpg" alt=""&gt;&lt;/p&gt;
&lt;p&gt;闲话少叙，开始学习！&lt;/p&gt;</description></item><item><title>声音的消亡</title><link>https://guyueshui.github.io/post/%E5%A3%B0%E9%9F%B3%E7%9A%84%E6%B6%88%E4%BA%A1/</link><pubDate>Wed, 25 Mar 2020 14:07:52 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%A3%B0%E9%9F%B3%E7%9A%84%E6%B6%88%E4%BA%A1/</guid><description>&lt;p&gt;近日整理以前的文章，发现一个事实：我越来越不会说话，越来越不会表达，越来越没有自己的思想。&lt;/p&gt;
&lt;p&gt;以前的我每隔几天都会发表空间说说，即使大部分属于“少年不识愁滋味，为赋新词强说愁”。但好歹能时常发表自己的观点、见解和感悟。我现在看起自己以前写过的东西，不论正确与否，起码可以通过写的文字窥见当时的自己，了解当时的想法，经过时空的转换，这些想法现在品起来十分有味道、并且非常有乐趣。&lt;/p&gt;</description></item><item><title>Bbb</title><link>https://guyueshui.github.io/slide/bbb/</link><pubDate>Mon, 23 Mar 2020 15:56:44 +0800</pubDate><guid>https://guyueshui.github.io/slide/bbb/</guid><description>&lt;h1 id="the-title"&gt;The Title&lt;/h1&gt;
&lt;p&gt;&lt;big&gt;Sub Title&lt;/big&gt;&lt;/p&gt;
&lt;p&gt;Yychi | SIST&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="slide-2"&gt;Slide 2&lt;/h2&gt;
&lt;p&gt;here comes $e=mc^2$.&lt;/p&gt;
&lt;p&gt;$$
\mathbb{T} \mapsto A
$$&lt;/p&gt;</description></item><item><title>CCC</title><link>https://guyueshui.github.io/slide/ccc/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/slide/ccc/</guid><description>&lt;h1 id="hello-world"&gt;Hello world!&lt;/h1&gt;
&lt;p&gt;This is my first slide.&lt;/p&gt;
&lt;hr&gt;


&lt;section data-shortcode-section&gt;
&lt;h1 id="hello-mars"&gt;Hello Mars!&lt;/h1&gt;
&lt;p&gt;This is my second slide.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="vertical-slide-1"&gt;Vertical slide 1&lt;/h1&gt;
&lt;p&gt;This is verticle slide.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="vertical-slide-2"&gt;Vertical slide 2&lt;/h1&gt;

&lt;/section&gt;</description></item><item><title>Demo Slides</title><link>https://guyueshui.github.io/slide/aaa/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/slide/aaa/</guid><description>&lt;h1 id="hello-world"&gt;Hello world!&lt;/h1&gt;
&lt;p&gt;This is my first &lt;code&gt;slide&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;$e=mc^2$&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="w"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;


&lt;section data-shortcode-section&gt;
&lt;h1 id="hello-mars"&gt;Hello Mars!&lt;/h1&gt;
&lt;p&gt;This is my second slide.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="vertical-slide-1"&gt;Vertical slide 1&lt;/h1&gt;
&lt;p&gt;This is verticle slide.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id="vertical-slide-2"&gt;Vertical slide 2&lt;/h1&gt;

&lt;/section&gt;</description></item><item><title>转义字符到底是什么</title><link>https://guyueshui.github.io/post/what-is-escape-character/</link><pubDate>Wed, 18 Mar 2020 22:41:06 +0800</pubDate><guid>https://guyueshui.github.io/post/what-is-escape-character/</guid><description>&lt;p&gt;转义字符到底是啥？&lt;/p&gt;
&lt;p&gt;实不相瞒我就是因为不知道才写下这篇文章，不，准确的说是这篇笔记 orz，既然是笔记，无所谓抄不抄了。每次说到转义字符，多少有点模糊，所以不如记下这篇笔记，以后忘了直接翻出来看看，复习起来要快一些。&lt;/p&gt;</description></item><item><title>小内存机器的自我救赎</title><link>https://guyueshui.github.io/post/nice-softwares/</link><pubDate>Thu, 12 Mar 2020 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/nice-softwares/</guid><description>&lt;p&gt;在此记录一下我自己用过的非常棒的小软件。&lt;/p&gt;
&lt;p&gt;有必要维护一个自己使用的软件列表。&lt;/p&gt;
&lt;p&gt;套用一下 suckless 的 slogan，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything sucks, we just suck less.&lt;/p&gt;
&lt;div style="text-align:right"&gt;-- suckless.org&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2 id="下载"&gt;下载&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aria2.github.io"&gt;aria2c&lt;/a&gt;: 命令行下载工具，支持下载种子、磁力等。有 RPC 模式，配合 WebUI 使用更佳。参考&lt;a href="https://guyueshui.github.io/tricks/#aria2c"&gt;简介&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="多媒体"&gt;多媒体&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mpv.io"&gt;mpv&lt;/a&gt;: 命令行多媒体播放器，拥有较强的扩展性和自定义的空间，另外我自己体验上来看比 mplayer 要流畅，mplayer 在我的机子上有丢帧，而 mpv 无明显丢帧。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.musicpd.org/"&gt;mpd/mpc&lt;/a&gt;: 音乐播放，没有界面。mpd 作为服务端，mpc 作为客户端，占用内存非常低。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://obsproject.com/"&gt;OBS stuido&lt;/a&gt;: 录屏软件，大而全，跨平台。虽然较大，但实践证明是兼容性最好的，在 linux 上也好使。可以正常录制扬声器和麦克风。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/MaartenBaert/ssr"&gt;SimpleScreenRecorder&lt;/a&gt;: 录屏软件，配置比 obs 少但也够用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="文档"&gt;文档&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pwmt.org/projects/zathura/"&gt;zathura&lt;/a&gt;: A vim-like pdf reader. vim 系快捷键，小而轻，但功能也相对较少。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="截图"&gt;截图&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://flameshot.org"&gt;flameshot&lt;/a&gt;: gnome-screenshot 的替代品，支持截图后标记，复制到剪贴板；平台：Linux
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flameshot gui&lt;/code&gt;: 直接打开截屏功能，更多参考&lt;code&gt;flameshot -h&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/phw/peek"&gt;peek&lt;/a&gt;: 小巧易用的录屏软件，支持录制 gif, mp4, webm 等格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="看图"&gt;看图&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://git.sr.ht/~exec64/imv"&gt;imv&lt;/a&gt;: feh 的替代，支持多种格式（包括 gif&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;）。界面简洁只有一个图片框和 feh 一样，但是有必要的信息显示（overlay）。简洁党的最爱。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AlienCowEatCake/ImageViewer"&gt;ImageViewer&lt;/a&gt;: 纯 Qt 的图片查看器，简约不简陋。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="效率"&gt;效率&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://launchpad.net/xpad"&gt;xpad&lt;/a&gt;: 小而轻的桌面便签。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://taskwarrior.org/"&gt;Taskwarrior&lt;/a&gt;: A command-line todo manager，不要因为它的强大而忘记使用它的初衷。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ranger/ranger"&gt;ranger&lt;/a&gt;: File manager in terminal，三页分栏显示文件树，支持文件预览（需安装对应依赖），支持自定义命令，书签等。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/davatorium/rofi"&gt;rofi&lt;/a&gt;: dmenu 替代品，窗口切换，应用启动器，简约大方，纯文本构成。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.voidtools.com/zh-cn/"&gt;Everything&lt;/a&gt;: windows 平台，免费且简单易用的全局搜索器，该有的都有。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://qttabbar.wikidot.com/"&gt;QTTabBar&lt;/a&gt;: 众所周知，windows 文件管理器十分难用，尤其是不支持 tab，所以，它来了。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="学习"&gt;学习&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://goldendict.org/"&gt;GoldenDict&lt;/a&gt;: 离线词典，支持在线页面查词，接有道，维基等，可以看做是 Linux 上的 Eudic，支持多种离线字典格式，支持自定义快捷键查找剪贴板中的单词。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="笔记"&gt;笔记&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://obsidian.md/"&gt;Obsidian&lt;/a&gt;: markdown 笔记软件，也可做个人知识库管理（过于方法论）。卖点有二，一是支持&lt;a href="https://sspai.com/post/67996"&gt;双向链接&lt;/a&gt;，并由此牵扯出一套方法论；二是你的数据你做主，一切笔记皆本地 markdown 文件。你拥有完全的掌控权，即便以后不用它，也很容易迁移到别的软件。对个人永久免费（付费版提供笔记同步、发布服务）。可玩性很强，太过知名，教程软文一搜一大把，还须记住记住本心为宜：我最初是为什么要用它来着？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="锁屏"&gt;锁屏&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://tools.suckless.org/slock/"&gt;slock&lt;/a&gt;: suckless 出品，极简的锁屏软件。简单到什么程度呢？配置文件都没有，直接下源码改头文件来&lt;a href="https://github.com/guyueshui/slock"&gt;配置&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="vscode-插件"&gt;VSCode 插件&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ code --list-extensions
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;bungcip.better-toml
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;tomoki1207.pdf
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;huacnlee.autocorrect &lt;span class="c1"&gt;# 修正中英混合排版的问题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;huizhou.githd &lt;span class="c1"&gt;# git history, blame on single file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;mhutchie.git-graph &lt;span class="c1"&gt;# git graph&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;KylinIDETeam.cmake-intellisence
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;llvm-vs-code-extensions.vscode-clangd &lt;span class="c1"&gt;# c++ dev&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;twxs.cmake &lt;span class="c1"&gt;# cmake syntax support&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;vadimcn.vscode-lldb &lt;span class="c1"&gt;# c++ debug&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;vscodevim.vim
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;VSCode C++ 开发配置参考：&lt;/p&gt;</description></item><item><title>Brief Introduction to Shell Script</title><link>https://guyueshui.github.io/post/shell-intro/</link><pubDate>Fri, 22 Nov 2019 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/shell-intro/</guid><description>&lt;p&gt;This article is mainly refered to &amp;ldquo;The Linux Command Line&amp;rdquo;&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;. I just take
some most important things out of the book.&lt;/p&gt;
&lt;h2 id="expansion"&gt;Expansion&lt;/h2&gt;
&lt;p&gt;Each time you type a command line and press the &lt;kbd&gt;Enter&lt;/kbd&gt; key, bash
performs several processes upon the text before it carries out your command.
Just look an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;[&lt;/span&gt;me@linuxbox ~&lt;span class="o"&gt;]&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Desktop Documents ls-output.txt Music Pictures Public Templates Videos
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Why not display an asterisk? That&amp;rsquo;s &lt;strong&gt;expansion&lt;/strong&gt;! &lt;code&gt;*&lt;/code&gt; &lt;em&gt;expands&lt;/em&gt; to all files in
current directory.&lt;/p&gt;</description></item><item><title>Nueral Network Learning Notes</title><link>https://guyueshui.github.io/post/nn-notes/</link><pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/nn-notes/</guid><description>&lt;p&gt;Hello here.&lt;/p&gt;
&lt;h2 id="cnn"&gt;CNN&lt;/h2&gt;
&lt;h3 id="conv-layer"&gt;Conv Layer&lt;/h3&gt;
&lt;p&gt;Conv Layer is usually decreasing the input size, i.e., the output size may less or equal than input.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;take a volume as input: height x weight x depth, e.g., 32x32x3. Typically think an image having three channels: R, G, B.&lt;/li&gt;
&lt;li&gt;a filter has the same depth as the input volume, e.g., 5x5x3 (since the filter always has a same depth as input vloume, the depth of the filter is sometimes omitted).&lt;/li&gt;
&lt;li&gt;each filter convolving with the input will produce an activation map, two filters will produce two, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result of the convolution at each location is just a scalar number (the result of taking a dot product between the filter and a small chunk of the image, i.e., $5\times 5 \times 3 = 75$-dimensional dot product + bias: $w^\top x + b$), which totally yields a 2D matrix (called &lt;strong&gt;activation map&lt;/strong&gt;) as the filter sliding over the image. For example, 32x32x3 image convolved by 5x5x3 filter will yield a 28x28 activation map.&lt;/p&gt;</description></item><item><title>服务端开发预备知识</title><link>https://guyueshui.github.io/post/server-develop-preliminaries/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/server-develop-preliminaries/</guid><description>&lt;h2 id="操作系统"&gt;操作系统&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;摘自《程序员面试白皮书》&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id="进程-vs线程"&gt;进程 vs.线程&lt;/h3&gt;
&lt;p&gt;进程（process）与线程（thread）最大的区别是进程拥有自己的地址空间，某进程内的线程对于其他的进程不可见，即进程 A 不能通过传地址的方式直接读写进程 B 的存储区域。进程之间的通信需要通过进程间通信（Inter-process communication, IPC）。与之相对的，同一进程的各线程间可以直接通过传递地址或全局变量的方式传递信息。&lt;/p&gt;</description></item><item><title>设计模式学习笔记</title><link>https://guyueshui.github.io/post/design-pattern-notes/</link><pubDate>Mon, 02 Sep 2019 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/design-pattern-notes/</guid><description>&lt;p&gt;如无特殊声明：本文所有 UML 图均出自《图说设计模式》。在此特别鸣谢！&lt;/p&gt;
&lt;h2 id="singleton"&gt;Singleton&lt;/h2&gt;
&lt;p&gt;单例模式解决了全局变量的问题，全局只能创建一个实例，保证任何请求该实例的调用均返回同一个对象，保证不会被意外析构。&lt;/p&gt;</description></item><item><title>多线程学习笔记</title><link>https://guyueshui.github.io/post/concurrent-programming/</link><pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/concurrent-programming/</guid><description>&lt;p&gt;开一篇多线程学习笔记，记录下在实习过程中遇到的一些简单问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：这是一篇以学习笔记，难免有误，主要写给自己参考。请酌情判别，如有错误，也欢迎指正！&lt;/p&gt;</description></item><item><title>C++ 学习笔记</title><link>https://guyueshui.github.io/post/cpp-learn/</link><pubDate>Wed, 28 Aug 2019 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/cpp-learn/</guid><description>&lt;p&gt;诚如是，Life is too short to learn c++. 此篇记录一些我在学习 cpp 过程中遇到的一些知识点，仅作记录并梳理之效。里面可能会有大量参考其他网络博客，如有侵权，请联系我删除之。&lt;/p&gt;
&lt;h2 id="reactor-vs-proactor"&gt;Reactor v.s. Proactor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;epll/wait: reactor 模式，不停轮询，发现有事做，就做！&lt;/li&gt;
&lt;li&gt;asio: proactor 模式，先注册好事件，如果事情发生了，通过回调函数处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="几个常用的宏"&gt;几个常用的宏&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__func__&lt;/code&gt;: name of an function, exists in C99/C++11 (&lt;code&gt;__FUNCTION__&lt;/code&gt; is non standard)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__LINE__&lt;/code&gt;: line number of the code&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__FILE__&lt;/code&gt;: filename of the file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__DATE__&lt;/code&gt; and &lt;code&gt;__TIME__&lt;/code&gt;: as you wish&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="不要在-ctor-里调用虚函数"&gt;不要在 ctor 里调用虚函数&lt;/h2&gt;
&lt;p&gt;总结来说：基类部分在派生类部分之前被构造，当基类构造函数执行时派生类中的数据成员还没被初始化。如果基类构造函数中的虚函数调用被解析成调用派生类的虚函数，而派生类的虚函数中又访问到未初始化的派生类数据，将导致程序出现一些未定义行为和 bug。&lt;/p&gt;
&lt;p&gt;ctor 应该设计的尽量简单，确保对象可以被正确构造。在 ctor 中调用本类的非静态成员都是不安全的，因为他们还没被构造，而有些成员是依赖对象的，而此时对象还没有被成功构造。&lt;/p&gt;
&lt;h2 id="ctor-不能是虚函数"&gt;ctor 不能是虚函数&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;从存储空间角度：虚函数对应一个 vtable（虚函数表），这大家都知道，可是这个 vtable 其实是存储在对象的内存空间的。问题出来了，如果构造函数是虚的，就需要通过 vtable 来调用，可是对象还没有实例化，也就是内存空间还没有，无法找到 vtable，所以构造函数不能是虚函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从使用角度：虚函数主要用于在信息不全的情况下，能使重载的函数得到对应的调用。构造函数本身就是要初始化实例，那使用虚函数也没有实际意义呀。所以构造函数没有必要是虚函数。
虚函数的作用在于通过父类的指针或者引用来调用它的时候能够变成调用子类的那个成员函数。而构造函数是在创建对象时自动调用的，不可能通过父类的指针或者引用去调用，因此也就规定构造函数不能是虚函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;构造函数不需要是虚函数，也不允许是虚函数，因为创建一个对象时我们总是要明确指定对象的类型，尽管我们可能通过实验室的基类的指针或引用去访问它。但析构却不一定，我们往往通过基类的指针来销毁对象。这时候如果析构函数不是虚函数，就不能正确识别对象类型从而不能正确调用析构函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;——————————————————
版权声明：本文为 CSDN 博主「cainiao000001」的原创文章，遵循 CC 4.0 by-sa 版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/cainiao000001/article/details/81603782&lt;/p&gt;
&lt;h2 id="虚函数的工作原理"&gt;虚函数的工作原理&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://zhuanlan.zhihu.com/p/60543586"&gt;https://zhuanlan.zhihu.com/p/60543586&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;C++ 规定了虚函数的行为，但将实现方法留给了编译器的作者。不需要知道实现方法也可以很好的使用虚函数，但了解虚函数的工作原理有助于更好地理解概念。&lt;/p&gt;
&lt;p&gt;通常，编译器处理虚函数的方法是：给每个对象添加一个隐藏成员。隐藏成员中保存了一个指向函数地址数组的指针。&lt;/p&gt;
&lt;p&gt;这种数组称为虚函数表（Virtual Function Table, vtbl）。&lt;/p&gt;
&lt;p&gt;虚函数表是一个数组，数组的元素是指针，指针指的是虚函数的地址。&lt;/p&gt;
&lt;p&gt;具有虚函数的类的实例，都会在头部存一个指向虚函数表的指针。&lt;/p&gt;
&lt;h2 id="常见类型所占空间大小"&gt;常见类型所占空间大小&lt;/h2&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th&gt;TYPE&lt;/th&gt;
 &lt;th style="text-align: right"&gt;Bytes&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td&gt;(unsigned) int&lt;/td&gt;
 &lt;td style="text-align: right"&gt;4&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;(unsigned) short&lt;/td&gt;
 &lt;td style="text-align: right"&gt;2&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;(unsigned) long&lt;/td&gt;
 &lt;td style="text-align: right"&gt;8&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;float&lt;/td&gt;
 &lt;td style="text-align: right"&gt;4&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;double&lt;/td&gt;
 &lt;td style="text-align: right"&gt;8&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;long double&lt;/td&gt;
 &lt;td style="text-align: right"&gt;16&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;(unsigned) char&lt;/td&gt;
 &lt;td style="text-align: right"&gt;1&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;bool&lt;/td&gt;
 &lt;td style="text-align: right"&gt;1&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;指针占几个字节 指针即为地址，指针几个字节跟语言无关，而是跟系统的寻址能力有关，譬如以前是 16 为地址，指针即为 2 个字节，现在一般是 32 位系统，所以是 4 个字节，以后 64 位，则就为 8 个字节。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: 类成员函数指针一般为普通指针的两倍大小。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;literal &lt;code&gt;5.0&lt;/code&gt;类型为&lt;code&gt;double&lt;/code&gt;，&lt;code&gt;5.0f&lt;/code&gt;类型为&lt;code&gt;float&lt;/code&gt;。不加&lt;code&gt;f&lt;/code&gt;后缀默认&lt;code&gt;double&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="静态成员的初始化"&gt;静态成员的初始化&lt;/h2&gt;
&lt;p&gt;当一个类包含静态成员时，最好的做法是在类中声明，在类外初始化。由于静态成员是所有对象共享的，如果在类内初始化，则每个对象构造时，都要执行一遍静态成员的初始化，这无疑是一种浪费。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;233&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;str_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;done_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;str_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;hello, i am static&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="析构函数的调用时机"&gt;析构函数的调用时机&lt;/h2&gt;
&lt;p&gt;The destructor is called whenever an object&amp;rsquo;s lifetime ends, which includes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;program termination, for objects with static storage duration&lt;/li&gt;
&lt;li&gt;thread exit, for objects with thread-local storage duration&lt;/li&gt;
&lt;li&gt;end of scope, for objects with automatic storage duration and for temporaries whose life was extended by binding to reference&lt;/li&gt;
&lt;li&gt;delete-expressin, for objects with dynamic storage duration&lt;/li&gt;
&lt;li&gt;end of the full expression, for nameless temporaries&lt;/li&gt;
&lt;li&gt;stack unwinding (栈回溯), for objects with automatic storage duration when an exception escapes their block, uncaught.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cf. &lt;a href="https://en.cppreference.com/w/cpp/language/destructor"&gt;https://en.cppreference.com/w/cpp/language/destructor&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="常量"&gt;常量&lt;/h2&gt;
&lt;h3 id="literal-constants"&gt;Literal constants&lt;/h3&gt;
&lt;p&gt;字面值常量
Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/literals/"&gt;https://www.learncpp.com/cpp-tutorial/literals/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="symbolic-constants"&gt;Symbolic constants&lt;/h3&gt;
&lt;p&gt;符号常量
Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/const-constexpr-and-symbolic-constants/"&gt;https://www.learncpp.com/cpp-tutorial/const-constexpr-and-symbolic-constants/&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Const variables must be initialized&lt;/li&gt;
&lt;li&gt;Function parameters for arguments passed by value should not be made const.&lt;/li&gt;
&lt;li&gt;Don’t use const with return by value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Runtime vs compile-time constants&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Runtime constants are constants whose initialization values can only be resolved at runtime (when your program is running). The following are examples of runtime constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;printInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// x is a runtime constant because the value isn&amp;#39;t known until the program is run
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;Enter your age: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;{};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cin&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;usersAge&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// usersAge is a runtime constant because the value isn&amp;#39;t known until the program is run
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;Your age is: &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;printInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Compile-time constants are constants whose initialization values can be determined at compile-time (when your program is compiling). The following are examples of compile-time constants:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;gravity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mf"&gt;9.8&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// the compiler knows at compile-time that gravity will have value 9.8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// the compiler can resolve this at compiler time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Compile-time constants enable the compiler to perform optimizations that aren’t available with runtime constants. For example, whenever gravity is used, the compiler can simply substitute the identifier gravity with the literal double 9.8.&lt;/p&gt;
&lt;p&gt;To help provide more specificity, C++11 introduced the keyword &lt;code&gt;constexpr&lt;/code&gt;, which ensures that a constant must be a compile-time constant.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Any variable that should not be modifiable after initialization and whose initializer is known at compile-time should be declared as &lt;code&gt;constexpr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Any variable that should not be modifiable after initialization and whose initializer is not known at compile-time should be declared as &lt;code&gt;const&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Note that literals are also implicitly constexpr, as the value of a literal is known at compile-time.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;constant expression&lt;/strong&gt; is an expression that can be evaluated at compile-time. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 3 + 4 evaluated at compile-time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In the above program, because the literal values 3 and 4 are known at compile-time, the compiler can evaluate the expression 3 + 4 at compile-time and substitute in the resulting value 7. That makes the code faster because 3 + 4 no longer has to be calculated at runtime.&lt;/p&gt;
&lt;p&gt;Constexpr variables can also be used in constant expressions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;	&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// x + y evaluated at compile-time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;	&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In the above example, because x and y are constexpr, the expression x + y is a constant expression that can be evaluated at compile-time. Similar to the literal case, the compiler can substitute in the value 7.&lt;/p&gt;
&lt;h3 id="object-like-preprocessor-macros-vs-symbolic-constants"&gt;Object-like preprocessor macros v.s. symbolic constants&lt;/h3&gt;
&lt;p&gt;Object-like macro has the form:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define identifier substitution_text
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Whenever the preprocessor encounters this directive, any further occurrence of &lt;em&gt;identifier&lt;/em&gt; is replaced by &lt;em&gt;substitution_text&lt;/em&gt;. The identifier is traditionally typed in all capital letters, using underscores to represent spaces.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Avoid using #define to create symbolic constants macros. Use const or constexpr variables instead.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Macros can have naming conflicts with normal code. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;#34;someheader.h&amp;#34;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;beta&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If someheader.h happened to #define a macro named beta, this simple program would break, as the preprocessor would replace the int variable beta’s name with whatever the macro’s value was. This is normally avoided by using all caps for macro names, but it can still happen.&lt;/p&gt;
&lt;h3 id="using-symbolic-constants-throughout-a-multi-file-program"&gt;Using symbolic constants throughout a multi-file program&lt;/h3&gt;
&lt;p&gt;Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/sharing-global-constants-across-multiple-files-using-inline-variables/"&gt;https://www.learncpp.com/cpp-tutorial/sharing-global-constants-across-multiple-files-using-inline-variables/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="内存布局"&gt;内存布局&lt;/h2&gt;
&lt;h3 id="结构体"&gt;结构体&lt;/h3&gt;
&lt;p&gt;C++ 规范在“结构”上使用了和 C 相同的，简单的内存布局原则：成员变量按其被声明的顺序排列，按具体实现所规定的对齐原则在内存地址上对齐。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;S&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// memory location #1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nl"&gt;b&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// memory location #2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nl"&gt;c&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// memory location #2 (continued)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nl"&gt;d&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// memory location #3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nl"&gt;ee&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// memory location #4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// The object &amp;#39;obj&amp;#39; consists of 4 separate memory locations
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;类的静态成员不占用类的空间，静态成员在程序数据段中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="对齐"&gt;对齐&lt;/h3&gt;
&lt;p&gt;Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/object-sizes-and-the-sizeof-operator/#comment-563585"&gt;https://www.learncpp.com/cpp-tutorial/object-sizes-and-the-sizeof-operator/#comment-563585&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Cf. &lt;a href="http://www.catb.org/esr/structure-packing/"&gt;http://www.catb.org/esr/structure-packing/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="模板"&gt;模板&lt;/h2&gt;
&lt;h3 id="重载与特化"&gt;重载与特化&lt;/h3&gt;
&lt;p&gt;从编译到函数模板的调用，编译器必须在非模板重载、模板重载和模板重载的特化间决定。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;span class="lnt"&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #1：模板重载
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #2：模板重载
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #3：非模板重载
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #4： #1 的特化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 调用 #1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 调用 #2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 调用 #3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// 调用 #4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;注意只有非模板和初等模板重载参与重载决议。特化不是重载，且不受考虑。只有在重载决议选择最佳匹配初等函数模板后，才检验其特化以查看何为最佳匹配。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #1：所有类型的重载
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #2：为指向 int 的指针特化 #1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;template&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// #3：所有指针类型的重载
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="c1"&gt;// 调用 #3，即使通过 #1 的特化会是完美匹配
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;即重载的优先级要高于特化。&lt;/p&gt;
&lt;p&gt;关于模板函数重载的更多内容，参考 &lt;a href="https://en.cppreference.com/w/cpp/language/function_template"&gt;function_template&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id="预编译"&gt;预编译&lt;/h2&gt;
&lt;p&gt;Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/introduction-to-the-preprocessor/"&gt;https://www.learncpp.com/cpp-tutorial/introduction-to-the-preprocessor/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="include"&gt;&lt;code&gt;#include&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;When you #include a file, the preprocessor replaces the #include directive with the contents of the included file. The included contents are then preprocessed (along with the rest of the file), and then compiled.&lt;/p&gt;
&lt;h3 id="macro-defines"&gt;Macro defines&lt;/h3&gt;
&lt;p&gt;The #define directive can be used to create a macro. In C++, a macro is a rule that defines how input text is converted into replacement output text.&lt;/p&gt;
&lt;p&gt;There are two basic types of macros: &lt;em&gt;object-like macros&lt;/em&gt;, and &lt;em&gt;function-like macros&lt;/em&gt;.
Object-like macros can be defined in one of two ways:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define identifier
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define identifier substitution_text
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="object-like-macros-dont-affect-other-preprocessor-directives"&gt;Object-like macros don’t affect other preprocessor directives&lt;/h3&gt;
&lt;p&gt;结论：宏展开在预编译指令 (Preprocessor directives) 无效。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define PRINT_JOE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#ifdef PRINT_JOE &lt;/span&gt;&lt;span class="c1"&gt;// 此处会否将&amp;#39;PRINT_JOE&amp;#39;替换为空呢？
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Macros only cause text substitution for normal code. Other preprocessor commands are ignored. Consequently, the PRINT_JOE in #ifdef PRINT_JOE is left alone.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define FOO 9 &lt;/span&gt;&lt;span class="c1"&gt;// Here&amp;#39;s a macro substitution
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#ifdef FOO &lt;/span&gt;&lt;span class="c1"&gt;// This FOO does not get replaced because it’s part of another preprocessor directive
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;FOO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// This FOO gets replaced with 9 because it&amp;#39;s part of the normal code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In actuality, the output of the preprocessor contains no directives at all &amp;ndash; they are all resolved/stripped out before compilation, because the compiler wouldn’t know what to do with them.&lt;/p&gt;
&lt;h3 id="the-scope-of-defines"&gt;The scope of defines&lt;/h3&gt;
&lt;p&gt;Once the preprocessor has finished, all defined identifiers from that file are discarded. &lt;strong&gt;This means that directives are only valid from the point of definition to the end of the file in which they are defined&lt;/strong&gt;. Directives defined in one code file do not have impact on other code files in the same project.&lt;/p&gt;
&lt;p&gt;宏定义仅在本文件有效，一旦预编译阶段结束，所有宏都将失效。因为，预编译就是将所有的预编译指令都处理掉，该替换的替换（宏展开），该选择的选择，该丢弃的丢弃（条件编译），然后交给编译器去编译，谨记：编译器是读不懂预编译指令的！&lt;/p&gt;
&lt;p&gt;Consider the following example:&lt;/p&gt;
&lt;p&gt;function.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#ifdef PRINT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;Printing!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#ifndef PRINT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;Not printing!&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;main.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;span class="lnt"&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// forward declaration for function doSomething()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#define PRINT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The above program will print:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Not printing!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Even though PRINT was defined in main.cpp, that doesn’t have any impact on any of the code in function.cpp (PRINT is only #defined from the point of definition to the end of main.cpp). This will be of consequence when we discuss header guards in a future lesson.&lt;/p&gt;
&lt;h2 id="header-files"&gt;Header files&lt;/h2&gt;
&lt;p&gt;Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/header-files/"&gt;https://www.learncpp.com/cpp-tutorial/header-files/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于多文件项目，文件是单独编译的。要想调用一个自定义函数，linker 必须能找到这个函数在哪里定义。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// forward declaration
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// add(3, 5);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;上述文件是可以编译通过的，因为没有发生对&lt;code&gt;add&lt;/code&gt;的调用，所以 linker 不会去找&lt;code&gt;add&lt;/code&gt;的定义（当然如果要找也找不到）。&lt;/p&gt;
&lt;p&gt;但是如果某处发起了对&lt;code&gt;add&lt;/code&gt;的调用（例如去掉注释），那么上述程序在 link 阶段会报错：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;yychi@~&amp;gt; clang test_linker.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;/usr/bin/ld: /tmp/test_linker-e1bb8b.o: in &lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;main&lt;span class="s1"&gt;&amp;#39;:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s1"&gt;test_linker.cpp:(.text+0x1a): undefined reference to `add(int, int)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;clang-13: error: linker &lt;span class="nb"&gt;command&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; code &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;use -v to see invocation&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在多文件编程时，往往需要 forawrd declaration，这些前置声明必须在其他某个地方被定义且只被定义一次。这样，linker 才能正确的完成链接。任何重复定义或未定义都会在 link 阶段报错。&lt;/p&gt;
&lt;p&gt;考虑如下例子：&lt;/p&gt;
&lt;p&gt;add.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;main.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;z=%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在编译 main.cpp 的时候，因为有&lt;code&gt;add&lt;/code&gt;的前置声明，所以可以通过。但为了 link 的时候能够找到&lt;code&gt;add&lt;/code&gt;的定义，add.cpp 必须也被编译，所以正确的编译方式应该是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ clang main.cpp add.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id="use-of-header-files"&gt;Use of header files&lt;/h3&gt;
&lt;p&gt;从上面的论述我们隐约可见，在多文件编程中，我们可能会大量的使用前置声明（forward declaration），一旦文件多起来，这将非常枯燥。所以头文件的出现就是为了解决这个问题：把所有的声明放在一起。&lt;/p&gt;
&lt;p&gt;Let’s write a header file to relieve us of this burden. Writing a header file is surprisingly easy, as header files only consist of two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A header guard.&lt;/li&gt;
&lt;li&gt;The actual content of the header file, which should be the forward declarations for all of the identifiers we want other files to be able to see.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;add.h:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// 1) We really should have a header guard here, but will omit it for simplicity (we&amp;#39;ll cover header guards in the next lesson)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// 2) This is the content of the .h file, which is where the declarations go
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// function prototype for add.h -- don&amp;#39;t forget the semicolon!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;main.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;#34;add.h&amp;#34;&lt;/span&gt;&lt;span class="cp"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Insert contents of add.h at this point. Note use of double quotes here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;The sum of 3 and 4 is &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;add.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;#34;add.h&amp;#34;&lt;/span&gt;&lt;span class="cp"&gt; &lt;/span&gt;&lt;span class="c1"&gt;// Insert contents of add.h at this point. Note use of double quotes here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;When the preprocessor processes the &lt;code&gt;#include &amp;quot;add.h&amp;quot;&lt;/code&gt; line, it copies the contents of &lt;em&gt;add.h&lt;/em&gt; into the current file at that point. Because our &lt;em&gt;add.h&lt;/em&gt; contains a forward declaration for function &lt;em&gt;add&lt;/em&gt;, that forward declaration will be copied into &lt;em&gt;main.cpp&lt;/em&gt;. The end result is a program that is functionally the same as the one where we manually added the forward declaration at the top of &lt;em&gt;main.cpp&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Consequently, our program will compile and link correctly.
&lt;img src="https://www.learncpp.com/images/CppTutorial/Section1/IncludeHeader.png?ezimgfmt=rs:647x377/rscb2/ng:webp/ngcb2" alt=""&gt;&lt;/p&gt;
&lt;h3 id="two-wrong-cases"&gt;Two wrong cases&lt;/h3&gt;
&lt;p&gt;&lt;img src="wrong_header.png" alt="header has function definition"&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，会产生一个重复定义的错误。由于 add.h 中包含了函数定义，而非前置声明。编译 main.cpp 的时候，add.h 中的代码插入到 main.cpp 中，产生一次&lt;code&gt;add&lt;/code&gt;函数的定义。同理，编译 add.cpp 的时候也定义了一次&lt;code&gt;add&lt;/code&gt;函数。link 阶段会发生歧义，以致报错。&lt;/p&gt;
&lt;p&gt;此时如果不编译 add.cpp 其实是可行的：
&lt;img src="header2.png" alt="compile main.cpp only"&gt;&lt;/p&gt;
&lt;p&gt;但谁又能保证只有一个文件&lt;code&gt;#include &amp;quot;add.h&amp;quot;&lt;/code&gt;呢？所以头文件中应该只包含声明，而不应该包含实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The primary purpose of a header file is to propagate declarations to code files.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Key insight: Header files allow us to put declarations in one location and then import them wherever we need them. This can save a lot of typing in multi-file programs.&lt;/p&gt;
&lt;p&gt;Header files should generally not contain function and variable definitions, so as not to violate the one definition rule. An exception is made for symbolic constants (which we cover in lesson &lt;a href="https://www.learncpp.com/cpp-tutorial/const-constexpr-and-symbolic-constants/"&gt;4.15 &amp;ndash; Symbolic constants: const and constexpr variables&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;标准库自动链接&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：clang 不会自动链接，需要手动链接
&lt;code&gt;clang main.cpp -lstdc++&lt;/code&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When it comes to functions and variables, it’s worth keeping in mind that header files typically only contain function and variable declarations, not function and variable definitions (otherwise a violation of the one definition rule could result). std::cout is forward declared in the iostream header, but defined as part of the C++ standard library, which is automatically linked into your program during the linker phase.&lt;/p&gt;
&lt;p&gt;&lt;img src="cout.png" alt="cout"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The #include order of header files&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/header-files/"&gt;https://www.learncpp.com/cpp-tutorial/header-files/&lt;/a&gt; for &amp;ldquo;the #inclue order of header files&amp;rdquo;.&lt;/p&gt;
&lt;h2 id="a-view-of-memory-and-fundamental-data-types-in-cpp"&gt;A view of memory and fundamental data types in cpp&lt;/h2&gt;
&lt;p&gt;Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/introduction-to-fundamental-data-types/"&gt;https://www.learncpp.com/cpp-tutorial/introduction-to-fundamental-data-types/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The smallest unit of memory is a binary digit (also called a bit), which can hold a value of 0 or 1. You can think of a bit as being like a traditional light switch &amp;ndash; either the light is off (0), or it is on (1). There is no in-between. If you were to look at a random segment of memory, all you would see is …011010100101010… or some combination thereof.&lt;/p&gt;
&lt;p&gt;Memory is organized into sequential units called memory addresses (or addresses for short). Similar to how a street address can be used to find a given house on a street, the memory address allows us to find and access the contents of memory at a particular location.&lt;/p&gt;
&lt;p&gt;Perhaps surprisingly, in modern computer architectures, each bit does not get its own unique memory address. This is because the number of memory addresses are limited, and the need to access data bit-by-bit is rare. Instead, each memory address holds 1 byte of data. A byte is a group of bits that are operated on as a unit. The modern standard is that a byte is comprised of 8 sequential bits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data types&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Because all data on a computer is just a sequence of bits, we use a data type (often called a “type” for short) to tell the compiler how to interpret the contents of memory in some meaningful way. You have already seen one example of a data type: the integer. When we declare a variable as an integer, we are telling the compiler “the piece of memory that this variable uses is going to be interpreted as an integer value”.&lt;/p&gt;
&lt;p&gt;When you give an object a value, the compiler and CPU take care of encoding your value into the appropriate sequence of bits for that data type, which are then stored in memory (&lt;strong&gt;remember: memory can only store bits&lt;/strong&gt;). For example, if you assign an integer object the value 65, that value is converted to the sequence of bits 0100 0001 and stored in the memory assigned to the object.&lt;/p&gt;
&lt;p&gt;Conversely, when the object is evaluated to produce a value, that sequence of bits is reconstituted back into the original value. Meaning that 0100 0001 is converted back into the value 65.&lt;/p&gt;
&lt;p&gt;Fortunately, the compiler and CPU do all the hard work here, so you generally don’t need to worry about how values get converted into bit sequences and back.&lt;/p&gt;
&lt;p&gt;All you need to do is pick a data type for your object that best matches your desired use.&lt;/p&gt;
&lt;p&gt;谨记：内存只能存 bit，只能寻址寻到 byte 这一层，如果数据按内存边界对齐，寻址会更快（一次读）。&lt;/p&gt;
&lt;p&gt;由于内存地址空间有限，且按 bit 寻址的场景很少，所以寻址单位一般是 byte。A byte is a group of bits that are operated on as a unit. The modern standard is that a byte is comprised of 8 sequential bits.&lt;/p&gt;
&lt;h3 id="移位"&gt;移位&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;span class="lnt"&gt;22
&lt;/span&gt;&lt;span class="lnt"&gt;23
&lt;/span&gt;&lt;span class="lnt"&gt;24
&lt;/span&gt;&lt;span class="lnt"&gt;25
&lt;/span&gt;&lt;span class="lnt"&gt;26
&lt;/span&gt;&lt;span class="lnt"&gt;27
&lt;/span&gt;&lt;span class="lnt"&gt;28
&lt;/span&gt;&lt;span class="lnt"&gt;29
&lt;/span&gt;&lt;span class="lnt"&gt;30
&lt;/span&gt;&lt;span class="lnt"&gt;31
&lt;/span&gt;&lt;span class="lnt"&gt;32
&lt;/span&gt;&lt;span class="lnt"&gt;33
&lt;/span&gt;&lt;span class="lnt"&gt;34
&lt;/span&gt;&lt;span class="lnt"&gt;35
&lt;/span&gt;&lt;span class="lnt"&gt;36
&lt;/span&gt;&lt;span class="lnt"&gt;37
&lt;/span&gt;&lt;span class="lnt"&gt;38
&lt;/span&gt;&lt;span class="lnt"&gt;39
&lt;/span&gt;&lt;span class="lnt"&gt;40
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdint&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;n_shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;a=&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;; b=&amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;left shift &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_shift&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34; bit(s) of a is: &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;left shift &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_shift&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34; bit(s) of b is: &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;right shift &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_shift&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34; bit(s) of a is: &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n_shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;right shift &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_shift&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34; bit(s) of b is: &amp;#34;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n_shift&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int32_t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0xffffffff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;------------&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0xbfffffff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; * Output on my machine:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;a=-1; b=4294967295
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;left shift 1 bit(s) of a is: -2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;left shift 1 bit(s) of b is: 4294967294
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;right shift 1 bit(s) of a is: -1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;right shift 1 bit(s) of b is: 2147483647
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;a=-1073741825; b=4294967295
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;left shift 1 bit(s) of a is: 2147483646
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;left shift 1 bit(s) of b is: 4294967294
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;right shift 1 bit(s) of a is: -536870913
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;right shift 1 bit(s) of b is: 2147483647
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;从内存连续 bit 来看，a 和 b 都是存了 4 byte 的 1，区别仅仅是 data type 不一样，导致了截然不同的结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;移位操作&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;右移
&lt;ol&gt;
&lt;li&gt;无符号右移，低位丢失高位补 0&lt;/li&gt;
&lt;li&gt;有符号右移，低位丢失，高位补符号位（正为 0，负为 1）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;左移：高位丢失，低位补 0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a 和 b 左移一位都得到：&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0xfffffffe: 如果是 int 解释为-2, unsigned int 解释为 4294967294=2^32 - 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;a 右移一位得到&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0xffffffff: 注意负数右移，高位补 1，int 解释为-1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;b 右移一位得到&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;0x7fffffff: 高位补 0, unsigned int 解释为 2147483647=2^31-1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，负的可能左移成正的，因此，有符号的移位是不安全的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;signed&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;// -1 is implicitly converted to 4294967295, and 4294967295 &amp;lt; 1 is false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;-1 is less than 1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;1 is less than -1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this statement executes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;NOTE:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注意无符号数相减得负数会导致溢出&lt;/li&gt;
&lt;li&gt;usigned 和&lt;code&gt;--&lt;/code&gt;运算符，可能减至负数溢出&lt;/li&gt;
&lt;li&gt;除非确定变量值非负，否则尽量避免使用 unsigned&lt;/li&gt;
&lt;li&gt;切忌不要在数学计算中混用 unsigned 和 signed，此时 signed 会隐式转换为 unsigned&lt;/li&gt;
&lt;li&gt;unsigned numbers are preferred when dealing with bit manipulation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::int8_t&lt;/code&gt;和&lt;code&gt;std::uint8_t&lt;/code&gt;可能知识&lt;code&gt;char&lt;/code&gt;和&lt;code&gt;unsigned char&lt;/code&gt;的别名，可能有坑（参考：https://www.learncpp.com/cpp-tutorial/introduction-to-type-conversion-and-static_cast/）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Best practice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Favor signed numbers over unsigned numbers for holding quantities (even quantities that should be non-negative) and mathematical operations. Avoid mixing signed and unsigned numbers.&lt;/p&gt;
&lt;h3 id="字节序"&gt;字节序&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;span class="lnt"&gt;21
&lt;/span&gt;&lt;span class="lnt"&gt;22
&lt;/span&gt;&lt;span class="lnt"&gt;23
&lt;/span&gt;&lt;span class="lnt"&gt;24
&lt;/span&gt;&lt;span class="lnt"&gt;25
&lt;/span&gt;&lt;span class="lnt"&gt;26
&lt;/span&gt;&lt;span class="lnt"&gt;27
&lt;/span&gt;&lt;span class="lnt"&gt;28
&lt;/span&gt;&lt;span class="lnt"&gt;29
&lt;/span&gt;&lt;span class="lnt"&gt;30
&lt;/span&gt;&lt;span class="lnt"&gt;31
&lt;/span&gt;&lt;span class="lnt"&gt;32
&lt;/span&gt;&lt;span class="lnt"&gt;33
&lt;/span&gt;&lt;span class="lnt"&gt;34
&lt;/span&gt;&lt;span class="lnt"&gt;35
&lt;/span&gt;&lt;span class="lnt"&gt;36
&lt;/span&gt;&lt;span class="lnt"&gt;37
&lt;/span&gt;&lt;span class="lnt"&gt;38
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; * This file test the endian of your machine:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; * big-endian or little-endian, by visiting
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; * the memory sequentially byte by byte of
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; * a intendly constructed integer.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;cstdint&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;using&lt;/span&gt; &lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// convert to char* so we can visit the memory byte by byte
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="c1"&gt;// print the value of each byte in ptr
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_ptr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;0x01020304&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="cm"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; * if it prints 4321, indicates 低位在前，对应 little-endian
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; * it it prints 1234, indicates 高位在前，对应 big-endian
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; * Output on my machine
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt;4321
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;字节序就是计算机存储数据的时候将低位数据存在低位地址还是高位地址。举个例子，数值 0x2211 使用两个字节储存：高位字节是 0x22，低位字节是 0x11。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大端字节序：高位字节在前，低位字节在后，这是人类读写数值的方法。&lt;/li&gt;
&lt;li&gt;小端字节序：低位字节在前，高位字节在后，即以 0x1122 形式储存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果太多记不住，至少要记住：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;字节序的概念：读一段内存从低位向高位读（从左往右），先读到高位字节还是低位字节&lt;/li&gt;
&lt;li&gt;符合人类读写数值的方法是大端序（big-endian）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;既然如此，我们要判断一台机器是 big-endian 还是 little-endian，只需要构造一端内存，按字节从低位地址向高位地址访问，看看低位地址存的是高位字节，还是低位字节即可。&lt;/p&gt;
&lt;p&gt;且看上述代码，构造了一个整数 0x01020304，然后通过将首地址转成&lt;code&gt;char*&lt;/code&gt;的方式去按字节读取内存中的值（这样做的目的是，&lt;code&gt;char*&lt;/code&gt;可以逐字节的读取内存；而&lt;code&gt;int*&lt;/code&gt;一次指针移动会移动&lt;code&gt;sizeof(int)&lt;/code&gt;个字节）。读出来如果是符合书写习惯的 1234，则表明机器是 big-endian，反之 little-endian.&lt;/p&gt;
&lt;p&gt;这也是一段内存的两种不同的解释方式，recall that &lt;strong&gt;Because all data on a computer is just a sequence of bits, we use a data type (often called a “type” for short) to tell the compiler how to interpret the contents of memory in some meaningful way&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id="链接linkage"&gt;链接（Linkage）&lt;/h2&gt;
&lt;p&gt;Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/internal-linkage/"&gt;https://www.learncpp.com/cpp-tutorial/internal-linkage/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Identifiers have another property named &lt;code&gt;linkage&lt;/code&gt;. An identifier’s &lt;strong&gt;linkage&lt;/strong&gt; determines whether other declarations of that name refer to the same object or not.&lt;/p&gt;
&lt;p&gt;Local variables have &lt;code&gt;no linkage&lt;/code&gt;, which means that each declaration refers to a unique object.&lt;/p&gt;
&lt;p&gt;Global variable and functions identifiers can have either &lt;code&gt;internal linkage&lt;/code&gt; or &lt;code&gt;external linkage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An identifier with &lt;strong&gt;internal linkage&lt;/strong&gt; can be seen and used within a single file, but it is not accessible from other files (that is, it is not exposed to the linker). This means that if two files have identically named identifiers with internal linkage, those identifiers will be treated as independent.&lt;/p&gt;
&lt;p&gt;To make a non-constant global variable internal, we use the static keyword.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;span class="lnt"&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// non-constant globals have external linkage by default, but can be given internal linkage via the static keyword
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// const globals have internal linkage by default
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_z&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// constexpr globals have internal linkage by default
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;To see it, we take&lt;/p&gt;
&lt;p&gt;a.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;main.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;glabal variable (g_x, g_y, g_z) is (%d, %d, %d)&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g_z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;if we compile only main.cpp, it works fine and outputs:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;glabal variable (g_x, g_y, g_z) is (222, 333, 444)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But if we compile both, it gets&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ clang main.cpp a.cpp
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;/usr/bin/ld: /tmp/a-ea4f54.o:&lt;span class="o"&gt;(&lt;/span&gt;.data+0x0&lt;span class="o"&gt;)&lt;/span&gt;: multiple definition of &lt;span class="sb"&gt;`&lt;/span&gt;g_x&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; /tmp/main-c44eb4.o:&lt;span class="o"&gt;(&lt;/span&gt;.data+0x0&lt;span class="o"&gt;)&lt;/span&gt;: first defined here
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;clang-13: error: linker &lt;span class="nb"&gt;command&lt;/span&gt; failed with &lt;span class="nb"&gt;exit&lt;/span&gt; code &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;use -v to see invocation&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As we sligtly modify main.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;glabal variable (g_x, g_y, g_z) is (%d, %d, %d)&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g_z&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;it&amp;rsquo;s compiled and linked properly with the output:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;glabal variable (g_x, g_y, g_z) is (22, 333, 444)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;noting that the &lt;code&gt;g_x&lt;/code&gt; has the value 22 which is defined in a.cpp, we find out the global non-const variable has external linkage. And the properly compilation and linking show that global const has internal linkage.&lt;/p&gt;
&lt;h3 id="external-linkage"&gt;External linkage&lt;/h3&gt;
&lt;p&gt;Cf. &lt;a href="https://www.learncpp.com/cpp-tutorial/external-linkage/"&gt;https://www.learncpp.com/cpp-tutorial/external-linkage/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;An identifier with &lt;strong&gt;external linkage&lt;/strong&gt; can be seen and used both from the file in which it is defined, and from other code files (via a forward declaration). In this sense, identifiers with external linkage are truly “global” in that they can be used anywhere in your program!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Functions have external linkage by default&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to call a function defined in another file, you must place a &lt;code&gt;forward declaration&lt;/code&gt; for the function in any other files wishing to use the function. &lt;u&gt;The forward declaration tells the compiler about the existence of the function, and the linker connects the function calls to the actual function definition.&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Global variables with external linkage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Global variables with external linkage are sometimes called &lt;strong&gt;external variables&lt;/strong&gt;. To make a global variable external (and thus accessible by other files), we can use the &lt;code&gt;extern&lt;/code&gt; keyword to do so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;span class="lnt"&gt;8
&lt;/span&gt;&lt;span class="lnt"&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// non-constant globals are external by default
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// const globals can be defined as extern, making them external
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;constexpr&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_z&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// constexpr globals can be defined as extern, making them external (but this is useless, see the note in the next section)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Non-const global variables are external by default (if used, the &lt;code&gt;extern&lt;/code&gt; keyword will be ignored).&lt;/p&gt;
&lt;p&gt;To actually use an external global variable that has been defined in another file, you also must place a &lt;code&gt;forward declaration&lt;/code&gt; for the global variable in any other files wishing to use the variable. For variables, creating a forward declaration is also done via the &lt;code&gt;extern&lt;/code&gt; keyword (with no initialization value).&lt;/p&gt;
&lt;p&gt;Here is an example of using a variable forward declaration:&lt;/p&gt;
&lt;p&gt;a.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// global variable definitions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// non-constant globals have external linkage by default
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt; &lt;span class="c1"&gt;// this extern gives g_y external linkage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;main.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this extern is a forward declaration of a variable named g_x that is defined somewhere else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;g_y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// this extern is a forward declaration of a const variable named g_y that is defined somewhere else
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;g_x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// prints 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Note that the &lt;code&gt;extern&lt;/code&gt; keyword has different meanings in different contexts. In some contexts, &lt;code&gt;extern&lt;/code&gt; means “give this variable external linkage”. In other contexts, &lt;code&gt;extern&lt;/code&gt; means “this is a forward declaration for an external variable that is defined somewhere else”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Scope&lt;/em&gt; determines where a variable is accessible. &lt;em&gt;Duration&lt;/em&gt; determines where a variable is created and destroyed. &lt;em&gt;Linkage&lt;/em&gt; determines whether the variable can be exported to another file or not.&lt;/p&gt;
&lt;h2 id="inline-function"&gt;Inline function&lt;/h2&gt;
&lt;p&gt;考虑如下场景，有一段代码很独立，适合抽成一个函数，但你又担心函数调用开销，此时 inline function 就是你的最佳选择。关于合适使用 inline function，下面这段话给了一定的意见：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For functions that are large and/or perform complex tasks, the overhead of the function call is typically insignificant compared to the amount of time the function takes to run. However, for small functions, the overhead costs can be larger than the time needed to actually execute the function’s code! In cases where a small function is called often, using a function can result in a significant performance penalty over writing the same code in-place.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Inline function 的好处包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有函数调用的开销&lt;/li&gt;
&lt;li&gt;编译器对展开后的代码有更大的优化空间（如常量替换）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;However, inline expansion has its own potential cost: if the body of the function being expanded takes more instructions than the function call being replaced, then each inline expansion will cause the executable to grow larger. Larger executables tend to be slower (due to not fitting as well in caches).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：inline 只是对编译器的一个建议，是否会真的展开取决于编译器的优化策略。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;However, in modern C++, the &lt;code&gt;inline&lt;/code&gt; keyword is no longer used to request that a function be expanded inline. There are quite a few reasons for this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;inline&lt;/code&gt; to request inline expansion is a form of premature optimization, and misuse could actually harm performance.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;inline&lt;/code&gt; keyword is just a hint &amp;ndash; the compiler is completely free to ignore a request to inline a function. This is likely to be the result if you try to inline a lengthy function! &lt;strong&gt;The compiler is also free to perform inline expansion of functions that do not use the &lt;code&gt;inline&lt;/code&gt; keyword&lt;/strong&gt; as part of its normal set of optimizations.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;inline&lt;/code&gt; keyword is defined at the wrong level of granularity. We use the &lt;code&gt;inline&lt;/code&gt; keyword on a function declaration, but inline expansion is actually determined per function call. It may be beneficial to expand some function calls and detrimental to expand others, and there is no syntax to affect this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：在 modern cpp 中，用 inline 修饰的不违反 ODR（one definition rule），因此可用于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;头文件中修饰常量作为 global const 的最佳方案 &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;头文件中修饰 constexpr 函数 &lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref"&gt;2&lt;/a&gt;&lt;/sup&gt; 使所有 include 该文件的源文件都能使用该函数，注意 constexpr 函数是默认 inline 的&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Allowing functions with a constexpr return type to be evaluated at either compile-time or runtime was allowed so that a single function can serve both cases. Otherwise, you’d need to have separate functions (a constexpr version and a non-constexpr version) &amp;ndash; and since return type isn’t considered in function overload resolution, you’d have to name the functions different things!&lt;/p&gt;
&lt;p&gt;A constexpr function that is eligible to be evaluated at compile-time will only be evaluated at compile-time if the return value is used where a constant expression is required. Otherwise, compile-time evaluation is not guaranteed.&lt;/p&gt;
&lt;p&gt;Thus, a constexpr function is better thought of as “can be used in a constant expression”, not “will be evaluated at compile-time”.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="unnamed-namespace"&gt;Unnamed namespace&lt;/h2&gt;
&lt;p&gt;An &lt;strong&gt;unnamed namespace&lt;/strong&gt; (also called an &lt;strong&gt;anonymous namespace&lt;/strong&gt;) is a namespace that is defined without a name, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;namespace&lt;/span&gt; &lt;span class="c1"&gt;// unnamed namespace
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;// can only be accessed in this file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;#34;v1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="c1"&gt;// we can call doSomething() without a namespace prefix
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All content declared in an unnamed namespace is treated as if it is part of the parent namespace.&lt;/li&gt;
&lt;li&gt;All identifiers inside an unnamed namespace are treated as if they had &lt;strong&gt;internal linkage&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;解决的问题：Unnamed namespaces will also keep user-defined types (something we’ll discuss in a later lesson) local to the file, something for which there is no alternative equivalent mechanism to do.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;About &lt;code&gt;switch&lt;/code&gt; clause&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Put another way, defining a variable without an initializer is just telling the compiler that the variable is now in scope from that point on. This happens at compile time, and doesn’t require the definition to actually be executed at runtime.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;calculate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;switch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;op&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;throw&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;invalid_arguments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#34;invalid operator&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id="pointer-to-functions"&gt;Pointer to functions&lt;/h2&gt;
&lt;p&gt;The syntax for creating a non-const function pointer is one of the ugliest things you will ever see in C++:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;// fcnPtr is a pointer to a function that takes no arguments and returns an integer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fcnPtr&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above snippet, fcnPtr is a pointer to a function that has no parameters and returns an integer. fcnPtr can point to any function that matches this type.&lt;/p&gt;
&lt;p&gt;To make a const function pointer, the const goes after the asterisk:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-cpp" data-lang="cpp"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;fcnPtr&lt;/span&gt;&lt;span class="p"&gt;)();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you put the const before the int, then that would indicate the function being pointed to would return a const int.&lt;/p&gt;</description></item><item><title>博客迁移记录</title><link>https://guyueshui.github.io/post/blog-trans/</link><pubDate>Sun, 25 Aug 2019 16:00:50 +0800</pubDate><guid>https://guyueshui.github.io/post/blog-trans/</guid><description>&lt;p&gt;终于还是干了！很早以前就有了这个想法，起初使用 &lt;a href="https://hexo.io"&gt;Hexo&lt;/a&gt; 搭的博客，折腾了一段时间，选了一个不错的主题 &lt;a href="https://github.com/Molunerfinn/hexo-theme-melody"&gt;Melody&lt;/a&gt;。一切都进行的很好，直到有一天又发现 &lt;a href="https://gohugo.io"&gt;Hugo&lt;/a&gt; 这么个东西，登时就忍不住了，不是说原来的不好，二十 Hugo 太特么快了，无论是渲染速度还是博客生成，几乎就像是在本地打开 html 一样。相比之下 Hexo 的生成速度就显得很慢了，思来想去，博客应该更多关注内容，之前那个配置的有些花哨了，现在换了 Hugo，也使用了一个比较简单的主题，相比之下更轻量，打开速度更快，以后就该专注于内容了。这里烧纸纪念下一下我之前的皮肤：&lt;/p&gt;</description></item><item><title>GDB 基本用法</title><link>https://guyueshui.github.io/post/basic-gdb-usages/</link><pubDate>Sun, 18 Aug 2019 16:14:24 +0000</pubDate><guid>https://guyueshui.github.io/post/basic-gdb-usages/</guid><description>&lt;p&gt;废话以后有时间再加。&lt;/p&gt;
&lt;p&gt;首先编译时开启调试选项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;g++ main.cpp -g -O0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;-O0&lt;/code&gt;指定编译器的优化级别为 0，即不优化。&lt;/p&gt;</description></item><item><title>位域结构体简介</title><link>https://guyueshui.github.io/post/bit-field-struct/</link><pubDate>Tue, 06 Aug 2019 20:43:02 +0000</pubDate><guid>https://guyueshui.github.io/post/bit-field-struct/</guid><description>&lt;p&gt;最近实习接触到一个新的知识点，C/C++ 的位域结构体。&lt;/p&gt;
&lt;p&gt;以下开始摘抄自：&lt;a href="https://www.cnblogs.com/dolphin0520/archive/2011/10/14/2212590.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;位段 (bit-field) 是以位为单位来定义结构体 (或联合体) 中的成员变量所占的空间。含有位段的结构体 (联合体) 称为位段结构。采用位段结构既能够节省空间，又方便于操作。&lt;/p&gt;</description></item><item><title>面试经历及笔记</title><link>https://guyueshui.github.io/post/interview-notes/</link><pubDate>Mon, 08 Jul 2019 20:14:17 +0000</pubDate><guid>https://guyueshui.github.io/post/interview-notes/</guid><description>&lt;p&gt;总结一下这几个月的面试经历中被问到的问题，虽说问得都很浅，但是，问深了我也不会呀！&lt;/p&gt;
&lt;h2 id="c-相关"&gt;C++ 相关&lt;/h2&gt;
&lt;p&gt;Q: &lt;code&gt;std::vector&lt;/code&gt; push_back 的复杂度是多少？
A: O(1), amortized constant.&lt;/p&gt;
&lt;p&gt;Q: vector 从 1 到 n push n 个元素，假设发生扩容时按两倍增长，写出复杂度关于 n 的表达式？
A: 不会。&lt;/p&gt;</description></item><item><title>Tf Quick Start</title><link>https://guyueshui.github.io/slide/tf-quick-start/</link><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/slide/tf-quick-start/</guid><description>&lt;h2 id="introduction-to-tensorflow"&gt;Introduction to TensorFlow&lt;/h2&gt;
&lt;p&gt;A Quick Start&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Yychi Fyu @SIST, ShanghaiTech&lt;/small&gt;&lt;/p&gt;
&lt;!-- .slide: data-background="" --&gt;
&lt;hr&gt;
&lt;h2 id="outline"&gt;Outline&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;TF Primitives
&lt;ul&gt;
&lt;li&gt;tensor&lt;/li&gt;
&lt;li&gt;graphs&lt;/li&gt;
&lt;li&gt;session&lt;/li&gt;
&lt;li&gt;variable&lt;/li&gt;
&lt;li&gt;placeholder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;An Example&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;


&lt;section data-shortcode-section&gt;
&lt;h3 id="high-level-overview"&gt;High-level overview&lt;/h3&gt;
&lt;p&gt;Computation Graph: The structure of TF.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;operators as nodes&lt;/li&gt;
&lt;li&gt;tensors as links&lt;/li&gt;
&lt;/ul&gt;
&lt;img src="https://s2.ax1x.com/2019/05/05/Ewocp4.png" width=300 alt="computation graph" /&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tensorflow&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;tf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;W&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constant&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;matmul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;W&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;Tensor(&amp;#34;add_5:0&amp;#34;, shape=(1, 1), dtype=int32)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above codes &amp;ldquo;describe&amp;rdquo; a computation graph:
&lt;img src="https://s2.ax1x.com/2019/05/05/EwLKXQ.png" alt=""&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;big&gt;How can we actually see a &lt;code&gt;tensor&lt;/code&gt;?&lt;/big&gt;&lt;/p&gt;</description></item><item><title>The Beauty of Recursion</title><link>https://guyueshui.github.io/post/the-beauty-of-recursion/</link><pubDate>Tue, 23 Apr 2019 09:08:28 +0000</pubDate><guid>https://guyueshui.github.io/post/the-beauty-of-recursion/</guid><description>&lt;p&gt;&lt;font color="red"&gt;Declaration: this article is in long time editing&amp;hellip;&lt;/font&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Here comes some beautiful recursive solutions to some problems.&lt;/p&gt;
&lt;h2 id="examples"&gt;Examples&lt;/h2&gt;
&lt;p&gt;Some of the problems have a very nice recursive structure, we can deal with them just using one step recursion.&lt;/p&gt;
&lt;h3 id="fibonacci-numbers"&gt;Fibonacci Numbers&lt;/h3&gt;
&lt;p&gt;The first comes very famous Fibonacci Numbers, which is a sequence of
0, 1, 1, 2, 3, 5, 8, 13 &amp;hellip;
The structure is easily captured, if we use $\text{fib}(n)$ to denote the $n^{\text{th}}$ Fibonacci Number (n is assumed to start from 0).
$$
\text{fib}(n) = \begin{cases}
n, &amp;amp;\text{ if } n \le 1 \newline
\text{fib}(n-1) + \text{fib}(n-2), &amp;amp;\text{ if } n &amp;gt; 1.
\end{cases}
$$
That is why we can write easily a procedure to compute the fibs. If we use MIT Scheme, we can write as follows:&lt;/p&gt;</description></item><item><title>神奇的位运算</title><link>https://guyueshui.github.io/post/%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</link><pubDate>Mon, 08 Apr 2019 10:35:16 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</guid><description>&lt;p&gt;In editing&amp;hellip;&lt;/p&gt;
&lt;h2 id="必备知识"&gt;必备知识&lt;/h2&gt;
&lt;p&gt;首先要对原码、反码、补码有一定理解，推荐阅读此文：https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html&lt;/p&gt;</description></item><item><title>A collection of some coding problems</title><link>https://guyueshui.github.io/post/coding-problems/</link><pubDate>Sun, 07 Apr 2019 19:31:59 +0000</pubDate><guid>https://guyueshui.github.io/post/coding-problems/</guid><description>&lt;h1 id="场景题"&gt;场景题&lt;/h1&gt;
&lt;h2 id="题一最高得分"&gt;题一：最高得分&lt;/h2&gt;
&lt;p&gt;一个长度为$N$的序列，玩家每次只能从头部或尾部拿数字，不能从中间拿。拿走的数字依次从左到右排列在自己面前。拿完$N$个数字之后，游戏结束。此时$N$个数字在玩家面前组成一个新的排列，这个数列每相邻两个数字之差的绝对值之和为玩家最终得分。假设玩家前面的$N$个数字从左到右标号为 $n_1,n_2, \dots, n_N$，则最终得分$S$的计算方式如下：
$$
S = \text{abs}(n_1-n_2) + \text{abs}(n_2-n_3) + \cdots + \text{abs}(n_{N-1} - n_N).
$$&lt;/p&gt;</description></item><item><title>瞎说 KMP 算法</title><link>https://guyueshui.github.io/post/%E7%9E%8E%E8%AF%B4kmp%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 04 Apr 2019 00:05:41 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%9E%8E%E8%AF%B4kmp%E7%AE%97%E6%B3%95/</guid><description>&lt;p&gt;前天做百度笔试，没想到居然出往年的题！哼！更惨的是出了我也不会！我以为只是一个简简单单的字符串匹配，没想到要动用这么难懂的算法。说起来算法导论上也有，只是之前没看到那里。所以，总结一下：我本有好多次机会学习它，然而一次都没有把握。:(&lt;/p&gt;</description></item><item><title>初尝 C++ 类设计</title><link>https://guyueshui.github.io/post/%E5%88%9D%E5%B0%9D-c-%E7%B1%BB%E8%AE%BE%E8%AE%A1/</link><pubDate>Tue, 02 Apr 2019 21:31:40 +0000</pubDate><guid>https://guyueshui.github.io/post/%E5%88%9D%E5%B0%9D-c-%E7%B1%BB%E8%AE%BE%E8%AE%A1/</guid><description>&lt;p&gt;最近在准备笔试，于是在各种网站上刷题嘛。期间做了百度某年的一道 &lt;a href="http://exercise.acmcoder.com/online/online_judge_ques?ques_id=3821&amp;amp;konwledgeId=40"&gt;编程题&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;小 B 最近对电子表格产生了浓厚的兴趣，她觉得电子表格很神奇，功能远比她想象的强大。她正在研究的是单元格的坐标编号，她发现表格单元一般是按列编号的，第 1 列编号为 A，第 2 列为 B，以此类推，第 26 列为 Z。之后是两位字符编号的，第 27 列编号为 AA，第 28 列为 AB，第 52 列编号为 AZ。之后则是三位、四位、五位……字母编号的，规则类似。&lt;/p&gt;</description></item><item><title>LeetCode: Sum of Two Integers</title><link>https://guyueshui.github.io/post/leetcode-sum-of-two-integers/</link><pubDate>Tue, 26 Mar 2019 14:53:51 +0000</pubDate><guid>https://guyueshui.github.io/post/leetcode-sum-of-two-integers/</guid><description>&lt;p&gt;记录一下 LeetCode 做的一道题。要求实现两个整数的加法，但不能使用内置的&lt;code&gt;+&lt;/code&gt;或&lt;code&gt;-&lt;/code&gt;. 原题地址：https://leetcode.com/problems/sum-of-two-integers/&lt;/p&gt;</description></item><item><title>浅谈 Logistic 回归</title><link>https://guyueshui.github.io/post/%E6%B5%85%E8%B0%88-logistic-%E5%9B%9E%E5%BD%92/</link><pubDate>Fri, 15 Mar 2019 22:59:39 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%B5%85%E8%B0%88-logistic-%E5%9B%9E%E5%BD%92/</guid><description>&lt;p&gt;In editing&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Logistic 回归属于分类模型！！！&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="从最小二乘说起"&gt;从最小二乘说起&lt;/h2&gt;
&lt;h2 id="线性回归"&gt;线性回归&lt;/h2&gt;
&lt;h2 id="概率解释"&gt;概率解释&lt;/h2&gt;
&lt;h2 id="sigmoid-函数的引入"&gt;Sigmoid 函数的引入&lt;/h2&gt;
&lt;p&gt;如果把我比作一张白纸，在我的知识储备中，现在只有线性回归。但是要处理分类问题，我该怎么办？没办法，先考虑一个二分类问题，$y \in {0,1}$，我们准备霸王硬上弓，用回归模型套上去！
$$
y = h_{\theta}(x)
$$&lt;/p&gt;</description></item><item><title>快速自定义 LaTeX 排版字体</title><link>https://guyueshui.github.io/post/%E8%B0%88%E8%B0%88-latex-%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</link><pubDate>Fri, 08 Mar 2019 15:41:10 +0000</pubDate><guid>https://guyueshui.github.io/post/%E8%B0%88%E8%B0%88-latex-%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E4%BD%93/</guid><description>&lt;h2 id="字体设置"&gt;字体设置&lt;/h2&gt;
&lt;p&gt;在导言区引入&lt;code&gt;fontspec&lt;/code&gt;包：&lt;code&gt;\usepackage{fontspec}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用如下命令自定义字体：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-tex" data-lang="tex"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;% 西文默认字体，排版主字体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="k"&gt;\setmainfont&lt;/span&gt;&lt;span class="nb"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;% 西文无称线字体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="k"&gt;\setsansfont&lt;/span&gt;&lt;span class="nb"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;% 西文等宽字体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="k"&gt;\setmonofont&lt;/span&gt;&lt;span class="nb"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;% 数学公式字体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="k"&gt;\setmathfont&lt;/span&gt;&lt;span class="nb"&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;% 中文主字体
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c"&gt;&lt;/span&gt;&lt;span class="k"&gt;\setCJKmainfont&lt;/span&gt;[
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; Path = fonts/zh&lt;span class="nb"&gt;_&lt;/span&gt;cn/ ,
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; BoldFont = HYQiHei-70S.ttf ,
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ItalicFont = HYKaiTiS.ttf ,
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; SmallCapsFont = HYQiHei-70S.ttf
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ]&lt;span class="nb"&gt;{&lt;/span&gt;HYQiHei-45S.ttf&lt;span class="nb"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;!-- more --&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:&lt;/p&gt;</description></item><item><title>Linux 使用指北</title><link>https://guyueshui.github.io/post/linux-%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E9%80%9F%E6%9F%A5/</link><pubDate>Thu, 07 Mar 2019 19:22:02 +0000</pubDate><guid>https://guyueshui.github.io/post/linux-%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF%E9%80%9F%E6%9F%A5/</guid><description>&lt;p&gt;本文主要引用 &lt;a href="https://liam.page/2016/11/06/Linux-Info-Cheatsheet/"&gt;Liam Huang&lt;/a&gt; 的博客。&lt;/p&gt;
&lt;h2 id="系统相关"&gt;系统相关&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;lsb_release -a &lt;span class="c1"&gt;# 查看操作系统版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;head -n &lt;span class="m"&gt;1&lt;/span&gt; /etc/issue &lt;span class="c1"&gt;# 查看操作系统版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;cat /proc/version &lt;span class="c1"&gt;# 查看操作系统内核信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;uname -a &lt;span class="c1"&gt;# 查看操作系统内核信息、CPU 信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;cat /proc/cpuinfo &lt;span class="c1"&gt;# 查看 CPU 信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;hostname &lt;span class="c1"&gt;# 查看计算机名字&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;env &lt;span class="c1"&gt;# 列出环境变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;lsmod &lt;span class="c1"&gt;# 列出加载的内核模块&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;uptime &lt;span class="c1"&gt;# 查看系统运行时间、负载、用户数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;cat /proc/loadavg &lt;span class="c1"&gt;# 查看系统负载&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item><item><title>《报任安书》</title><link>https://guyueshui.github.io/post/%E8%B0%88%E8%B0%88%E6%8A%A5%E4%BB%BB%E5%AE%89%E4%B9%A6/</link><pubDate>Thu, 07 Mar 2019 18:27:18 +0000</pubDate><guid>https://guyueshui.github.io/post/%E8%B0%88%E8%B0%88%E6%8A%A5%E4%BB%BB%E5%AE%89%E4%B9%A6/</guid><description>&lt;p&gt;太史公牛马走司马迁，再拜言。&lt;/p&gt;
&lt;p&gt;　　少卿足下：曩者辱赐书，教以慎于接物，推贤进士为务，意气勤勤恳恳。若望仆不相师，而用流俗人之言，仆非敢如此也。仆虽罢驽，亦尝侧闻长者之遗风矣。顾自以为身残处秽，动而见尤，欲益反损，是以独郁悒而无谁语。谚曰：“谁为为之？孰令听之？”盖钟子期死，伯牙终身不复鼓琴。何则？士为知己者用，女为说己者容。若仆大质已亏缺矣，虽材怀随和，行若由夷，终不可以为荣，适足以发笑而自点耳。&lt;/p&gt;</description></item><item><title>SICP Learning Notes</title><link>https://guyueshui.github.io/post/sicp-learning-notes/</link><pubDate>Thu, 21 Feb 2019 14:50:23 +0000</pubDate><guid>https://guyueshui.github.io/post/sicp-learning-notes/</guid><description>&lt;p&gt;当我们考察一门语言时，主要看三点&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;primitives：元操作是什么&lt;/li&gt;
&lt;li&gt;means of combinations：如何组合&lt;/li&gt;
&lt;li&gt;means of abstraction：如何抽象，构造更复杂的程序&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;数据和过程之间没有本质的区别&lt;/p&gt;</description></item><item><title>Useful Tricks</title><link>https://guyueshui.github.io/tricks/</link><pubDate>Thu, 17 Jan 2019 22:19:05 +0000</pubDate><guid>https://guyueshui.github.io/tricks/</guid><description>&lt;pre tabindex="0"&gt;&lt;code&gt; __ __ __ __ ____ ___ 
/\ \ /\ \ /\ \ __ /\ \ /\ _`\ /\_ \ 
\ `\`\\/&amp;#39;/__ __ ___\ \ \___ /\_\\ \/ ____ \ \ \L\ \//\ \ ___ __ 
 `\ `\ /&amp;#39;/\ \/\ \ /&amp;#39;___\ \ _ `\/\ \\/ /&amp;#39;,__\ \ \ _ &amp;lt;&amp;#39;\ \ \ / __`\ /&amp;#39;_ `\ 
 `\ \ \\ \ \_\ \/\ \__/\ \ \ \ \ \ \ /\__, `\ \ \ \L\ \\_\ \_/\ \L\ \/\ \L\ \ 
 \ \_\\/`____ \ \____\\ \_\ \_\ \_\ \/\____/ \ \____//\____\ \____/\ \____ \ 
 \/_/ `/___/&amp;gt; \/____/ \/_/\/_/\/_/ \/___/ \/___/ \/____/\/___/ \/___L\ \
 /\___/ /\____/
 \/__/ \_/__/ &amp;#39;`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此页内容多为软件使用技巧，绝大部分内容来自互联网，如有侵权，请与&lt;a href="mailto:guyueshui002@gmail.com"&gt;我&lt;/a&gt;联系。也有部分内容系自己使用软件所得的一些经验，仅供参考。&lt;/p&gt;</description></item><item><title>Polybar 的配置笔记</title><link>https://guyueshui.github.io/post/polybar-%E7%9A%84%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</link><pubDate>Wed, 16 Jan 2019 21:33:17 +0000</pubDate><guid>https://guyueshui.github.io/post/polybar-%E7%9A%84%E9%85%8D%E7%BD%AE%E7%AC%94%E8%AE%B0/</guid><description>&lt;p&gt;前略。&lt;/p&gt;
&lt;p&gt;今年早些时候，从 Gnome 换到 i3，原因是因为原来的 gnome 被我弄崩溃了。一时难以解决，又想到之前好几次隐约感觉到 gnome 的不稳定，一气之下决定换一个轻量，稳定的，可定制的窗口管理工具。至于为什么换 i3？去知乎吸收一下各个管理器间的哲学就知道了。以前从 Windows 转 Linux，也是这么过来的，知乎真是个好地方！&lt;/p&gt;</description></item><item><title>Matrix Factorization</title><link>https://guyueshui.github.io/post/matrix-factorization/</link><pubDate>Thu, 03 Jan 2019 21:07:38 +0000</pubDate><guid>https://guyueshui.github.io/post/matrix-factorization/</guid><description>&lt;h2 id="preliminaries"&gt;Preliminaries&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Def&lt;/strong&gt;: A matrix $A \in M_n$ is &lt;em&gt;normal&lt;/em&gt; if $AA^∗ = A^∗A$, that is, if $A$ commutes with its conjugate transpose.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Def&lt;/strong&gt;: A complex matrix $A$ is &lt;em&gt;unitary&lt;/em&gt; if $AA^∗ = I$ or $A^∗A = I$, and a real matrix $B$ is &lt;em&gt;orthogonal&lt;/em&gt; if $BB^T = I$ or $B^TB = I$.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://i.loli.net/2019/01/03/5c2e1178ec116.png" alt="Image adapted from Meyer&amp;rsquo;s book"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There is no so-called &amp;ldquo;orthonormal&amp;rdquo; matrix. There is just an orthogonal matrix whose rows or columns are orthonormal vectors.&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>在 Beamer 中使用参考文献</title><link>https://guyueshui.github.io/post/use-reference-in-beamer/</link><pubDate>Thu, 03 Jan 2019 16:05:47 +0000</pubDate><guid>https://guyueshui.github.io/post/use-reference-in-beamer/</guid><description>&lt;p&gt;&lt;font color="red"&gt;Needs polish!&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;前略。&lt;/p&gt;
&lt;p&gt;Beamer 引用参考文献与文章类似，只是一开始听说 beamer 不支持 &lt;code&gt;\cite&lt;/code&gt;，搞得我走了不少弯路（其实是可以的）。&lt;/p&gt;</description></item><item><title>Exponential Distribution</title><link>https://guyueshui.github.io/post/exponetial-distribution/</link><pubDate>Tue, 25 Dec 2018 22:21:49 +0000</pubDate><guid>https://guyueshui.github.io/post/exponetial-distribution/</guid><description>&lt;h2 id="story"&gt;Story&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The Exponential distribution is the continuous counterpart to the &lt;a href="file://./Geometric-Distribution.md"&gt;Geometric distribution&lt;/a&gt;. The story of the Exponential distribution is analogous, but we are now waiting for a success in continuous time, where successes arrive at a rate of $\lambda$ successes per unit of time. The average number of successes in a time interval of length $t$ is $\lambda t$, though the actual number of successes varies randomly. An Exponential random variable represents the waiting time until the first arrival of a success.&lt;/p&gt;</description></item><item><title>常用结论的证明记录</title><link>https://guyueshui.github.io/post/%E4%B8%80%E4%BA%9B%E6%8E%A8%E5%AF%BC/</link><pubDate>Thu, 20 Dec 2018 19:18:29 +0000</pubDate><guid>https://guyueshui.github.io/post/%E4%B8%80%E4%BA%9B%E6%8E%A8%E5%AF%BC/</guid><description>&lt;h2 id="高斯分布的微分熵"&gt;高斯分布的微分熵&lt;/h2&gt;
&lt;p&gt;$X \sim \mathcal{N}(\mu, \sigma^2)~$，$\displaystyle f(x)=\frac{1}{\sqrt{2\pi\sigma^2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$，其微分熵推导过程如下：&lt;/p&gt;</description></item><item><title>Vim Quick Reference</title><link>https://guyueshui.github.io/post/vim%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</link><pubDate>Thu, 20 Dec 2018 19:17:54 +0000</pubDate><guid>https://guyueshui.github.io/post/vim%E5%91%BD%E4%BB%A4%E9%80%9F%E6%9F%A5/</guid><description>&lt;p&gt;&lt;font color="red"&gt;This article needs polish, do not truely trust it!&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;Vim is so-called the god of editors, but not so friendly to new users. Today we will cover some techniques and trick of vim, for further reference.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;h2 id="general-pattern"&gt;General Pattern&lt;/h2&gt;
&lt;p&gt;A vim operation consists of three parts, namely&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[OPERATOR][NUMBER][MOTION]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OPERATOR&lt;/code&gt; - what you want to do? This mainly covers copy, cut, paste, etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NUMBER&lt;/code&gt; - how many times do you want? It&amp;rsquo;s nothing but repeating the operation &lt;code&gt;NUMBER&lt;/code&gt; times, and it&amp;rsquo;s &lt;strong&gt;optional&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MOTION&lt;/code&gt; - where do you want to go? This point out the scope where the &lt;code&gt;OPERATOR&lt;/code&gt; applies.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: order does not matter sometimes.&lt;/p&gt;</description></item><item><title>Melody 主题的一些个人更改</title><link>https://guyueshui.github.io/post/melody-theme-customization/</link><pubDate>Wed, 19 Dec 2018 14:31:24 +0000</pubDate><guid>https://guyueshui.github.io/post/melody-theme-customization/</guid><description>&lt;h2 id="更改字体"&gt;更改字体&lt;/h2&gt;
&lt;p&gt;Melody 主题字体配置文件在 &lt;code&gt;$BLOG/themes/melody/source/css/var.styl&lt;/code&gt;，其中 &lt;code&gt;$BLOG&lt;/code&gt; 为 Hexo 博客根目录。截取一段如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;span class="lnt"&gt;2
&lt;/span&gt;&lt;span class="lnt"&gt;3
&lt;/span&gt;&lt;span class="lnt"&gt;4
&lt;/span&gt;&lt;span class="lnt"&gt;5
&lt;/span&gt;&lt;span class="lnt"&gt;6
&lt;/span&gt;&lt;span class="lnt"&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-styl" data-lang="styl"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="err"&gt;Global&lt;/span&gt; &lt;span class="err"&gt;Variables&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;$font-size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;16px&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;$font-color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mh"&gt;#1F2D3D&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;$rem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;20px&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;$font-family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;Martel&lt;/span&gt; &lt;span class="err"&gt;Sans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Spectral&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Lato&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Helvetica&lt;/span&gt; &lt;span class="err"&gt;Neue&lt;/span&gt; &lt;span class="k"&gt;For&lt;/span&gt; &lt;span class="err"&gt;Number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;apple&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;system&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;BlinkMacSystemFont&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Segoe&lt;/span&gt; &lt;span class="err"&gt;UI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Roboto&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;PingFang&lt;/span&gt; &lt;span class="err"&gt;SC&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Hiragino&lt;/span&gt; &lt;span class="err"&gt;Sans&lt;/span&gt; &lt;span class="err"&gt;GB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Microsoft&lt;/span&gt; &lt;span class="err"&gt;YaHei&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Helvetica&lt;/span&gt; &lt;span class="err"&gt;Neue&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Helvetica&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Arial&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;sans&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="err"&gt;ser&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;$code-font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;Monaco&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;consolas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Menlo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#34;PingFang&lt;/span&gt; &lt;span class="err"&gt;SC&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#34;Microsoft&lt;/span&gt; &lt;span class="err"&gt;YaHei&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;monospace&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;Helvetica&lt;/span&gt; &lt;span class="err"&gt;Neue&lt;/span&gt; &lt;span class="k"&gt;For&lt;/span&gt; &lt;span class="err"&gt;Number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nv"&gt;$text-line-height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样的话就可以使用自定义的字体 Martel Sans 了。但是这仅限于在本地使用，因为别人的计算机中可能没有这个字体。所以必须制定网页去哪儿加载这个字体。一个方法是，将你系统的字体文件复制到博客根目录的 &lt;code&gt;source/fonts&lt;/code&gt; 文件夹。&lt;/p&gt;</description></item><item><title>Links</title><link>https://guyueshui.github.io/links/</link><pubDate>Tue, 18 Dec 2018 10:25:24 +0000</pubDate><guid>https://guyueshui.github.io/links/</guid><description>&lt;h2 id="site-extra"&gt;Site Extra&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://guyueshui.github.io/categories/"&gt;Categories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://guyueshui.github.io/tags/"&gt;Tags&lt;/a&gt;：本站标签。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pmanual.readthedocs.io"&gt;Personal Manual&lt;/a&gt;：个人参考手册。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="my-advisor"&gt;My Advisor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://faculty.sist.shanghaitech.edu.cn/faculty/wyl/"&gt;Youlong Wu&lt;/a&gt;：研究生阶段的导师，像学长一样亲切，在生活和学习上给了我很多的帮助。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="meaningful-blogs"&gt;Meaningful Blogs&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://yihui.org/cn/"&gt;Yihui Xie&lt;/a&gt;：有个性，有思想的博客（单方面友链）。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jiandan94.github.io/"&gt;Kai Qi&lt;/a&gt;：统计学博士在读，有内涵的哥们。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ruanzz.github.io"&gt;Ryan&lt;/a&gt;：同学。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dou.lu/1591.x"&gt;dou.lu&lt;/a&gt;：果然有趣的灵魂就是那么吸引人。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="algorithms"&gt;Algorithms&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://visualgo.net/"&gt;VisuAlgo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="programming-languages"&gt;Programming Languages&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://learnyouahaskell.com/"&gt;Learn You a Haskell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learnyoua.haskell.sg/"&gt;Learn You a Haskell (cn)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/changkun/modern-cpp-tutorial"&gt;Modern C++ Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://learnxinyminutes.com/"&gt;Learn X in Y Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SICP
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://sarabander.github.io/sicp/html/index.xhtml#SEC_Contents"&gt;H5Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://community.schemewiki.org/?SICP-Solutions"&gt;Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video Lecture: &lt;a href="https://www.bilibili.com/video/av8515129"&gt;bilibili&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="latex"&gt;LaTeX&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://webdemo.myscript.com/views/math/index.html"&gt;Equation Recognition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://detexify.kirelabs.org/classify.html"&gt;Symbol Recognition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.latex4technics.com/"&gt;Online Equation Editor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.maths.tcd.ie/~dwilkins/LaTeXPrimer/"&gt;Getting Started with LaTeX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikibooks.org/wiki/LaTeX/Mathematics#Dots"&gt;LaTeX-WikiBook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://miktex.org/"&gt;MiKTeX&lt;/a&gt;: Smaller LaTeX distribution compared with TeXLive.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://tablesgenerator.com"&gt;Table Generator&lt;/a&gt;: A handy tool for generating TeX tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="for-fun"&gt;For Fun&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.unicode.org/emoji/charts/full-emoji-list.html"&gt;Full Emoji List, v11.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/liuchengxu/space-vim-dark"&gt;Vim color scheme: space-vim-dark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://spacevim.org/cn/"&gt;SpaceVim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://webglsamples.org/aquarium/aquarium.html"&gt;WebGlSamples&lt;/a&gt;: browser performance test&lt;/li&gt;
&lt;li&gt;图床：&lt;a href="https://imgchr.com/"&gt;路过&lt;/a&gt;、&lt;a href="https://sm.ms/"&gt;sm.ms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://api.ihint.me/shuang/"&gt;双拼练习 @ BlueSky&lt;/a&gt;：怎么我当时学的时候没发现这个网站👿！我学的时候靠的是一张键位图作为输入法背景，也差不多吧～&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="修身养性"&gt;修身养性&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ctext.org/"&gt;中国哲学书电子化计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.readers365.com/scfpq/index.htm"&gt;历代诗词赋骈曲杂集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://sou-yun.com/index.aspx"&gt;搜韵&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.zgbk.com/dzb/jy/sfxx/"&gt;书法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fonts"&gt;Fonts&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://wenq.org/wqy2/index.cgi"&gt;文泉驿&lt;/a&gt;：Linux 下的标配中文字体。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://source.typekit.com/source-han-serif/#get-the-fonts"&gt;思源&lt;/a&gt;&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref"&gt;1&lt;/a&gt;&lt;/sup&gt;：Adobe 和 Google 联合出品，包含宋体、黑体、等宽三种类型，linux 下宋体首选。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ifontcloud.com.tw/index/browse.jsp?lang=zh&amp;amp;country=TW"&gt;文鼎&lt;/a&gt;：湾湾出的，有点古朴的气质。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.hanyi.com.cn/productList.php"&gt;汉仪&lt;/a&gt;：现代汉语的精致字体。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.foundertype.com/index.php/FindFont/index"&gt;方正&lt;/a&gt;：书报排版标配字体族。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fonts.google.com/"&gt;Google Fonts&lt;/a&gt;: 种类繁多的英文字体。&lt;/li&gt;
&lt;li&gt;&lt;a href="https://fontawesome.com/how-to-use/on-the-desktop/setup/getting-started"&gt;Font Awesome&lt;/a&gt;: 流行的图标字体。&lt;/li&gt;
&lt;li&gt;&lt;a href="http://libertine-fonts.org/download/"&gt;Libertine font&lt;/a&gt;: SICP 书本排版主体字体，个人觉得非常好看，包含 sans-serif 和 serif 两族。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes" role="doc-endnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Archlinux 下使用&lt;code&gt;pacman -S $(pacman -Ssq &amp;quot;adobe-source-han.*cn&amp;quot;)&lt;/code&gt;安装之。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink"&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;</description></item><item><title>HTML 美化 Markdown 排版</title><link>https://guyueshui.github.io/post/html-%E7%BE%8E%E5%8C%96-markdown-%E6%8E%92%E7%89%88/</link><pubDate>Sun, 16 Dec 2018 00:04:38 +0000</pubDate><guid>https://guyueshui.github.io/post/html-%E7%BE%8E%E5%8C%96-markdown-%E6%8E%92%E7%89%88/</guid><description>&lt;p&gt;&lt;a href="https://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt; 是一门轻量标记型语言，因其简单易用而受众甚广。但是正因其简单，故而也有一部分局限性（虽然说它保留的即是最常用、最基本的排版功能）。本文就来说说在使用 Markdown 排版的时候，如何引入一点 HTML 的技巧来帮助我们排版的更加好看。&lt;/p&gt;</description></item><item><title>札记</title><link>https://guyueshui.github.io/sketch/</link><pubDate>Fri, 14 Dec 2018 13:59:49 +0000</pubDate><guid>https://guyueshui.github.io/sketch/</guid><description>&lt;h2 id="2024-年-7-月"&gt;2024 年 7 月&lt;/h2&gt;
&lt;p&gt;31 日，买定一辆二手车，红色大众 Polo，2014 款 1.4L 手动风尚版（丐版），也算是人生第一辆车了。虽然空间很小，但胜在省油耐造，小巧灵便。&lt;/p&gt;</description></item><item><title>About</title><link>https://guyueshui.github.io/about/</link><pubDate>Wed, 12 Dec 2018 22:06:18 +0000</pubDate><guid>https://guyueshui.github.io/about/</guid><description>&lt;h2 id="site"&gt;Site&lt;/h2&gt;
&lt;p&gt;Welcome! This blog is mainly written for self-reference, which covers math, tech, and maybe some other notes (learning or working). Nevertheless, it&amp;rsquo;s really my pleasure if some of my articles is useful for you. :)&lt;/p&gt;
&lt;h3 id="timeline-of-this-site"&gt;Timeline of this site&lt;/h3&gt;
&lt;table&gt;
 &lt;thead&gt;
 &lt;tr&gt;
 &lt;th style="text-align: center"&gt;Time&lt;/th&gt;
 &lt;th&gt;Event&lt;/th&gt;
 &lt;/tr&gt;
 &lt;/thead&gt;
 &lt;tbody&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2018-12-24&lt;/td&gt;
 &lt;td&gt;First published by &lt;a href="http://hexo.io/"&gt;Hexo&lt;/a&gt;, theme &lt;a href="https://github.com/Molunerfinn/hexo-theme-melody"&gt;Melody&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2019-08-25&lt;/td&gt;
 &lt;td&gt;Move to &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt;, theme &lt;a href="https://github.com/olOwOlo/hugo-theme-even"&gt;Even&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2019-08-25&lt;/td&gt;
 &lt;td&gt;Add comment system powered by &lt;a href="https://github.com/imsun/gitment"&gt;gitment&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2020-03-25&lt;/td&gt;
 &lt;td&gt;Add many old articles&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2020-11-14&lt;/td&gt;
 &lt;td&gt;Auto deploy with &lt;a href="https://github.com/marketplace?type=actions"&gt;Github Actions&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2021-02-10&lt;/td&gt;
 &lt;td&gt;Change comment system from gitment to &lt;a href="https://valine.js.org/"&gt;valine&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2023-04-08&lt;/td&gt;
 &lt;td&gt;Add local &lt;a href="https://github.com/guyueshui/hugo-theme-even/commit/10f7ac37c822a22c106225513c0f070f2d7438ff"&gt;search&lt;/a&gt; scheme, not perfect though&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2023-04-10&lt;/td&gt;
 &lt;td&gt;Search in a more efficient way, refer to &lt;a href="https://www.softwarecraftsperson.com/posts/2021-05-01-client-side-search-fuse/"&gt;here&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td style="text-align: center"&gt;2023-06-01&lt;/td&gt;
 &lt;td&gt;Change comment system to &lt;a href="https://giscus.app/zh-CN"&gt;giscus&lt;/a&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="me"&gt;Me&lt;/h2&gt;
&lt;p&gt;I am yychi, a student.&lt;/p&gt;</description></item><item><title>使用 Git 管理配置文件</title><link>https://guyueshui.github.io/post/manage-dotfiles-by-git/</link><pubDate>Fri, 16 Nov 2018 10:32:19 +0000</pubDate><guid>https://guyueshui.github.io/post/manage-dotfiles-by-git/</guid><description>&lt;p&gt;对于 Linux 用户，在 &lt;code&gt;$HOME&lt;/code&gt; 文件夹下，一般都有大量的隐藏文件，形如&lt;code&gt;.conf&lt;/code&gt;,&lt;code&gt;.xxxrc&lt;/code&gt;等，这些都是程序的配置文件。很多人也许花了一个下午，一天，甚至一个星期，折腾某某程序的配置文件。如果这些轻易丢失了，那就是浪费生命了！所以，如何将这些文件备份，成了很多人必须要问的一个问题。&lt;/p&gt;</description></item><item><title>Android 刷机的一般步骤</title><link>https://guyueshui.github.io/post/android%E5%88%B7%E6%9C%BA%E7%9A%84%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/</link><pubDate>Tue, 18 Sep 2018 23:00:05 +0000</pubDate><guid>https://guyueshui.github.io/post/android%E5%88%B7%E6%9C%BA%E7%9A%84%E4%B8%80%E8%88%AC%E6%AD%A5%E9%AA%A4/</guid><description>&lt;h2 id="1-事前准备"&gt;1. 事前准备&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;先想好为什么要刷机？想清楚了吗？真的想清楚了吗！好的，接下来我们要做的事应该是打开一堆网页，一堆对应自己机型的刷机教程帖，还要做好重要数据备份，确保“不成功，也不能成仁”。好的，那就开始吧：&lt;/p&gt;</description></item><item><title>记一次重装 Linux</title><link>https://guyueshui.github.io/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%87%8D%E8%A3%85linux/</link><pubDate>Mon, 13 Aug 2018 10:07:05 +0000</pubDate><guid>https://guyueshui.github.io/post/%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%87%8D%E8%A3%85linux/</guid><description>&lt;p&gt;放假回家，因故将笔记本电池弄到枯竭。结果再次开启，发现 &lt;code&gt;startx&lt;/code&gt; 启动 gnome-session 失败。几经解决未果，只好重装！&lt;/p&gt;</description></item><item><title>最大熵对应的概率分布</title><link>https://guyueshui.github.io/post/%E6%9C%80%E5%A4%A7%E7%86%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</link><pubDate>Wed, 01 Aug 2018 18:02:36 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%9C%80%E5%A4%A7%E7%86%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</guid><description>&lt;h2 id="最大熵定理"&gt;最大熵定理&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;设 $X \sim p(x)$ 是一个连续型随机变量，其微分熵定义为&lt;/em&gt;
$$
h(X) = - \int p(x)\log p(x) dx
$$
&lt;em&gt;其中，$\log$ 一般取自然对数 $\ln$, 单位为 奈特（nats）。&lt;/em&gt;&lt;/p&gt;
&lt;!-- more --&gt;
&lt;p&gt;考虑如下优化问题：
$$
\begin{array}{ll}
&amp;amp;\underset{p}{\text{Maximize}} &amp;amp; \displaystyle h(p) = - \int_S p(x)\log p(x) dx \newline
&amp;amp;\text{Subject to} &amp;amp;\displaystyle \int_S p(x) dx = 1 \newline
&amp;amp;~ &amp;amp; p(x) \ge 0 \newline
&amp;amp;~ &amp;amp; \displaystyle \int_S p(x) f_i(x) dx = \alpha_i, ~i=1,2,3,\dots,n
\end{array}
$$
其中，集合 $S$ 是随机变量的 support，即其所有可能的取值。我们意图找到这样的概率分布 $p$, 他满足所有的约束（前两条是概率公理的约束，最后一条叫做矩约束，在模型中有时会假设随机变量的矩为常数），并且能够使得熵最大。将上述优化问题写成标准形式：&lt;/p&gt;</description></item><item><title>二十四</title><link>https://guyueshui.github.io/post/%E4%BA%8C%E5%8D%81%E5%9B%9B/</link><pubDate>Fri, 09 Feb 2018 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E4%BA%8C%E5%8D%81%E5%9B%9B/</guid><description>&lt;blockquote&gt;
&lt;p&gt;写于二十四岁之际，匆匆人间已经走过两纪，观之苦辣酸甜，皆归于平淡。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;去日寥寥终不谏，&lt;/p&gt;
&lt;p&gt;阴晴变换亦难圆。&lt;/p&gt;
&lt;p&gt;无尤无怨无执念，&lt;/p&gt;
&lt;p&gt;来纪来年来易之。&lt;/p&gt;
&lt;p&gt;丁酉腊月廿四&lt;/p&gt;</description></item><item><title>戏小调</title><link>https://guyueshui.github.io/post/%E6%88%8F%E5%B0%8F%E8%B0%83/</link><pubDate>Sat, 06 Jan 2018 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%88%8F%E5%B0%8F%E8%B0%83/</guid><description>&lt;p&gt;晚风射枝断，宴罢歌舞歇。
归卧孤衾倦揽，寒阁暗对，幽恨新结。&lt;/p&gt;
&lt;p&gt;不识莲心苦，尽日尝相忘。
设入骤雪梦中，清白天地，独立苍茫。&lt;/p&gt;</description></item><item><title>某不正经的个人总结</title><link>https://guyueshui.github.io/post/%E6%9F%90%E4%B8%8D%E6%AD%A3%E7%BB%8F%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</link><pubDate>Fri, 23 Jun 2017 14:41:27 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%9F%90%E4%B8%8D%E6%AD%A3%E7%BB%8F%E7%9A%84%E4%B8%AA%E4%BA%BA%E6%80%BB%E7%BB%93/</guid><description>&lt;p&gt;不知何时开始，整理情绪，对我来说成了一件十分困难的事。每次想发点什么，总怕被说矫情，想想还是不发了吧。想必很多灵感都是这样被扼杀了吧。但是人总是要改变的，无论随着时间，还是随着空间。​四年还是变了不少的，比如变胖了什么的（这是主要的，饭量大我也没办法，括弧笑）。性情什么的也有变化，主要是理工男气质（猥琐？），当然也有正经的变化。改变是福是祸无从判断，但每个改变都是自己的选择，所以也应该释然。&lt;/p&gt;</description></item><item><title>假想敌</title><link>https://guyueshui.github.io/post/%E5%81%87%E6%83%B3%E6%95%8C/</link><pubDate>Wed, 26 Apr 2017 14:49:15 +0000</pubDate><guid>https://guyueshui.github.io/post/%E5%81%87%E6%83%B3%E6%95%8C/</guid><description>&lt;blockquote&gt;
&lt;p&gt;有时候我们需要一个假想敌，来抵制一天的堕落。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;：今天也是满负罪恶感的一天呢？&lt;br /&gt;
&amp;ndash;嗯，其实我还蛮会自我减压的。&lt;br /&gt;
：这已经称得上是放纵了呢！&lt;br /&gt;
&amp;ndash;不不不，我的神经有紧绷过吗？&lt;br /&gt;
：那你准备何时紧绷。&lt;br /&gt;
&amp;ndash;明天吧，不过今天真是满负罪恶感的一天呢！&lt;/p&gt;</description></item><item><title>雪之野</title><link>https://guyueshui.github.io/post/%E9%9B%AA%E4%B9%8B%E9%87%8E/</link><pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E9%9B%AA%E4%B9%8B%E9%87%8E/</guid><description>&lt;blockquote&gt;
&lt;p&gt;看过《言叶之庭》，特别喜欢雪野百香里。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;一直以来&lt;br /&gt;
找不到合适的词语&lt;br /&gt;
不知道用什么情感&lt;br /&gt;
——描述你&lt;/p&gt;
&lt;p&gt;久而久之&lt;br /&gt;
连一切的起因也忘了&lt;br /&gt;
好像你的存在&lt;br /&gt;
就是这世界全部的秘密&lt;/p&gt;</description></item><item><title>Newifi Mini 安装 PandoraBox</title><link>https://guyueshui.github.io/post/newifi-mini%E5%AE%89%E8%A3%85pandorabox/</link><pubDate>Tue, 21 Feb 2017 16:01:55 +0000</pubDate><guid>https://guyueshui.github.io/post/newifi-mini%E5%AE%89%E8%A3%85pandorabox/</guid><description>&lt;p&gt;首先 Newifi mini 是一款很小巧美观的路由器，颜值即是正义嘛。再加上性价比高，易于刷写第三方系统，所以嘛，值得一买。&lt;/p&gt;
&lt;h2 id="规格参数"&gt;规格参数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;WAN(10/100Mbps)&lt;/li&gt;
&lt;li&gt;LAN(10/100Mbps)*2&lt;/li&gt;
&lt;li&gt;双频：2.4GHz:300Mbps+5GHz:867Mbps&lt;/li&gt;
&lt;li&gt;USB2.0 接口&lt;/li&gt;
&lt;li&gt;外置天线*2&lt;/li&gt;
&lt;li&gt;天线增益：3dBi&lt;/li&gt;
&lt;li&gt;128MB 内存&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- more --&gt;
&lt;h2 id="资源"&gt;资源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;PandoraBox 下载源：&lt;a href="http://downloads.pandorabox.com.cn/"&gt;http://downloads.pandorabox.com.cn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;旧版 (2015 年 1 月)：&lt;a href="http://downloads.pandorabox.com.cn/pandorabox/Lenovo-Y1_RY-1S/"&gt;设备代号 Lenovo-Y1_RY-1S&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;新版 (2017 年 1 月)：&lt;a href="http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/targets/ralink/mt7620/PandoraBox-ralink-mt7620-newifi-mini-2017-01-03-git-6c24a7a-squashfs-sysupgrade.bin"&gt;newifi-mini&lt;/a&gt; 附&lt;a href="http://downloads.pandorabox.com.cn/pandorabox-16-10-stable/changelog-16.10-stable.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我用旧版安装 shadowsocks 时碰到很多问题，一时无解于是刷了新版，顺便说一下新版网页端是 Material Design，很好看。&lt;/p&gt;</description></item><item><title>祝考研顺利</title><link>https://guyueshui.github.io/post/%E7%A5%9D%E8%80%83%E7%A0%94%E9%A1%BA%E5%88%A9/</link><pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%A5%9D%E8%80%83%E7%A0%94%E9%A1%BA%E5%88%A9/</guid><description>&lt;blockquote&gt;
&lt;p&gt;室友明日考研，祝他顺利吧。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;拂影寻花径，&lt;/p&gt;
&lt;p&gt;拨云探青天。&lt;/p&gt;
&lt;p&gt;平生何来意，&lt;/p&gt;
&lt;p&gt;潦潦一纸间。&lt;/p&gt;</description></item><item><title>赠有情人</title><link>https://guyueshui.github.io/post/%E8%B5%A0%E6%9C%89%E6%83%85%E4%BA%BA/</link><pubDate>Wed, 16 Nov 2016 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E8%B5%A0%E6%9C%89%E6%83%85%E4%BA%BA/</guid><description>&lt;blockquote&gt;
&lt;p&gt;今序：那个时候我还单身，在图书馆自习，一对情侣坐在我前边，甚烦，扰人学习，作此相赠。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;原序：某不动，见来人，胶粘状，遂寄言。&lt;/p&gt;
&lt;p&gt;劳燕相与飞。&lt;/p&gt;
&lt;p&gt;日月相伴明。&lt;/p&gt;</description></item><item><title>使用 Tar 备份 Archlinux</title><link>https://guyueshui.github.io/post/%E4%BD%BF%E7%94%A8tar%E5%A4%87%E4%BB%BDarchlinux/</link><pubDate>Sat, 10 Sep 2016 19:00:57 +0000</pubDate><guid>https://guyueshui.github.io/post/%E4%BD%BF%E7%94%A8tar%E5%A4%87%E4%BB%BDarchlinux/</guid><description>&lt;p&gt;Linux 需要备份吗？本身 Linux 系统的稳定性就是一流，文件系统也不易产生碎片，只要不是硬盘突然崩掉了，你可以有 100 种方法来修复系统的各种问题而不用重装系统。但是恰好我不是多么熟练的 Linux 使用者，每次出问题也是自己在网上边查边解决，有时候也会遇到那种查了几天也没能解决的问题，所以重装 Linux 这样的情景也会时常发生。那么，如果事先做了备份，这时候就能起到很大的作用了。&lt;/p&gt;</description></item><item><title>生查子·廿七纪事</title><link>https://guyueshui.github.io/post/%E7%94%9F%E6%9F%A5%E5%AD%90/</link><pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%94%9F%E6%9F%A5%E5%AD%90/</guid><description>&lt;p&gt;昨日武昌水，纵横磨山北。燕雀噙新枝，怨号惊山鬼。&lt;/p&gt;
&lt;p&gt;幽恨度频传，闻言声亦老。谁折陌上花，一报江南好？&lt;/p&gt;</description></item><item><title>古别</title><link>https://guyueshui.github.io/post/%E5%8F%A4%E5%88%AB/</link><pubDate>Sun, 28 Feb 2016 14:51:23 +0000</pubDate><guid>https://guyueshui.github.io/post/%E5%8F%A4%E5%88%AB/</guid><description>&lt;p&gt;几日度离魂，午后闲萧索。&lt;/p&gt;
&lt;p&gt;起身斜照间，指染门前土。&lt;/p&gt;
&lt;p&gt;道是无情人，偏作有情甫。&lt;/p&gt;
&lt;p&gt;原是离别多，何必离别苦。&lt;/p&gt;
&lt;!-- more --&gt;</description></item><item><title>遣怀・并序</title><link>https://guyueshui.github.io/post/%E9%81%A3%E6%80%80/</link><pubDate>Thu, 21 Jan 2016 14:53:03 +0000</pubDate><guid>https://guyueshui.github.io/post/%E9%81%A3%E6%80%80/</guid><description>&lt;blockquote&gt;
&lt;p&gt;今冬返数日，串村之后，与老者话聊，竟不见其中人许。细问之下，原是身逝黄土。时天气晴寒，鸡蜷狗缩，又东北风呼啸，坐家中远观旧物，因忆旧人：十余年前，同道者众。夏气夺人，游于小池。水中游戏，瓜田取瓜。上则就近而坐，谈天论地，斗牌弄珠。比及冬寒日重，年关将至，则朋访友门，互张灯彩，欢情酣处，取鞭炮戏耍。人生之快，何能胜哉？而时过经年，朋走友散，各行其是，心性互异，此非一日之功。况人事更替，打击非凡。何能怨哉？今二老去其一，则日后暖不得同享，寒不能同衾，病不能相伴，食不得同堂。哀哉！百年孤独，半生劳碌，老有何求？正是尝尽人间辛酸苦，方知幸福是当初。白丝攀在青丝上，始信岁月神鬼工。乙未年冬于被中。&lt;/p&gt;</description></item><item><title>雪压轩集</title><link>https://guyueshui.github.io/post/%E9%9B%AA%E5%8E%8B%E8%BD%A9%E9%9B%86/</link><pubDate>Sun, 27 Dec 2015 14:39:33 +0000</pubDate><guid>https://guyueshui.github.io/post/%E9%9B%AA%E5%8E%8B%E8%BD%A9%E9%9B%86/</guid><description>&lt;h2 id="1浣溪沙"&gt;1.【浣溪沙】&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;暖雨无晴漏几丝，牧童斜插嫩花枝。小田新麦上场时。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;汲水种瓜偏怒早，忍烟炊黍又嗔迟。日长酸透软腰肢。&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;据传，这首词是用粉写在一张芍药叶片上的。词的上片意象很美，你看，初夏的阵雨飘飞在山谷田野，已上场的新麦散发着阵破清香，头上插花的牧童悠然自得地骑在牛背上。可是，在这样一个丰收的季节里，词人却没有丝毫的喜悦。她干完了农活，又要回家做饭，忙得腰酸背疼，仍不免受到挑剔与责骂。怒早、嗔迟，真是左右为难。夫悍姑恶，一切都看不顺眼。双卿是那么的无助，身体、精神上备受煎熬，心中的苦闷、忧愤、伤痛无以排遣，无处表达，唯有借助手中的笔，将满腔的幽怨倾诉于纸上，形成一首首滴血含泪的诗篇。诗词是她唯一的听众，唯一的寄托，也是生命中唯一的闪光点，夜晚独自一人，内心的思绪如泉涌流于笔端，内心的痛苦也如泉水延绵流长，“此恨绵绵无绝期”，于是忍痛含悲，写下了这阕《浣溪沙》。&lt;/p&gt;</description></item><item><title>望日观月</title><link>https://guyueshui.github.io/post/%E6%9C%9B%E6%97%A5%E8%A7%82%E6%9C%88/</link><pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%9C%9B%E6%97%A5%E8%A7%82%E6%9C%88/</guid><description>&lt;p&gt;风逐残红海逐潮，&lt;/p&gt;
&lt;p&gt;北斗呈钩贪狼皎。&lt;/p&gt;
&lt;p&gt;百年明月一时盈，&lt;/p&gt;
&lt;p&gt;自此清辉夜夜销。&lt;/p&gt;</description></item><item><title>旅客</title><link>https://guyueshui.github.io/post/%E6%97%85%E5%AE%A2/</link><pubDate>Tue, 18 Aug 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%97%85%E5%AE%A2/</guid><description>&lt;blockquote&gt;
&lt;p&gt;当年上学，父亲骑着电瓶车送我到车站，我站在车上往后看……&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;车开了&lt;br /&gt;
你看我&lt;br /&gt;
我回头&lt;br /&gt;
看见你没能看见我&lt;br /&gt;
的双眼&lt;/p&gt;
&lt;p&gt;说来旅客&lt;br /&gt;
本身就是一种伤害&lt;br /&gt;
大概&lt;/p&gt;</description></item><item><title>文本</title><link>https://guyueshui.github.io/post/%E6%96%87%E6%9C%AC/</link><pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%96%87%E6%9C%AC/</guid><description>&lt;p&gt;在这半亩方塘&lt;br /&gt;
横七竖八的站立&lt;br /&gt;
倾颓，蹒跚，踟蹰&lt;br /&gt;
而你是作家，是诗人&lt;br /&gt;
是勤于耕作的农夫&lt;br /&gt;
夕阳映照的汗水&lt;br /&gt;
生命绘成的霓虹&lt;/p&gt;</description></item><item><title>天空</title><link>https://guyueshui.github.io/post/%E5%A4%A9%E7%A9%BA/</link><pubDate>Sun, 19 Jul 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E5%A4%A9%E7%A9%BA/</guid><description>&lt;p&gt;俯视着关于你的一切&lt;br /&gt;
像死水一样寂静&lt;br /&gt;
而你是云，是风&lt;br /&gt;
你是向晚高飞的蝙蝠&lt;br /&gt;
未曾与他们苟同&lt;br /&gt;
你没有追寻光明&lt;/p&gt;
&lt;p&gt;在寂静的向晚&lt;br /&gt;
在清新的早晨&lt;br /&gt;
在蝉鸣的午后&lt;br /&gt;
毫不动摇的揣想，不得其果&lt;/p&gt;</description></item><item><title>湖</title><link>https://guyueshui.github.io/post/%E6%B9%96/</link><pubDate>Mon, 13 Jul 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%B9%96/</guid><description>&lt;p&gt;静静躺在城市中央&lt;br /&gt;
待云朵与岁月同流&lt;br /&gt;
而你是花，是草&lt;br /&gt;
是交错的公路&lt;br /&gt;
期待你的驻足&lt;br /&gt;
如逆流之虹&lt;/p&gt;
&lt;p&gt;但旅人未驻足&lt;br /&gt;
列车未曾停止&lt;br /&gt;
少年未曾回头&lt;br /&gt;
所以你未曾到过波心，不谙水性&lt;/p&gt;</description></item><item><title>闻奇录·画工</title><link>https://guyueshui.github.io/post/%E7%94%BB%E5%B7%A5/</link><pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%94%BB%E5%B7%A5/</guid><description>&lt;p&gt;唐进士赵颜，于画工处得一软障，图一妇人甚丽。颜谓画工曰：“世无其人也，如可令生，余愿纳为妻。”画工曰：“余神画也，此亦有名，曰真真。呼其名百日，昼夜不歇，即必应之。应则以百家彩灰酒灌之，必活。”颜如其言，遂呼之百日，昼夜不止。乃应曰：“诺”。急以百家彩灰酒灌之，遂呼之活。下步言笑，饮食如常。曰：“谢君召妾，妾愿事箕帚。”终岁，生一儿，年二岁，友人曰：“此妖也，必与君为患！余有神剑，可斩之。”其夕，乃遗颜剑。剑才及颜室。真真乃泣曰：“妾南岳地仙也，无何为人画妾之形，君又呼妾之名，既不夺君愿。君今疑妾，妾不可住。”言讫，携其子，却上软障，呕出先所饮百家彩灰酒。睹其障，唯添一孩子，皆是画焉。&lt;/p&gt;</description></item><item><title>踏莎行·元日</title><link>https://guyueshui.github.io/post/%E8%B8%8F%E8%8E%8E%E8%A1%8C/</link><pubDate>Thu, 01 Jan 2015 09:21:12 +0800</pubDate><guid>https://guyueshui.github.io/post/%E8%B8%8F%E8%8E%8E%E8%A1%8C/</guid><description>&lt;p&gt;苹芜青青，波光栩栩，东君重临鸳鸯浦。葬花院落弄新晴，断魂台上兼风雨。&lt;/p&gt;
&lt;p&gt;蟾宫戚戚，江畔独步，摊破月华平分取。何如前路楚山孤，海角天涯同逆旅。&lt;/p&gt;</description></item><item><title>道破元日</title><link>https://guyueshui.github.io/post/%E9%81%93%E7%A0%B4%E5%85%83%E6%97%A5/</link><pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/%E9%81%93%E7%A0%B4%E5%85%83%E6%97%A5/</guid><description>&lt;p&gt;繁华事散月空明，&lt;/p&gt;
&lt;p&gt;春风无意草自青。&lt;/p&gt;
&lt;p&gt;天道有常人难测，&lt;/p&gt;
&lt;p&gt;朗朗乾坤一语平。&lt;/p&gt;</description></item><item><title>独不见</title><link>https://guyueshui.github.io/post/%E7%8B%AC%E4%B8%8D%E8%A7%81/</link><pubDate>Sat, 29 Nov 2014 10:22:18 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%8B%AC%E4%B8%8D%E8%A7%81/</guid><description>&lt;p&gt;莫以危楼栏杆凭，天南地北相思寻。&lt;/p&gt;
&lt;p&gt;涂山一望成千古，石尤翻阻远客行。&lt;/p&gt;
&lt;p&gt;朽木堪比彭祖老，情丝可争日月新。&lt;/p&gt;
&lt;p&gt;悲肠寥寥独不见，空将纷繁枕边吟。&lt;/p&gt;</description></item><item><title>露降</title><link>https://guyueshui.github.io/post/%E9%9C%B2%E9%99%8D/</link><pubDate>Sat, 25 Oct 2014 08:42:55 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%9C%B2%E9%99%8D/</guid><description>&lt;p&gt;秋容频惊鬓凋残，&lt;/p&gt;
&lt;p&gt;秋风误把相思传。&lt;/p&gt;
&lt;p&gt;人未眠，夜阑珊，&lt;/p&gt;
&lt;p&gt;天涯何处是团栾。&lt;/p&gt;</description></item><item><title>结萝</title><link>https://guyueshui.github.io/post/%E7%BB%93%E8%90%9D/</link><pubDate>Tue, 07 Oct 2014 09:37:50 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%BB%93%E8%90%9D/</guid><description>&lt;blockquote&gt;
&lt;p&gt;结萝（后名毒影）是《仙剑奇侠传五前传》游戏中的人物，苗疆女子，邂逅厉岩（后名血手），一直苦苦追随，研究情蛊，希望以此得到厉岩的关心，其实厉岩原本就很喜欢她，只是羞于表露。&lt;/p&gt;</description></item><item><title>忆王孙·重阳</title><link>https://guyueshui.github.io/post/%E5%BF%86%E7%8E%8B%E5%AD%99/</link><pubDate>Mon, 06 Oct 2014 00:42:06 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%BF%86%E7%8E%8B%E5%AD%99/</guid><description>&lt;p&gt;绿窗新见暮色沉，围炉夜话俏平生。&lt;/p&gt;
&lt;p&gt;又拈旧醅对故人，入更深，月华淌过小柴门。&lt;/p&gt;</description></item><item><title>月夕调</title><link>https://guyueshui.github.io/post/%E6%9C%88%E5%A4%95%E8%B0%83/</link><pubDate>Wed, 10 Sep 2014 19:58:50 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%9C%88%E5%A4%95%E8%B0%83/</guid><description>&lt;p&gt;念亟蟾宫殁，思尽天一涯。&lt;/p&gt;
&lt;p&gt;长躯何了了，戚戚何惨怛。&lt;/p&gt;
&lt;p&gt;泠泠秋风中，霭霭月华下。&lt;/p&gt;</description></item><item><title>真·碎碎念</title><link>https://guyueshui.github.io/post/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</link><pubDate>Thu, 21 Aug 2014 23:24:47 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%A2%8E%E7%A2%8E%E5%BF%B5/</guid><description>&lt;p&gt;一连几天阴雨天气让身体倍感不适。这两天终于出了太阳。日中则偏。有角度的阳光是温柔的。当烈日变成斜阳，人也就多了些欣赏的眼光。斜阳成绮大约就是这样了。需要我描述吗？它已经被眼睛写入大脑了。这日落，不得不让人想起要开学离家了。本来也是无可厚非，刚回家的时候，想起回校也是大大方方就能接受的，可迫近了这个关头，心眼倒小些了。回头望望这个暑假，也没做什么，没有打工，没有学车，没有学菜。说是没做什么，可时间总是有去向的。又是一个无可厚非。时间花在哪里，哪里就会有收获。从未有浪费这一说。所有的时间没有什么值得不值得花费，只有自己愿意不愿意罢了。你在 A 事件上花费了时间，取得了收获，收获了你所追求的，自己又是情愿的，那么，无论 A 事件是什么，这个时间不算浪费。那么我的时间呢？我只告诉你我在一个循环中，螺旋上升。人有时会迷茫，但日子还是正常过。咦？脑子一下空了。怎么感觉语无伦次。必须承认我不是写作文的料啊。脑子空了就写不出来了，写不出来了就不写了，最后让我冠冕堂皇地称之为随心而止。拜拜&lt;/p&gt;</description></item><item><title>踏莎行·为五前作</title><link>https://guyueshui.github.io/post/%E8%B8%8F%E8%8E%8E%E8%A1%8C%E4%B8%BA%E4%BA%94%E5%89%8D%E4%BD%9C/</link><pubDate>Thu, 31 Jul 2014 22:26:23 +0800</pubDate><guid>https://guyueshui.github.io/post/%E8%B8%8F%E8%8E%8E%E8%A1%8C%E4%B8%BA%E4%BA%94%E5%89%8D%E4%BD%9C/</guid><description>&lt;blockquote&gt;
&lt;p&gt;放假在家过了一遍《仙剑奇侠传五前传》，不得不说仙剑的结局还是一贯的神，一贯的悲。有时候会将看故事的人拉入其中无法自拔，真个黯然神伤，佩服佩服！&lt;/p&gt;</description></item><item><title>鹧鸪天·夜游</title><link>https://guyueshui.github.io/post/%E9%B9%A7%E9%B8%AA%E5%A4%A9%E5%A4%9C%E6%B8%B8/</link><pubDate>Wed, 16 Jul 2014 23:51:02 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%B9%A7%E9%B8%AA%E5%A4%A9%E5%A4%9C%E6%B8%B8/</guid><description>&lt;blockquote&gt;
&lt;p&gt;放假在家，夜深不能眠，因闭目养神，神游屋外。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;夏清碎雨三更天，倦卧竹席待月眠。墨云戏水声婉转，流萤映波步蹁跹。&lt;/p&gt;
&lt;p&gt;山连绵，水绵延，细筛夜色几分恬？皎光一道凌窗入，浮生半梦碧游仙。&lt;/p&gt;</description></item><item><title>临江仙·造境</title><link>https://guyueshui.github.io/post/%E4%B8%B4%E6%B1%9F%E4%BB%99%E9%80%A0%E5%A2%83/</link><pubDate>Sun, 29 Jun 2014 14:09:24 +0800</pubDate><guid>https://guyueshui.github.io/post/%E4%B8%B4%E6%B1%9F%E4%BB%99%E9%80%A0%E5%A2%83/</guid><description>&lt;blockquote&gt;
&lt;p&gt;硬生生的矫揉造作，满脑子乱想出来的境界。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;寂寂远洋村落，皑皑天水漫行。岸下游鱼翻藻荇。波心二两月，湖面十分明。&lt;/p&gt;
&lt;p&gt;矮草促织乱入，寒鸦林外时鸣。无食何不餐落英。心罗千万物，眼浸一天星。&lt;/p&gt;</description></item><item><title>关于饭局那些事儿</title><link>https://guyueshui.github.io/post/%E5%85%B3%E4%BA%8E%E9%A5%AD%E5%B1%80%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</link><pubDate>Fri, 20 Jun 2014 21:09:41 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%85%B3%E4%BA%8E%E9%A5%AD%E5%B1%80%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</guid><description>&lt;blockquote&gt;
&lt;p&gt;看到班级聚会上有人被灌吐了，实在看不下去！&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;其一，为我好我很感激，说以后在社会上总有应酬不得不喝酒，所以即使不能喝还是得喝。我始终信奉我爸的一句话：人家能喝你管他呢，你不能喝就别喝！&lt;/p&gt;</description></item><item><title>忆萝月·端阳</title><link>https://guyueshui.github.io/post/%E5%BF%86%E8%90%9D%E6%9C%88%E7%AB%AF%E9%98%B3/</link><pubDate>Thu, 05 Jun 2014 13:07:26 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%BF%86%E8%90%9D%E6%9C%88%E7%AB%AF%E9%98%B3/</guid><description>&lt;p&gt;禁闱清寂，独卧无好意。拟把乡关枕边诉，花妙榆浓荫细。&lt;/p&gt;
&lt;p&gt;昨夜又见月明，教人何不伤情。他日湖畔信步，徒增云淡风清。&lt;/p&gt;</description></item><item><title>幽浦吟</title><link>https://guyueshui.github.io/post/%E5%B9%BD%E6%B5%A6%E5%90%9F/</link><pubDate>Mon, 26 May 2014 13:19:46 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%B9%BD%E6%B5%A6%E5%90%9F/</guid><description>&lt;p&gt;寂寂幽林密，凄凄夜色清。&lt;/p&gt;
&lt;p&gt;流深散月影，玉泽沁我心。&lt;/p&gt;
&lt;p&gt;长梦忽到此，愿遣青牛住。&lt;/p&gt;</description></item><item><title>题五一心事</title><link>https://guyueshui.github.io/post/%E9%A2%98%E4%BA%94%E4%B8%80%E5%BF%83%E4%BA%8B/</link><pubDate>Sat, 03 May 2014 09:58:21 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%A2%98%E4%BA%94%E4%B8%80%E5%BF%83%E4%BA%8B/</guid><description>&lt;blockquote&gt;
&lt;p&gt;上大学的第一个五一，室友们纷纷出去玩乐，独留我在宿舍，身在异乡，聊感寂寞。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;婉转星辰昨夜媚，参商不见动相离。&lt;/p&gt;
&lt;p&gt;飞云不顾弦声切，野桥静待落花枝。&lt;/p&gt;
&lt;p&gt;偏偏风雨袭人处，寂寂瑶花苦到思。&lt;/p&gt;</description></item><item><title>年少的自大</title><link>https://guyueshui.github.io/post/%E5%B9%B4%E5%B0%91%E7%9A%84%E8%87%AA%E5%A4%A7/</link><pubDate>Sat, 03 May 2014 09:15:00 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%B9%B4%E5%B0%91%E7%9A%84%E8%87%AA%E5%A4%A7/</guid><description>&lt;blockquote&gt;
&lt;p&gt;前言：现在的我不认同当时的我，当时的我似乎以为世界以我为中心，真的是 too young too simple, sometimes naive.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;好，这次我就说的明明白白：对于你们五一各种回家各种玩各种嗨各种秀，我是很羡慕。甚至嫉妒。我也想出去玩，可是我只是讨厌人多的地方，我只是想和两三个好朋友一起，可是，好朋友都在哪呢？我没有好朋友了。没有了吗？在武汉的好朋友有他们自己更要好的朋友，以前的好朋友都一直失联。我努力维系的关系，努力经营的感情，努力关注的人，都没有给我回应。给我的竟是一种热脸贴冷屁股的感觉。或许他们有新的知己，把我给淡忘了，可我却拿着记忆反复温习，生怕会忘！&lt;/p&gt;</description></item><item><title>《仙剑奇侠传》的爱与道</title><link>https://guyueshui.github.io/post/%E8%AF%84%E4%BB%99%E5%89%91/</link><pubDate>Sun, 16 Mar 2014 01:34:00 +0800</pubDate><guid>https://guyueshui.github.io/post/%E8%AF%84%E4%BB%99%E5%89%91/</guid><description>&lt;blockquote&gt;
&lt;p&gt;这么多年最爱的电视剧还是《仙剑奇侠传一》，当年因为一是兴趣，到仙剑贴吧发了这个帖子，被秒删了。我寻思我也没说啥呀，自此没玩过贴吧。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;姜明得道时对逍遥说：你明白吗？&lt;/p&gt;</description></item><item><title>行香子·寄贺双卿</title><link>https://guyueshui.github.io/post/%E8%A1%8C%E9%A6%99%E5%AD%90%E5%AF%84%E8%B4%BA%E5%8F%8C%E5%8D%BF/</link><pubDate>Fri, 14 Mar 2014 15:30:30 +0800</pubDate><guid>https://guyueshui.github.io/post/%E8%A1%8C%E9%A6%99%E5%AD%90%E5%AF%84%E8%B4%BA%E5%8F%8C%E5%8D%BF/</guid><description>&lt;blockquote&gt;
&lt;p&gt;见&lt;a href="../%E9%9B%AA%E5%8E%8B%E8%BD%A9%E9%9B%86"&gt;《雪压轩集》&lt;/a&gt;。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;丝丝柳絮，点点残雨。正春初，愁云乱舞。水田夕下，秋碧楚楚。纵月儿长，日儿短，双卿苦。&lt;/p&gt;
&lt;p&gt;豆蔻妙龄，玉带华年，偏风刀霜剑无诉。幽如白兰，缘命早枯。只怜卿长，叹卿短，代卿哭。&lt;/p&gt;</description></item><item><title>打春诗</title><link>https://guyueshui.github.io/post/%E6%89%93%E6%98%A5%E8%AF%97/</link><pubDate>Tue, 04 Feb 2014 08:56:36 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%89%93%E6%98%A5%E8%AF%97/</guid><description>&lt;p&gt;红日殷勤照，绿草葳蕤发。&lt;/p&gt;
&lt;p&gt;轻霜打薄叶，细雨湿脸颊。&lt;/p&gt;
&lt;p&gt;燕衔去岁诗，牛踏来年花。&lt;/p&gt;
&lt;p&gt;郁结二十载，难忘旧时家。&lt;/p&gt;
&lt;p&gt;附：立春古词&lt;/p&gt;
&lt;p&gt;春日春风动，&lt;/p&gt;
&lt;p&gt;春江春水流。&lt;/p&gt;
&lt;p&gt;春人饮春酒，&lt;/p&gt;
&lt;p&gt;春官鞭春牛。&lt;/p&gt;
&lt;p&gt;&lt;img src="http://a3.qpic.cn/psb?/d2d3ef57-0192-431a-8e3b-8099f609b5c1/3iy80InWRG3Vo7JoBDpdKBO228iHSWBWl2nCii1A4oc!/b/dBUhgU1qFgAA&amp;amp;ek=1&amp;amp;kp=1&amp;amp;pt=0&amp;amp;bo=cQSAAgAAAAABANA!&amp;amp;tl=1&amp;amp;su=0139484193&amp;amp;tm=1585116000&amp;amp;sce=0-12-12&amp;amp;rf=2-9" alt=""&gt;&lt;/p&gt;</description></item><item><title>杂思</title><link>https://guyueshui.github.io/post/%E6%9D%82%E6%80%9D/</link><pubDate>Sun, 19 Jan 2014 12:06:15 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%9D%82%E6%80%9D/</guid><description>&lt;p&gt;回家的第一个早晨，想起去乡里走走。无奈各家都躲在深宫大院里，院门铁锁。问何以至此？曰：“昨儿个杨家电驴儿被盗啦，俺来则速的叫大儿子打了个院儿，小偷再也盗不了俺家货啦！当今的谁家没个铁栅栏水泥地儿的，能防人！”&lt;/p&gt;</description></item><item><title>理园小桂</title><link>https://guyueshui.github.io/post/%E7%90%86%E5%9B%AD%E5%B0%8F%E6%A1%82/</link><pubDate>Fri, 13 Dec 2013 17:14:14 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%90%86%E5%9B%AD%E5%B0%8F%E6%A1%82/</guid><description>&lt;blockquote&gt;
&lt;p&gt;武理时光，大多是屌丝理工男宿舍生活。校园里开遍了石楠花，你懂得。某个恰当的时节，恰当的地点，遇到理学院的桂花香，算得上是人间天堂了。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;寂寞花开寂寞枝，&lt;/p&gt;</description></item><item><title>相思曲</title><link>https://guyueshui.github.io/post/%E7%9B%B8%E6%80%9D%E6%9B%B2/</link><pubDate>Sat, 09 Nov 2013 13:45:37 +0800</pubDate><guid>https://guyueshui.github.io/post/%E7%9B%B8%E6%80%9D%E6%9B%B2/</guid><description>&lt;blockquote&gt;
&lt;p&gt;系为思念友人作。&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;两场相思雨，一处相思苦。&lt;br /&gt;
此相系何物，所思在何处？&lt;br /&gt;
依稀门前柳，朦胧沙坪路。&lt;br /&gt;
曾经多少事，只被相思付。&lt;br /&gt;
相思付相知，相知不与语。&lt;br /&gt;
无语怎奈何，未把相思度。&lt;br /&gt;
独叹岁月长，单将人心改。&lt;br /&gt;
便改恁不改一双，指教人心添若堵。&lt;br /&gt;
此处相思空流露，此时相知难清楚。&lt;br /&gt;
又见野桥飞烟处，一轮相思垂天幕。&lt;br /&gt;
归来却向人人诉：&lt;br /&gt;
最恨相思无相知，一生空被相思误！&lt;/p&gt;</description></item><item><title>临江仙·友</title><link>https://guyueshui.github.io/post/%E4%B8%B4%E6%B1%9F%E4%BB%99%E5%8F%8B/</link><pubDate>Tue, 29 Oct 2013 22:32:30 +0800</pubDate><guid>https://guyueshui.github.io/post/%E4%B8%B4%E6%B1%9F%E4%BB%99%E5%8F%8B/</guid><description>&lt;p&gt;别后音书难寄，梦醒佳期曾寻？去年今日却来时，指点斜阳丽，谈笑细雨霏。&lt;/p&gt;
&lt;p&gt;残风枯草落桂，玉影浮萍无依。闲病一来漫如丝。秋深明月照，夜寂懒人归。&lt;/p&gt;</description></item><item><title>题水阙</title><link>https://guyueshui.github.io/post/%E9%A2%98%E6%B0%B4%E9%98%99/</link><pubDate>Sun, 20 Oct 2013 10:20:46 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%A2%98%E6%B0%B4%E9%98%99/</guid><description>&lt;p&gt;疾风枯叶两相搏，一叹秋光万念空。&lt;/p&gt;
&lt;p&gt;瑟瑟孤霜兰亭瘦，层层幽岚花影重。&lt;/p&gt;
&lt;p&gt;欲投鱼雁心难递，将拟音书愿不衷。&lt;/p&gt;
&lt;p&gt;暂借明月作明镜，照见愁容当笑容。&lt;/p&gt;</description></item><item><title>卜算子·重阳</title><link>https://guyueshui.github.io/post/%E5%8D%9C%E7%AE%97%E5%AD%90%E9%87%8D%E9%98%B3/</link><pubDate>Sun, 13 Oct 2013 06:58:29 +0800</pubDate><guid>https://guyueshui.github.io/post/%E5%8D%9C%E7%AE%97%E5%AD%90%E9%87%8D%E9%98%B3/</guid><description>&lt;p&gt;浩浩江汉天，寂寂雁行促。信拈梧桐一叶愁，泪起相思雨。&lt;/p&gt;
&lt;p&gt;九九又相逢，患难身何处？却把双眉抵作山，淡看秋云暮。&lt;/p&gt;</description></item><item><title>阿莉埃蒂</title><link>https://guyueshui.github.io/post/%E9%98%BF%E8%8E%89%E5%9F%83%E8%92%82/</link><pubDate>Sun, 29 Sep 2013 17:01:39 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%98%BF%E8%8E%89%E5%9F%83%E8%92%82/</guid><description>&lt;blockquote&gt;
&lt;p&gt;看完《借东西的小人阿莉埃蒂》，对于结尾十分有感触。阿莉埃蒂一家人能否找到新的家呢？&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;穿行在静谧的花丛&lt;br /&gt;
蚂蚱蹦跳，蛐蛐乱叫&lt;br /&gt;
活跃在空荡的房子&lt;br /&gt;
翻过碗橱，踏上灯杆&lt;br /&gt;
借东西的路漫长&lt;br /&gt;
时而欢喜，时而忧伤&lt;br /&gt;
栗发沐着暖风，好想凝望天空&lt;br /&gt;
面前是另一个世界&lt;br /&gt;
彩蝶翩翩起舞&lt;br /&gt;
好想为你送一束鲜花&lt;br /&gt;
我并非厌倦&lt;br /&gt;
那个小小的世界&lt;br /&gt;
只是想知道，更多&lt;br /&gt;
更多关于你的事情&lt;br /&gt;
欢喜和忧伤，总是交织在一起&lt;br /&gt;
在太阳下，在花丛里&lt;br /&gt;
想与你度过每一天&lt;br /&gt;
带着这个愿望&lt;br /&gt;
在我的世界里&lt;br /&gt;
走我自己的路&lt;/p&gt;</description></item><item><title>村东头</title><link>https://guyueshui.github.io/post/%E6%9D%91%E4%B8%9C%E5%A4%B4/</link><pubDate>Thu, 29 Aug 2013 12:34:10 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%9D%91%E4%B8%9C%E5%A4%B4/</guid><description>&lt;p&gt;我们村东头，是个好地方。那里水天相接，那里绿草如茵，那里牛羊成群，那里风和日丽。&lt;/p&gt;
&lt;p&gt;小时候，我和我的小伙伴们，骑着脚踏车，在稻场上奔驰，平坦而又起伏，简单而又复杂，这独特的地形是我们最爱的赛道，虽然，我们时不时趴一跤，吃满嘴的泥巴，脚踝被擦破，脚踏车翻在一边，后轮还在飞转，但，我们会立马爬起来，不屑地掸去身上的泥巴，扶起踏板，高傲地再坐上去，继续那待续的路途。&lt;/p&gt;</description></item><item><title>鬼话</title><link>https://guyueshui.github.io/post/%E9%AC%BC%E8%AF%9D/</link><pubDate>Tue, 06 Aug 2013 21:29:49 +0800</pubDate><guid>https://guyueshui.github.io/post/%E9%AC%BC%E8%AF%9D/</guid><description>&lt;p&gt;看官，请随我来。&lt;/p&gt;
&lt;p&gt;你说这大气好不奇妙。我们都知道大气对我们是有压力的，我们为什么感受不到，因为我们体内也有大气压着。哦，那么我们的肚皮不是要承受两份压力吗，那怎么受得了？哦，肚皮是有厚度的，可不能忽略，为什么压不扁呢？大概组成肚皮的层层细胞间也是有大气的，那既然细胞外有大气，那细胞里也要有的，不然不是把细胞压炸了？那细胞壁呢？它是有厚度的，可不能忽略。它是不是像肚皮一样也是由众多微不可见的东西组成的呢？我们之所以知道肚皮、细胞，那是人家告诉的。若是人家没说，我们会这样想，这是由众多的那组成的，那是由众多的这组成的，这样它们都失去了名字，就没什么区别。如果细胞壁想肚皮一样是由众多的某某组成，那这众多的某某又会诞生出下一个系统，如此生生不息，众多的系统都未命名的话，那么排列就无需先后。从中任意挑一个出来既是老祖宗，又是重孙子。就像数轴一样，任意数都可向两侧无限延伸。小而又小是什么？大而又大是什么？照刚才所说，都未命名的话，其实极小与极大是没区别的。一株小草也可以与一颗恒星相提并论。万物都是平等的系统，恒星包含了无限的微粒，小草也是。何为大，何为小，何为物，何为我，都没什么意思。&lt;strong&gt;无极之内，在极之外&lt;/strong&gt;。世界本就是模糊朦胧混沌的，婴儿的大脑是最高的境界。看官可能会说，婴儿可不知道这些，更没有思考过这些。其实这就像一开始的陌路，和最终相忘江湖的两个人，表面上没有任何区别，但其中确有种种微妙。老庄说的至人无己，至人的大脑大概是和婴儿一样的，至人确有了质的飞越。从无中来，再到无中去，这便是一生的修行！老人和婴儿便是一个系统的出入口，其始亦是终。&lt;/p&gt;</description></item><item><title>杂记</title><link>https://guyueshui.github.io/post/%E6%9D%82%E8%AE%B0/</link><pubDate>Mon, 17 Jun 2013 21:40:53 +0800</pubDate><guid>https://guyueshui.github.io/post/%E6%9D%82%E8%AE%B0/</guid><description>&lt;p&gt;每当我提笔想写些什么，心里便虚荣起来。总想写出深奥，晦涩，精炼，优美的话语，让人们好加点评，其实都是故弄玄虚而已，真个应了“为赋新词强说愁”。故而入眼尽是哀景，入耳尽是悲歌，所写尽是愁滋味。而空造之言又能打动几人？最多打发看官无聊的时间而已，这是没有意义的！&lt;/p&gt;</description></item><item><title>BSearch</title><link>https://guyueshui.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/search/</guid><description/></item><item><title>Hello World</title><link>https://guyueshui.github.io/post/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/hello-world/</guid><description>&lt;p&gt;Welcome to &lt;a href="https://hexo.io/"&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href="https://hexo.io/docs/"&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href="https://hexo.io/docs/troubleshooting.html"&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href="https://github.com/hexojs/hexo/issues"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="quick-start"&gt;Quick Start&lt;/h2&gt;
&lt;h3 id="create-a-new-post"&gt;Create a new post&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ hexo new &lt;span class="s2"&gt;&amp;#34;My New Post&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a href="https://hexo.io/docs/writing.html"&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="run-server"&gt;Run server&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ hexo server
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a href="https://hexo.io/docs/server.html"&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="generate-static-files"&gt;Generate static files&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ hexo generate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a href="https://hexo.io/docs/generating.html"&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="deploy-to-remote-sites"&gt;Deploy to remote sites&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;$ hexo deploy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;More info: &lt;a href="https://hexo.io/docs/deployment.html"&gt;Deployment&lt;/a&gt;&lt;/p&gt;</description></item></channel></rss>