<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on 水阙</title>
    <link>https://guyueshui.github.io/categories/notes/</link>
    <description>Recent content in Notes on 水阙</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Sep 2019 11:05:10 +0800</lastBuildDate>
    
	<atom:link href="https://guyueshui.github.io/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>设计模式学习笔记</title>
      <link>https://guyueshui.github.io/post/design-pattern-notes/</link>
      <pubDate>Mon, 02 Sep 2019 11:05:10 +0800</pubDate>
      
      <guid>https://guyueshui.github.io/post/design-pattern-notes/</guid>
      <description>如无特殊声明：本文所有UML图均出自《图说设计模式》。在此特别鸣谢！ Singleton 单例模式解决了全局变量的问题，全局只能创建一个实例，保证任何请求该实例</description>
    </item>
    
    <item>
      <title>多线程学习笔记</title>
      <link>https://guyueshui.github.io/post/concurrent-programming/</link>
      <pubDate>Thu, 29 Aug 2019 21:40:23 +0800</pubDate>
      
      <guid>https://guyueshui.github.io/post/concurrent-programming/</guid>
      <description>开一篇多线程学习笔记，记录下在实习过程中遇到的一些简单问题。 注意：这是一篇以学习笔记，难免有误，主要写给自己参考。请酌情判别，如有错误，也欢</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 学习笔记</title>
      <link>https://guyueshui.github.io/post/cpp-learn/</link>
      <pubDate>Wed, 28 Aug 2019 22:52:32 +0800</pubDate>
      
      <guid>https://guyueshui.github.io/post/cpp-learn/</guid>
      <description>诚如是，Life is too short to learn c++. 此篇记录一些我在学习cpp过程中遇到的一些知识点，仅作记录并梳理之效。里面可能会有大量参考其他网络博客，如有侵权</description>
    </item>
    
    <item>
      <title>位域结构体简介</title>
      <link>https://guyueshui.github.io/post/bit-field-struct/</link>
      <pubDate>Tue, 06 Aug 2019 20:43:02 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/bit-field-struct/</guid>
      <description>最近实习接触到一个新的知识点，C/C++的位域结构体。 以下开始摘抄自：here 位段(bit-field)是以位为单位来定义结构体(或联合体)</description>
    </item>
    
    <item>
      <title>面试笔记整理</title>
      <link>https://guyueshui.github.io/post/interview-notes/</link>
      <pubDate>Mon, 08 Jul 2019 20:14:17 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/interview-notes/</guid>
      <description>总结一下这几个月的面试经历中被问到的问题，虽说问得都很浅，但是，问深了我也不会呀！ C++相关 Q: std::vector push_back 的复杂度是多少？ A: O(1), amortized constant. Q: vector从1</description>
    </item>
    
    <item>
      <title>The Beauty of Recursion</title>
      <link>https://guyueshui.github.io/post/the-beauty-of-recursion/</link>
      <pubDate>Tue, 23 Apr 2019 09:08:28 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/the-beauty-of-recursion/</guid>
      <description>Declaration: this article is in long time editing...
Here comes some beautiful recursive solutions to some problems.
Examples Some of the problems have a very nice recursive structure, we can deal with them just using one step recursion.
Fibonacci Numbers The first comes very famous Fibonacci Numbers, which is a sequence of
0, 1, 1, 2, 3, 5, 8, 13 ...
The structure is easily captured, if we use $\text{fib}(n)$ to denote the $n^{\text{th}}$ Fibonacci Number (n is assumed to start from 0).</description>
    </item>
    
    <item>
      <title>神奇的位运算</title>
      <link>https://guyueshui.github.io/post/%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</link>
      <pubDate>Mon, 08 Apr 2019 10:35:16 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</guid>
      <description>In editing... 必备知识 以下部分转载自：http://www.cnblogs.com/junsky/archive/2009/08/06/1540727</description>
    </item>
    
    <item>
      <title>A collection of some coding problems</title>
      <link>https://guyueshui.github.io/post/coding-problems/</link>
      <pubDate>Sun, 07 Apr 2019 19:31:59 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/coding-problems/</guid>
      <description>场景题 题一：最高得分 一个长度为$N$的序列，玩家每次只能从头部或尾部拿数字，不能从中间拿。拿走的数字依次从左到右排列在自己面前。拿完$N$个</description>
    </item>
    
    <item>
      <title>瞎说 KMP 算法</title>
      <link>https://guyueshui.github.io/post/%E7%9E%8E%E8%AF%B4kmp%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 04 Apr 2019 00:05:41 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/%E7%9E%8E%E8%AF%B4kmp%E7%AE%97%E6%B3%95/</guid>
      <description>前天做百度笔试，没想到居然出往年的题！哼！更惨的是出了我也不会！我以为只是一个简简单单的字符串匹配，没想到要动用这么难懂的算法。说起来算法导</description>
    </item>
    
    <item>
      <title>初尝 C&#43;&#43; 类设计</title>
      <link>https://guyueshui.github.io/post/%E5%88%9D%E5%B0%9D-c-%E7%B1%BB%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 02 Apr 2019 21:31:40 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/%E5%88%9D%E5%B0%9D-c-%E7%B1%BB%E8%AE%BE%E8%AE%A1/</guid>
      <description>最近在准备笔试，于是在各种网站上刷题嘛。期间做了百度某年的一道编程题。 小B最近对电子表格产生了浓厚的兴趣，她觉得电子表格很神奇，功能远比她想</description>
    </item>
    
    <item>
      <title>LeetCode: Sum of Two Integers</title>
      <link>https://guyueshui.github.io/post/leetcode-sum-of-two-integers/</link>
      <pubDate>Tue, 26 Mar 2019 14:53:51 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/leetcode-sum-of-two-integers/</guid>
      <description>记录一下LeetCode做的一道题。要求实现两个整数的加法，但不能使用内置的+或-. 原题地址：https://leetcode.com/pr</description>
    </item>
    
    <item>
      <title>浅谈 Logistic 回归</title>
      <link>https://guyueshui.github.io/post/%E6%B5%85%E8%B0%88-logistic-%E5%9B%9E%E5%BD%92/</link>
      <pubDate>Fri, 15 Mar 2019 22:59:39 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/%E6%B5%85%E8%B0%88-logistic-%E5%9B%9E%E5%BD%92/</guid>
      <description>In editing... Logistic回归属于分类模型！！！ 从最小二乘说起 线性回归 概率解释 Sigmoid函数的引入 如果把我比作一张白纸，在我的知识储备中，现在</description>
    </item>
    
    <item>
      <title>Matrix Factorization</title>
      <link>https://guyueshui.github.io/post/matrix-factorization/</link>
      <pubDate>Thu, 03 Jan 2019 21:07:38 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/matrix-factorization/</guid>
      <description>Preliminaries Def: A matrix $A \in M_n$ is normal if $AA^∗ = A^∗A$, that is, if $A$ commutes with its conjugate transpose.
Def: A complex matrix $A$ is unitary if $AA^∗ = I$ or $A^∗A = I$, and a real matrix $B$ is orthogonal if $BB^T = I$ or $B^TB = I$.
There is no so-called &amp;quot;orthonormal&amp;quot; matrix. There is just an orthogonal matrix whose rows or columns are orthonormal vectors.</description>
    </item>
    
    <item>
      <title>在 Beamer 中使用参考文献</title>
      <link>https://guyueshui.github.io/post/use-reference-in-beamer/</link>
      <pubDate>Thu, 03 Jan 2019 16:05:47 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/use-reference-in-beamer/</guid>
      <description>Needs polish! 前略。 Beamer 引用参考文献与文章类似，只是一开始听说 beamer 不支持 \cite，搞得我走了不少弯路（其实是可以的）。 使用 bibtex 假设你有 mybeamer.tex 文件，在同目录下新</description>
    </item>
    
    <item>
      <title>Exponential Distribution</title>
      <link>https://guyueshui.github.io/post/exponetial-distribution/</link>
      <pubDate>Tue, 25 Dec 2018 22:21:49 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/exponetial-distribution/</guid>
      <description>Story  The Exponential distribution is the continuous counterpart to the Geometric distribution. The story of the Exponential distribution is analogous, but we are now waiting for a success in continuous time, where successes arrive at a rate of $\lambda$ successes per unit of time. The average number of successes in a time interval of length $t$ is $\lambda t$, though the actual number of successes varies randomly. An Exponential random variable represents the waiting time until the first arrival of a success.</description>
    </item>
    
    <item>
      <title>一些推导</title>
      <link>https://guyueshui.github.io/post/%E4%B8%80%E4%BA%9B%E6%8E%A8%E5%AF%BC/</link>
      <pubDate>Thu, 20 Dec 2018 19:18:29 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/%E4%B8%80%E4%BA%9B%E6%8E%A8%E5%AF%BC/</guid>
      <description>高斯分布的微分熵 $X \sim \mathcal{N}(\mu, \sigma^2)~$，$\displaystyle f(x)=\frac{1}{\sqrt{2\pi\sigma^2}</description>
    </item>
    
    <item>
      <title>最大熵对应的概率分布</title>
      <link>https://guyueshui.github.io/post/%E6%9C%80%E5%A4%A7%E7%86%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</link>
      <pubDate>Wed, 01 Aug 2018 18:02:36 +0000</pubDate>
      
      <guid>https://guyueshui.github.io/post/%E6%9C%80%E5%A4%A7%E7%86%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</guid>
      <description>最大熵定理 设 $X \sim p(x)$ 是一个连续型随机变量，其微分熵定义为 $$ h(X) = - \int p(x)\log p(x) dx $$ 其中，$\log$ 一般取自然对数 $\ln$, 单位为 奈特（nats）。 考虑如下优</description>
    </item>
    
  </channel>
</rss>