<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on 水阙</title><link>https://guyueshui.github.io/categories/notes/</link><description>Recent content in Notes on 水阙</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 11 Sep 2024 14:57:54 +0800</lastBuildDate><atom:link href="https://guyueshui.github.io/categories/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>C++ 中的 static 关键字</title><link>https://guyueshui.github.io/post/static-in-cpp/</link><pubDate>Thu, 21 Apr 2022 23:52:04 +0800</pubDate><guid>https://guyueshui.github.io/post/static-in-cpp/</guid><description>&lt;h2 id="static-members">Static members&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">A&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// non-static member (i.e., `data` is not visible in `fun1`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="n">fun1&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fun2&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">private&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">A&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fun1&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// valid, equivalent to the following
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">fun1&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol>
&lt;li>静态成员不能访问非静态成员（因为静态成员独立与类的实例（即对象）而存在，为了在没有对象被创建的情况下，静态成员还是可以使用，所以不能访问非静态成员。）&lt;/li>
&lt;li>同理，类的任何对象不包含静态数据成员&lt;/li>
&lt;li>静态成员不与对象，不与&lt;code>this&lt;/code>指针发生交互，作为结果，静态成员函数不能声明为&lt;code>const&lt;/code>&lt;/li>
&lt;li>可以通过类的对象调用静态成员函数，但此调用跟对象的状态并无关系，也就是说换个对象来调用是等价的，都等价于使用类名加域作用符来调用&lt;/li>
&lt;li>静态成员一般定义在类的外部，因为每个对象都共享静态成员，避免多次定义&lt;/li>
&lt;li>View static member as a normal function that has nothing to do with the class, except you must use &lt;code>::&lt;/code> to access static members&lt;/li>
&lt;/ol></description></item><item><title>A point of python metaclass</title><link>https://guyueshui.github.io/post/python-metaclass/</link><pubDate>Sun, 12 Dec 2021 12:55:45 +0800</pubDate><guid>https://guyueshui.github.io/post/python-metaclass/</guid><description>&lt;h2 id="create-class-dynamically">Create &lt;code>class&lt;/code> dynamically&lt;/h2>
&lt;p>Python doc says:&lt;/p>
&lt;blockquote>
&lt;p>By default, classes are constructed using &lt;code>type()&lt;/code>. The class body is executed in a new namespace and the class name is bound locally to the result of &lt;code>type(name, bases, namespace)&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;p>That&amp;rsquo;s means, a &lt;code>class&lt;/code> statement is equivalent to the call of &lt;code>type&lt;/code> method with three arguments:&lt;/p>
&lt;ul>
&lt;li>name: name of the class&lt;/li>
&lt;li>bases: tuple of the parent class (for inheritance, can be empty)&lt;/li>
&lt;li>attrs: dictionary containing attributes names and values.&lt;/li>
&lt;/ul>
&lt;p>For example, the following classes are identical:&lt;/p></description></item><item><title>V3Ray 的配置笔记</title><link>https://guyueshui.github.io/post/build-your-ladder/</link><pubDate>Tue, 07 Dec 2021 22:05:42 +0800</pubDate><guid>https://guyueshui.github.io/post/build-your-ladder/</guid><description>&lt;p>学生时代曾为整个课题组的师生搭建过一个梯子，稳定运行两年多，最近突然爬不上去了。
寻思是哪里出了问题，经过一番定位，原来是之前的免费域名到期了。遂于昨晚开启修补
之旅，无奈运气不太好，每一环节都出了问题，最终搞到凌晨 3 点才重新爬上了梯子。&lt;/p></description></item><item><title>Python Iterables</title><link>https://guyueshui.github.io/post/python-iterables/</link><pubDate>Sun, 21 Feb 2021 22:26:30 +0800</pubDate><guid>https://guyueshui.github.io/post/python-iterables/</guid><description>&lt;p>Python 的迭代器（iterator）、生成器（generator）、可迭代对象（iterable），虽是老生常谈，但我毕竟要记录一下自己的见解，因有此篇。&lt;/p></description></item><item><title>一个 really simple 的 LaTeX 宏包</title><link>https://guyueshui.github.io/post/tex-sty-basic/</link><pubDate>Sun, 26 Apr 2020 09:25:09 +0800</pubDate><guid>https://guyueshui.github.io/post/tex-sty-basic/</guid><description>&lt;p>众所周知，LaTeX 是一个高效易用的排版软件，基本上只要找到合适的模板，剩下的就只剩码字了。比起 MS Word，简直不知道高到哪里去。就拿最近写论文的事来说，我先用 TeX 码好字，然后要投的那个刊需要用 Word 提交。转格式转了我一下午带一晚上，太痛苦了。深刻的体会到什么叫自以为是，MS Word 自作聪明地给你调格式。当你敲下回车之后，天知道它又会自动帮你做些什么？！&lt;/p></description></item><item><title>Gnome 应用启动缓慢</title><link>https://guyueshui.github.io/post/gnome-app-slow-start/</link><pubDate>Wed, 01 Apr 2020 23:01:36 +0800</pubDate><guid>https://guyueshui.github.io/post/gnome-app-slow-start/</guid><description>&lt;p>先看环境：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ neofetch
 -` yychi@MiBook-Air 
 .o+` ---------------- 
 `ooo/ OS: Arch Linux x86_64 
 `+oooo: Host: TM1604 XMAKB3M0P0202 
 `+oooooo: Kernel: 5.5.13-arch2-1 
 -+oooooo+: Uptime: 5 mins 
 `/:-:++oooo+: Packages: 1153 (pacman) 
 `/++++/+++++++: Shell: zsh 5.8 
 `/++++++++++++++: Resolution: 1920x1080 
 `/+++ooooooooooooo/` WM: i3 
 ./ooosssso++osssssso+` Theme: Adwaita [GTK2] 
 .oossssso-````/ossssss+` Icons: Adwaita [GTK2] 
 -osssssso. :ssssssso. Terminal: urxvt 
 :osssssss/ osssso+++. Terminal Font: DejaVu Sans Mono for Powerline 
 /ossssssss/ +ssssooo/- CPU: Intel i5-7200U (4) @ 3.100GHz 
 `/ossssso+/:- -:/+osssso+- GPU: NVIDIA GeForce MX150 
 `+sso+:-` `.-/+oso: GPU: Intel HD Graphics 620 
 `++:. `-/+/ Memory: 1608MiB / 7881MiB 
 .` `/
&lt;/code>&lt;/pre>&lt;p>再看问题：Gnome 系软件（gedit, baobab, nautilus 等）启动龟速，通常需要等待 10-30s.&lt;/p></description></item><item><title>Metapost 学习笔记</title><link>https://guyueshui.github.io/post/metapost/</link><pubDate>Tue, 31 Mar 2020 09:20:44 +0800</pubDate><guid>https://guyueshui.github.io/post/metapost/</guid><description>&lt;p>想必你也有过这样的疑问，中学数学书上的那些精美的作图是如何画出来的？一直以来，我都想学习一门绘图语言，只是久久未能行动 orz&amp;hellip;&lt;/p>
&lt;p>&lt;img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3812944475,2492602811&amp;amp;fm=26&amp;amp;gp=0.jpg" alt="">&lt;/p>
&lt;p>闲话少叙，开始学习！&lt;/p></description></item><item><title>转义字符到底是什么</title><link>https://guyueshui.github.io/post/what-is-escape-character/</link><pubDate>Wed, 18 Mar 2020 22:41:06 +0800</pubDate><guid>https://guyueshui.github.io/post/what-is-escape-character/</guid><description>&lt;p>转义字符到底是啥？&lt;/p>
&lt;p>实不相瞒我就是因为不知道才写下这篇文章，不，准确的说是这篇笔记 orz，既然是笔记，无所谓抄不抄了。每次说到转义字符，多少有点模糊，所以不如记下这篇笔记，以后忘了直接翻出来看看，复习起来要快一些。&lt;/p></description></item><item><title>Brief Introduction to Shell Script</title><link>https://guyueshui.github.io/post/shell-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/shell-intro/</guid><description>&lt;p>This article is mainly refered to &amp;ldquo;The Linux Command Line&amp;rdquo;&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. I just take
some most important things out of the book.&lt;/p>
&lt;h2 id="expansion">Expansion&lt;/h2>
&lt;p>Each time you type a command line and press the &lt;kbd>Enter&lt;/kbd> key, bash
performs several processes upon the text before it carries out your command.
Just look an example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>me@linuxbox ~&lt;span class="o">]&lt;/span>$ &lt;span class="nb">echo&lt;/span> *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Desktop Documents ls-output.txt Music Pictures Public Templates Videos
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Why not display an asterisk? That&amp;rsquo;s &lt;strong>expansion&lt;/strong>! &lt;code>*&lt;/code> &lt;em>expands&lt;/em> to all files in
current directory.&lt;/p></description></item><item><title>Nueral Network Learning Notes</title><link>https://guyueshui.github.io/post/nn-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/nn-notes/</guid><description>&lt;p>Hello here.&lt;/p>
&lt;h2 id="cnn">CNN&lt;/h2>
&lt;h3 id="conv-layer">Conv Layer&lt;/h3>
&lt;p>Conv Layer is usually decreasing the input size, i.e., the output size may less or equal than input.&lt;/p>
&lt;ul>
&lt;li>take a volume as input: height x weight x depth, e.g., 32x32x3. Typically think an image having three channels: R, G, B.&lt;/li>
&lt;li>a filter has the same depth as the input volume, e.g., 5x5x3 (since the filter always has a same depth as input vloume, the depth of the filter is sometimes omitted).&lt;/li>
&lt;li>each filter convolving with the input will produce an activation map, two filters will produce two, etc.&lt;/li>
&lt;/ul>
&lt;p>The result of the convolution at each location is just a scalar number (the result of taking a dot product between the filter and a small chunk of the image, i.e., $5\times 5 \times 3 = 75$-dimensional dot product + bias: $w^\top x + b$), which totally yields a 2D matrix (called &lt;strong>activation map&lt;/strong>) as the filter sliding over the image. For example, 32x32x3 image convolved by 5x5x3 filter will yield a 28x28 activation map.&lt;/p></description></item><item><title>服务端开发预备知识</title><link>https://guyueshui.github.io/post/server-develop-preliminaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/server-develop-preliminaries/</guid><description>&lt;h2 id="操作系统">操作系统&lt;/h2>
&lt;blockquote>
&lt;p>摘自《程序员面试白皮书》&lt;/p>
&lt;/blockquote>
&lt;h3 id="进程-vs线程">进程 vs.线程&lt;/h3>
&lt;p>进程（process）与线程（thread）最大的区别是进程拥有自己的地址空间，某进程内的线程对于其他的进程不可见，即进程 A 不能通过传地址的方式直接读写进程 B 的存储区域。进程之间的通信需要通过进程间通信（Inter-process communication, IPC）。与之相对的，同一进程的各线程间可以直接通过传递地址或全局变量的方式传递信息。&lt;/p></description></item><item><title>设计模式学习笔记</title><link>https://guyueshui.github.io/post/design-pattern-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/design-pattern-notes/</guid><description>&lt;p>如无特殊声明：本文所有 UML 图均出自《图说设计模式》。在此特别鸣谢！&lt;/p>
&lt;h2 id="singleton">Singleton&lt;/h2>
&lt;p>单例模式解决了全局变量的问题，全局只能创建一个实例，保证任何请求该实例的调用均返回同一个对象，保证不会被意外析构。&lt;/p></description></item><item><title>多线程学习笔记</title><link>https://guyueshui.github.io/post/concurrent-programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://guyueshui.github.io/post/concurrent-programming/</guid><description>&lt;p>开一篇多线程学习笔记，记录下在实习过程中遇到的一些简单问题。&lt;/p>
&lt;blockquote>
&lt;p>注意：这是一篇以学习笔记，难免有误，主要写给自己参考。请酌情判别，如有错误，也欢迎指正！&lt;/p></description></item><item><title>博客迁移记录</title><link>https://guyueshui.github.io/post/blog-trans/</link><pubDate>Sun, 25 Aug 2019 16:00:50 +0800</pubDate><guid>https://guyueshui.github.io/post/blog-trans/</guid><description>&lt;p>终于还是干了！很早以前就有了这个想法，起初使用 &lt;a href="https://hexo.io">Hexo&lt;/a> 搭的博客，折腾了一段时间，选了一个不错的主题 &lt;a href="https://github.com/Molunerfinn/hexo-theme-melody">Melody&lt;/a>。一切都进行的很好，直到有一天又发现 &lt;a href="https://gohugo.io">Hugo&lt;/a> 这么个东西，登时就忍不住了，不是说原来的不好，二十 Hugo 太特么快了，无论是渲染速度还是博客生成，几乎就像是在本地打开 html 一样。相比之下 Hexo 的生成速度就显得很慢了，思来想去，博客应该更多关注内容，之前那个配置的有些花哨了，现在换了 Hugo，也使用了一个比较简单的主题，相比之下更轻量，打开速度更快，以后就该专注于内容了。这里烧纸纪念下一下我之前的皮肤：&lt;/p></description></item><item><title>位域结构体简介</title><link>https://guyueshui.github.io/post/bit-field-struct/</link><pubDate>Tue, 06 Aug 2019 20:43:02 +0000</pubDate><guid>https://guyueshui.github.io/post/bit-field-struct/</guid><description>&lt;p>最近实习接触到一个新的知识点，C/C++ 的位域结构体。&lt;/p>
&lt;p>以下开始摘抄自：&lt;a href="https://www.cnblogs.com/dolphin0520/archive/2011/10/14/2212590.html">here&lt;/a>&lt;/p>
&lt;p>位段 (bit-field) 是以位为单位来定义结构体 (或联合体) 中的成员变量所占的空间。含有位段的结构体 (联合体) 称为位段结构。采用位段结构既能够节省空间，又方便于操作。&lt;/p></description></item><item><title>面试经历及笔记</title><link>https://guyueshui.github.io/post/interview-notes/</link><pubDate>Mon, 08 Jul 2019 20:14:17 +0000</pubDate><guid>https://guyueshui.github.io/post/interview-notes/</guid><description>&lt;p>总结一下这几个月的面试经历中被问到的问题，虽说问得都很浅，但是，问深了我也不会呀！&lt;/p>
&lt;h2 id="c-相关">C++ 相关&lt;/h2>
&lt;p>Q: &lt;code>std::vector&lt;/code> push_back 的复杂度是多少？
A: O(1), amortized constant.&lt;/p>
&lt;p>Q: vector 从 1 到 n push n 个元素，假设发生扩容时按两倍增长，写出复杂度关于 n 的表达式？
A: 不会。&lt;/p></description></item><item><title>The Beauty of Recursion</title><link>https://guyueshui.github.io/post/the-beauty-of-recursion/</link><pubDate>Tue, 23 Apr 2019 09:08:28 +0000</pubDate><guid>https://guyueshui.github.io/post/the-beauty-of-recursion/</guid><description>&lt;p>&lt;font color="red">Declaration: this article is in long time editing&amp;hellip;&lt;/font>&lt;/p>
&lt;hr>
&lt;p>Here comes some beautiful recursive solutions to some problems.&lt;/p>
&lt;h2 id="examples">Examples&lt;/h2>
&lt;p>Some of the problems have a very nice recursive structure, we can deal with them just using one step recursion.&lt;/p>
&lt;h3 id="fibonacci-numbers">Fibonacci Numbers&lt;/h3>
&lt;p>The first comes very famous Fibonacci Numbers, which is a sequence of
0, 1, 1, 2, 3, 5, 8, 13 &amp;hellip;
The structure is easily captured, if we use $\text{fib}(n)$ to denote the $n^{\text{th}}$ Fibonacci Number (n is assumed to start from 0).
$$
\text{fib}(n) = \begin{cases}
n, &amp;amp;\text{ if } n \le 1 \newline
\text{fib}(n-1) + \text{fib}(n-2), &amp;amp;\text{ if } n &amp;gt; 1.
\end{cases}
$$
That is why we can write easily a procedure to compute the fibs. If we use MIT Scheme, we can write as follows:&lt;/p></description></item><item><title>神奇的位运算</title><link>https://guyueshui.github.io/post/%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</link><pubDate>Mon, 08 Apr 2019 10:35:16 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/</guid><description>&lt;p>In editing&amp;hellip;&lt;/p>
&lt;h2 id="必备知识">必备知识&lt;/h2>
&lt;p>首先要对原码、反码、补码有一定理解，推荐阅读此文：https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html&lt;/p></description></item><item><title>A collection of some coding problems</title><link>https://guyueshui.github.io/post/coding-problems/</link><pubDate>Sun, 07 Apr 2019 19:31:59 +0000</pubDate><guid>https://guyueshui.github.io/post/coding-problems/</guid><description>&lt;h1 id="场景题">场景题&lt;/h1>
&lt;h2 id="题一最高得分">题一：最高得分&lt;/h2>
&lt;p>一个长度为$N$的序列，玩家每次只能从头部或尾部拿数字，不能从中间拿。拿走的数字依次从左到右排列在自己面前。拿完$N$个数字之后，游戏结束。此时$N$个数字在玩家面前组成一个新的排列，这个数列每相邻两个数字之差的绝对值之和为玩家最终得分。假设玩家前面的$N$个数字从左到右标号为 $n_1,n_2, \dots, n_N$，则最终得分$S$的计算方式如下：
$$
S = \text{abs}(n_1-n_2) + \text{abs}(n_2-n_3) + \cdots + \text{abs}(n_{N-1} - n_N).
$$&lt;/p></description></item><item><title>瞎说 KMP 算法</title><link>https://guyueshui.github.io/post/%E7%9E%8E%E8%AF%B4kmp%E7%AE%97%E6%B3%95/</link><pubDate>Thu, 04 Apr 2019 00:05:41 +0000</pubDate><guid>https://guyueshui.github.io/post/%E7%9E%8E%E8%AF%B4kmp%E7%AE%97%E6%B3%95/</guid><description>&lt;p>前天做百度笔试，没想到居然出往年的题！哼！更惨的是出了我也不会！我以为只是一个简简单单的字符串匹配，没想到要动用这么难懂的算法。说起来算法导论上也有，只是之前没看到那里。所以，总结一下：我本有好多次机会学习它，然而一次都没有把握。:(&lt;/p></description></item><item><title>初尝 C++ 类设计</title><link>https://guyueshui.github.io/post/%E5%88%9D%E5%B0%9D-c-%E7%B1%BB%E8%AE%BE%E8%AE%A1/</link><pubDate>Tue, 02 Apr 2019 21:31:40 +0000</pubDate><guid>https://guyueshui.github.io/post/%E5%88%9D%E5%B0%9D-c-%E7%B1%BB%E8%AE%BE%E8%AE%A1/</guid><description>&lt;p>最近在准备笔试，于是在各种网站上刷题嘛。期间做了百度某年的一道 &lt;a href="http://exercise.acmcoder.com/online/online_judge_ques?ques_id=3821&amp;amp;konwledgeId=40">编程题&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>小 B 最近对电子表格产生了浓厚的兴趣，她觉得电子表格很神奇，功能远比她想象的强大。她正在研究的是单元格的坐标编号，她发现表格单元一般是按列编号的，第 1 列编号为 A，第 2 列为 B，以此类推，第 26 列为 Z。之后是两位字符编号的，第 27 列编号为 AA，第 28 列为 AB，第 52 列编号为 AZ。之后则是三位、四位、五位……字母编号的，规则类似。&lt;/p></description></item><item><title>LeetCode: Sum of Two Integers</title><link>https://guyueshui.github.io/post/leetcode-sum-of-two-integers/</link><pubDate>Tue, 26 Mar 2019 14:53:51 +0000</pubDate><guid>https://guyueshui.github.io/post/leetcode-sum-of-two-integers/</guid><description>&lt;p>记录一下 LeetCode 做的一道题。要求实现两个整数的加法，但不能使用内置的&lt;code>+&lt;/code>或&lt;code>-&lt;/code>. 原题地址：https://leetcode.com/problems/sum-of-two-integers/&lt;/p></description></item><item><title>浅谈 Logistic 回归</title><link>https://guyueshui.github.io/post/%E6%B5%85%E8%B0%88-logistic-%E5%9B%9E%E5%BD%92/</link><pubDate>Fri, 15 Mar 2019 22:59:39 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%B5%85%E8%B0%88-logistic-%E5%9B%9E%E5%BD%92/</guid><description>&lt;p>In editing&amp;hellip;&lt;/p>
&lt;p>&lt;strong>Logistic 回归属于分类模型！！！&lt;/strong>&lt;/p>
&lt;h2 id="从最小二乘说起">从最小二乘说起&lt;/h2>
&lt;h2 id="线性回归">线性回归&lt;/h2>
&lt;h2 id="概率解释">概率解释&lt;/h2>
&lt;h2 id="sigmoid-函数的引入">Sigmoid 函数的引入&lt;/h2>
&lt;p>如果把我比作一张白纸，在我的知识储备中，现在只有线性回归。但是要处理分类问题，我该怎么办？没办法，先考虑一个二分类问题，$y \in {0,1}$，我们准备霸王硬上弓，用回归模型套上去！
$$
y = h_{\theta}(x)
$$&lt;/p></description></item><item><title>Matrix Factorization</title><link>https://guyueshui.github.io/post/matrix-factorization/</link><pubDate>Thu, 03 Jan 2019 21:07:38 +0000</pubDate><guid>https://guyueshui.github.io/post/matrix-factorization/</guid><description>&lt;h2 id="preliminaries">Preliminaries&lt;/h2>
&lt;p>&lt;strong>Def&lt;/strong>: A matrix $A \in M_n$ is &lt;em>normal&lt;/em> if $AA^∗ = A^∗A$, that is, if $A$ commutes with its conjugate transpose.&lt;/p>
&lt;p>&lt;strong>Def&lt;/strong>: A complex matrix $A$ is &lt;em>unitary&lt;/em> if $AA^∗ = I$ or $A^∗A = I$, and a real matrix $B$ is &lt;em>orthogonal&lt;/em> if $BB^T = I$ or $B^TB = I$.&lt;/p>
&lt;p>&lt;img src="https://i.loli.net/2019/01/03/5c2e1178ec116.png" alt="Image adapted from Meyer&amp;rsquo;s book">&lt;/p>
&lt;p>&lt;strong>There is no so-called &amp;ldquo;orthonormal&amp;rdquo; matrix. There is just an orthogonal matrix whose rows or columns are orthonormal vectors.&lt;/strong>&lt;/p></description></item><item><title>Exponential Distribution</title><link>https://guyueshui.github.io/post/exponetial-distribution/</link><pubDate>Tue, 25 Dec 2018 22:21:49 +0000</pubDate><guid>https://guyueshui.github.io/post/exponetial-distribution/</guid><description>&lt;h2 id="story">Story&lt;/h2>
&lt;blockquote>
&lt;p>The Exponential distribution is the continuous counterpart to the &lt;a href="file://./Geometric-Distribution.md">Geometric distribution&lt;/a>. The story of the Exponential distribution is analogous, but we are now waiting for a success in continuous time, where successes arrive at a rate of $\lambda$ successes per unit of time. The average number of successes in a time interval of length $t$ is $\lambda t$, though the actual number of successes varies randomly. An Exponential random variable represents the waiting time until the first arrival of a success.&lt;/p></description></item><item><title>常用结论的证明记录</title><link>https://guyueshui.github.io/post/%E4%B8%80%E4%BA%9B%E6%8E%A8%E5%AF%BC/</link><pubDate>Thu, 20 Dec 2018 19:18:29 +0000</pubDate><guid>https://guyueshui.github.io/post/%E4%B8%80%E4%BA%9B%E6%8E%A8%E5%AF%BC/</guid><description>&lt;h2 id="高斯分布的微分熵">高斯分布的微分熵&lt;/h2>
&lt;p>$X \sim \mathcal{N}(\mu, \sigma^2)~$，$\displaystyle f(x)=\frac{1}{\sqrt{2\pi\sigma^2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$，其微分熵推导过程如下：&lt;/p></description></item><item><title>最大熵对应的概率分布</title><link>https://guyueshui.github.io/post/%E6%9C%80%E5%A4%A7%E7%86%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</link><pubDate>Wed, 01 Aug 2018 18:02:36 +0000</pubDate><guid>https://guyueshui.github.io/post/%E6%9C%80%E5%A4%A7%E7%86%B5%E5%AF%B9%E5%BA%94%E7%9A%84%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83/</guid><description>&lt;h2 id="最大熵定理">最大熵定理&lt;/h2>
&lt;p>&lt;em>设 $X \sim p(x)$ 是一个连续型随机变量，其微分熵定义为&lt;/em>
$$
h(X) = - \int p(x)\log p(x) dx
$$
&lt;em>其中，$\log$ 一般取自然对数 $\ln$, 单位为 奈特（nats）。&lt;/em>&lt;/p>
&lt;!-- more -->
&lt;p>考虑如下优化问题：
$$
\begin{array}{ll}
&amp;amp;\underset{p}{\text{Maximize}} &amp;amp; \displaystyle h(p) = - \int_S p(x)\log p(x) dx \newline
&amp;amp;\text{Subject to} &amp;amp;\displaystyle \int_S p(x) dx = 1 \newline
&amp;amp;~ &amp;amp; p(x) \ge 0 \newline
&amp;amp;~ &amp;amp; \displaystyle \int_S p(x) f_i(x) dx = \alpha_i, ~i=1,2,3,\dots,n
\end{array}
$$
其中，集合 $S$ 是随机变量的 support，即其所有可能的取值。我们意图找到这样的概率分布 $p$, 他满足所有的约束（前两条是概率公理的约束，最后一条叫做矩约束，在模型中有时会假设随机变量的矩为常数），并且能够使得熵最大。将上述优化问题写成标准形式：&lt;/p></description></item></channel></rss>